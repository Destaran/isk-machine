// This file is auto-generated by @hey-api/openapi-ts

/**
 * Bad request model
 */
export type BadRequest = {
  /**
   * Bad request message
   */
  error: string;
};

/**
 * Error limited model
 */
export type ErrorLimited = {
  /**
   * Error limited message
   */
  error: string;
};

/**
 * Forbidden model
 */
export type Forbidden = {
  /**
   * Forbidden message
   */
  error: string;
  /**
   * status code received from SSO
   */
  sso_status?: number;
};

/**
 * Gateway timeout model
 */
export type GatewayTimeout = {
  /**
   * Gateway timeout message
   */
  error: string;
  /**
   * number of seconds the request was given
   */
  timeout?: number;
};

/**
 * Internal server error model
 */
export type InternalServerError = {
  /**
   * Internal server error message
   */
  error: string;
};

/**
 * Service unavailable model
 */
export type ServiceUnavailable = {
  /**
   * Service unavailable message
   */
  error: string;
};

/**
 * Unauthorized model
 */
export type Unauthorized = {
  /**
   * Unauthorized message
   */
  error: string;
};

export type GetAlliancesData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/alliances/';
};

export type GetAlliancesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetAlliancesError = GetAlliancesErrors[keyof GetAlliancesErrors];

export type GetAlliancesResponses = {
  /**
   * 200 ok array
   */
  200: Array<number>;
};

export type GetAlliancesResponse =
  GetAlliancesResponses[keyof GetAlliancesResponses];

export type GetAlliancesAllianceIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE alliance ID
     */
    alliance_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/alliances/{alliance_id}/';
};

export type GetAlliancesAllianceIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetAlliancesAllianceIdError =
  GetAlliancesAllianceIdErrors[keyof GetAlliancesAllianceIdErrors];

export type GetAlliancesAllianceIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * ID of the corporation that created the alliance
     */
    creator_corporation_id: number;
    /**
     * ID of the character that created the alliance
     */
    creator_id: number;
    /**
     * date_founded string
     */
    date_founded: string;
    /**
     * the executor corporation ID, if this alliance is not closed
     */
    executor_corporation_id?: number;
    /**
     * Faction ID this alliance is fighting for, if this alliance is enlisted in factional warfare
     */
    faction_id?: number;
    /**
     * the full name of the alliance
     */
    name: string;
    /**
     * the short name of the alliance
     */
    ticker: string;
  };
};

export type GetAlliancesAllianceIdResponse =
  GetAlliancesAllianceIdResponses[keyof GetAlliancesAllianceIdResponses];

export type GetAlliancesAllianceIdContactsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE alliance ID
     */
    alliance_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/alliances/{alliance_id}/contacts/';
};

export type GetAlliancesAllianceIdContactsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetAlliancesAllianceIdContactsError =
  GetAlliancesAllianceIdContactsErrors[keyof GetAlliancesAllianceIdContactsErrors];

export type GetAlliancesAllianceIdContactsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * contact_id integer
     */
    contact_id: number;
    /**
     * contact_type string
     */
    contact_type: 'character' | 'corporation' | 'alliance' | 'faction';
    /**
     * label_ids array
     */
    label_ids?: Array<number>;
    /**
     * Standing of the contact
     */
    standing: number;
  }>;
};

export type GetAlliancesAllianceIdContactsResponse =
  GetAlliancesAllianceIdContactsResponses[keyof GetAlliancesAllianceIdContactsResponses];

export type GetAlliancesAllianceIdContactsLabelsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE alliance ID
     */
    alliance_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/alliances/{alliance_id}/contacts/labels/';
};

export type GetAlliancesAllianceIdContactsLabelsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetAlliancesAllianceIdContactsLabelsError =
  GetAlliancesAllianceIdContactsLabelsErrors[keyof GetAlliancesAllianceIdContactsLabelsErrors];

export type GetAlliancesAllianceIdContactsLabelsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * label_id integer
     */
    label_id: number;
    /**
     * label_name string
     */
    label_name: string;
  }>;
};

export type GetAlliancesAllianceIdContactsLabelsResponse =
  GetAlliancesAllianceIdContactsLabelsResponses[keyof GetAlliancesAllianceIdContactsLabelsResponses];

export type GetAlliancesAllianceIdCorporationsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE alliance ID
     */
    alliance_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/alliances/{alliance_id}/corporations/';
};

export type GetAlliancesAllianceIdCorporationsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetAlliancesAllianceIdCorporationsError =
  GetAlliancesAllianceIdCorporationsErrors[keyof GetAlliancesAllianceIdCorporationsErrors];

export type GetAlliancesAllianceIdCorporationsResponses = {
  /**
   * 200 ok array
   */
  200: Array<number>;
};

export type GetAlliancesAllianceIdCorporationsResponse =
  GetAlliancesAllianceIdCorporationsResponses[keyof GetAlliancesAllianceIdCorporationsResponses];

export type GetAlliancesAllianceIdIconsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE alliance ID
     */
    alliance_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/alliances/{alliance_id}/icons/';
};

export type GetAlliancesAllianceIdIconsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * No image server for this datasource
   */
  404: {
    /**
     * error message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetAlliancesAllianceIdIconsError =
  GetAlliancesAllianceIdIconsErrors[keyof GetAlliancesAllianceIdIconsErrors];

export type GetAlliancesAllianceIdIconsResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * px128x128 string
     */
    px128x128?: string;
    /**
     * px64x64 string
     */
    px64x64?: string;
  };
};

export type GetAlliancesAllianceIdIconsResponse =
  GetAlliancesAllianceIdIconsResponses[keyof GetAlliancesAllianceIdIconsResponses];

export type PostCharactersAffiliationData = {
  /**
   * characters array
   */
  body: Array<number>;
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/characters/affiliation/';
};

export type PostCharactersAffiliationErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PostCharactersAffiliationError =
  PostCharactersAffiliationErrors[keyof PostCharactersAffiliationErrors];

export type PostCharactersAffiliationResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * The character's alliance ID, if their corporation is in an alliance
     */
    alliance_id?: number;
    /**
     * The character's ID
     */
    character_id: number;
    /**
     * The character's corporation ID
     */
    corporation_id: number;
    /**
     * The character's faction ID, if their corporation is in a faction
     */
    faction_id?: number;
  }>;
};

export type PostCharactersAffiliationResponse =
  PostCharactersAffiliationResponses[keyof PostCharactersAffiliationResponses];

export type GetCharactersCharacterIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/characters/{character_id}/';
};

export type GetCharactersCharacterIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdError =
  GetCharactersCharacterIdErrors[keyof GetCharactersCharacterIdErrors];

export type GetCharactersCharacterIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * The character's alliance ID
     */
    alliance_id?: number;
    /**
     * Creation date of the character
     */
    birthday: string;
    /**
     * bloodline_id integer
     */
    bloodline_id: number;
    /**
     * The character's corporation ID
     */
    corporation_id: number;
    /**
     * description string
     */
    description?: string;
    /**
     * ID of the faction the character is fighting for, if the character is enlisted in Factional Warfare
     */
    faction_id?: number;
    /**
     * gender string
     */
    gender: 'female' | 'male';
    /**
     * name string
     */
    name: string;
    /**
     * race_id integer
     */
    race_id: number;
    /**
     * security_status number
     */
    security_status?: number;
    /**
     * The individual title of the character
     */
    title?: string;
  };
};

export type GetCharactersCharacterIdResponse =
  GetCharactersCharacterIdResponses[keyof GetCharactersCharacterIdResponses];

export type GetCharactersCharacterIdAgentsResearchData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/agents_research/';
};

export type GetCharactersCharacterIdAgentsResearchErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdAgentsResearchError =
  GetCharactersCharacterIdAgentsResearchErrors[keyof GetCharactersCharacterIdAgentsResearchErrors];

export type GetCharactersCharacterIdAgentsResearchResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * agent_id integer
     */
    agent_id: number;
    /**
     * points_per_day number
     */
    points_per_day: number;
    /**
     * remainder_points number
     */
    remainder_points: number;
    /**
     * skill_type_id integer
     */
    skill_type_id: number;
    /**
     * started_at string
     */
    started_at: string;
  }>;
};

export type GetCharactersCharacterIdAgentsResearchResponse =
  GetCharactersCharacterIdAgentsResearchResponses[keyof GetCharactersCharacterIdAgentsResearchResponses];

export type GetCharactersCharacterIdAssetsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/assets/';
};

export type GetCharactersCharacterIdAssetsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Requested page does not exist
   */
  404: {
    /**
     * error message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdAssetsError =
  GetCharactersCharacterIdAssetsErrors[keyof GetCharactersCharacterIdAssetsErrors];

export type GetCharactersCharacterIdAssetsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * is_blueprint_copy boolean
     */
    is_blueprint_copy?: boolean;
    /**
     * is_singleton boolean
     */
    is_singleton: boolean;
    /**
     * item_id integer
     */
    item_id: number;
    /**
     * location_flag string
     */
    location_flag:
      | 'AssetSafety'
      | 'AutoFit'
      | 'BoosterBay'
      | 'Cargo'
      | 'CorporationGoalDeliveries'
      | 'CorpseBay'
      | 'Deliveries'
      | 'DroneBay'
      | 'FighterBay'
      | 'FighterTube0'
      | 'FighterTube1'
      | 'FighterTube2'
      | 'FighterTube3'
      | 'FighterTube4'
      | 'FleetHangar'
      | 'FrigateEscapeBay'
      | 'Hangar'
      | 'HangarAll'
      | 'HiSlot0'
      | 'HiSlot1'
      | 'HiSlot2'
      | 'HiSlot3'
      | 'HiSlot4'
      | 'HiSlot5'
      | 'HiSlot6'
      | 'HiSlot7'
      | 'HiddenModifiers'
      | 'Implant'
      | 'InfrastructureHangar'
      | 'LoSlot0'
      | 'LoSlot1'
      | 'LoSlot2'
      | 'LoSlot3'
      | 'LoSlot4'
      | 'LoSlot5'
      | 'LoSlot6'
      | 'LoSlot7'
      | 'Locked'
      | 'MedSlot0'
      | 'MedSlot1'
      | 'MedSlot2'
      | 'MedSlot3'
      | 'MedSlot4'
      | 'MedSlot5'
      | 'MedSlot6'
      | 'MedSlot7'
      | 'MobileDepotHold'
      | 'MoonMaterialBay'
      | 'QuafeBay'
      | 'RigSlot0'
      | 'RigSlot1'
      | 'RigSlot2'
      | 'RigSlot3'
      | 'RigSlot4'
      | 'RigSlot5'
      | 'RigSlot6'
      | 'RigSlot7'
      | 'ShipHangar'
      | 'Skill'
      | 'SpecializedAmmoHold'
      | 'SpecializedAsteroidHold'
      | 'SpecializedCommandCenterHold'
      | 'SpecializedFuelBay'
      | 'SpecializedGasHold'
      | 'SpecializedIceHold'
      | 'SpecializedIndustrialShipHold'
      | 'SpecializedLargeShipHold'
      | 'SpecializedMaterialBay'
      | 'SpecializedMediumShipHold'
      | 'SpecializedMineralHold'
      | 'SpecializedOreHold'
      | 'SpecializedPlanetaryCommoditiesHold'
      | 'SpecializedSalvageHold'
      | 'SpecializedShipHold'
      | 'SpecializedSmallShipHold'
      | 'StructureDeedBay'
      | 'SubSystemBay'
      | 'SubSystemSlot0'
      | 'SubSystemSlot1'
      | 'SubSystemSlot2'
      | 'SubSystemSlot3'
      | 'SubSystemSlot4'
      | 'SubSystemSlot5'
      | 'SubSystemSlot6'
      | 'SubSystemSlot7'
      | 'Unlocked'
      | 'Wardrobe';
    /**
     * location_id integer
     */
    location_id: number;
    /**
     * location_type string
     */
    location_type: 'station' | 'solar_system' | 'item' | 'other';
    /**
     * quantity integer
     */
    quantity: number;
    /**
     * type_id integer
     */
    type_id: number;
  }>;
};

export type GetCharactersCharacterIdAssetsResponse =
  GetCharactersCharacterIdAssetsResponses[keyof GetCharactersCharacterIdAssetsResponses];

export type PostCharactersCharacterIdAssetsLocationsData = {
  /**
   * item_ids array
   */
  body: Array<number>;
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/assets/locations/';
};

export type PostCharactersCharacterIdAssetsLocationsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PostCharactersCharacterIdAssetsLocationsError =
  PostCharactersCharacterIdAssetsLocationsErrors[keyof PostCharactersCharacterIdAssetsLocationsErrors];

export type PostCharactersCharacterIdAssetsLocationsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * item_id integer
     */
    item_id: number;
    /**
     * position object
     */
    position: {
      /**
       * x number
       */
      x: number;
      /**
       * y number
       */
      y: number;
      /**
       * z number
       */
      z: number;
    };
  }>;
};

export type PostCharactersCharacterIdAssetsLocationsResponse =
  PostCharactersCharacterIdAssetsLocationsResponses[keyof PostCharactersCharacterIdAssetsLocationsResponses];

export type PostCharactersCharacterIdAssetsNamesData = {
  /**
   * item_ids array
   */
  body: Array<number>;
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/assets/names/';
};

export type PostCharactersCharacterIdAssetsNamesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PostCharactersCharacterIdAssetsNamesError =
  PostCharactersCharacterIdAssetsNamesErrors[keyof PostCharactersCharacterIdAssetsNamesErrors];

export type PostCharactersCharacterIdAssetsNamesResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * item_id integer
     */
    item_id: number;
    /**
     * name string
     */
    name: string;
  }>;
};

export type PostCharactersCharacterIdAssetsNamesResponse =
  PostCharactersCharacterIdAssetsNamesResponses[keyof PostCharactersCharacterIdAssetsNamesResponses];

export type GetCharactersCharacterIdAttributesData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/attributes/';
};

export type GetCharactersCharacterIdAttributesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdAttributesError =
  GetCharactersCharacterIdAttributesErrors[keyof GetCharactersCharacterIdAttributesErrors];

export type GetCharactersCharacterIdAttributesResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * Neural remapping cooldown after a character uses remap accrued over time
     */
    accrued_remap_cooldown_date?: string;
    /**
     * Number of available bonus character neural remaps
     */
    bonus_remaps?: number;
    /**
     * charisma integer
     */
    charisma: number;
    /**
     * intelligence integer
     */
    intelligence: number;
    /**
     * Datetime of last neural remap, including usage of bonus remaps
     */
    last_remap_date?: string;
    /**
     * memory integer
     */
    memory: number;
    /**
     * perception integer
     */
    perception: number;
    /**
     * willpower integer
     */
    willpower: number;
  };
};

export type GetCharactersCharacterIdAttributesResponse =
  GetCharactersCharacterIdAttributesResponses[keyof GetCharactersCharacterIdAttributesResponses];

export type GetCharactersCharacterIdBlueprintsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/blueprints/';
};

export type GetCharactersCharacterIdBlueprintsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdBlueprintsError =
  GetCharactersCharacterIdBlueprintsErrors[keyof GetCharactersCharacterIdBlueprintsErrors];

export type GetCharactersCharacterIdBlueprintsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * Unique ID for this item.
     */
    item_id: number;
    /**
     * Type of the location_id
     */
    location_flag:
      | 'AutoFit'
      | 'Cargo'
      | 'CorpseBay'
      | 'DroneBay'
      | 'FleetHangar'
      | 'Deliveries'
      | 'HiddenModifiers'
      | 'Hangar'
      | 'HangarAll'
      | 'LoSlot0'
      | 'LoSlot1'
      | 'LoSlot2'
      | 'LoSlot3'
      | 'LoSlot4'
      | 'LoSlot5'
      | 'LoSlot6'
      | 'LoSlot7'
      | 'MedSlot0'
      | 'MedSlot1'
      | 'MedSlot2'
      | 'MedSlot3'
      | 'MedSlot4'
      | 'MedSlot5'
      | 'MedSlot6'
      | 'MedSlot7'
      | 'HiSlot0'
      | 'HiSlot1'
      | 'HiSlot2'
      | 'HiSlot3'
      | 'HiSlot4'
      | 'HiSlot5'
      | 'HiSlot6'
      | 'HiSlot7'
      | 'AssetSafety'
      | 'Locked'
      | 'Unlocked'
      | 'Implant'
      | 'QuafeBay'
      | 'RigSlot0'
      | 'RigSlot1'
      | 'RigSlot2'
      | 'RigSlot3'
      | 'RigSlot4'
      | 'RigSlot5'
      | 'RigSlot6'
      | 'RigSlot7'
      | 'ShipHangar'
      | 'SpecializedFuelBay'
      | 'SpecializedOreHold'
      | 'SpecializedGasHold'
      | 'SpecializedMineralHold'
      | 'SpecializedSalvageHold'
      | 'SpecializedShipHold'
      | 'SpecializedSmallShipHold'
      | 'SpecializedMediumShipHold'
      | 'SpecializedLargeShipHold'
      | 'SpecializedIndustrialShipHold'
      | 'SpecializedAmmoHold'
      | 'SpecializedCommandCenterHold'
      | 'SpecializedPlanetaryCommoditiesHold'
      | 'SpecializedMaterialBay'
      | 'SubSystemSlot0'
      | 'SubSystemSlot1'
      | 'SubSystemSlot2'
      | 'SubSystemSlot3'
      | 'SubSystemSlot4'
      | 'SubSystemSlot5'
      | 'SubSystemSlot6'
      | 'SubSystemSlot7'
      | 'FighterBay'
      | 'FighterTube0'
      | 'FighterTube1'
      | 'FighterTube2'
      | 'FighterTube3'
      | 'FighterTube4'
      | 'Module';
    /**
     * References a station, a ship or an item_id if this blueprint is located within a container. If the return value is an item_id, then the Character AssetList API must be queried to find the container using the given item_id to determine the correct location of the Blueprint.
     */
    location_id: number;
    /**
     * Material Efficiency Level of the blueprint.
     */
    material_efficiency: number;
    /**
     * A range of numbers with a minimum of -2 and no maximum value where -1 is an original and -2 is a copy. It can be a positive integer if it is a stack of blueprint originals fresh from the market (e.g. no activities performed on them yet).
     */
    quantity: number;
    /**
     * Number of runs remaining if the blueprint is a copy, -1 if it is an original.
     */
    runs: number;
    /**
     * Time Efficiency Level of the blueprint.
     */
    time_efficiency: number;
    /**
     * type_id integer
     */
    type_id: number;
  }>;
};

export type GetCharactersCharacterIdBlueprintsResponse =
  GetCharactersCharacterIdBlueprintsResponses[keyof GetCharactersCharacterIdBlueprintsResponses];

export type GetCharactersCharacterIdCalendarData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * The event ID to retrieve events from
     */
    from_event?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/calendar/';
};

export type GetCharactersCharacterIdCalendarErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdCalendarError =
  GetCharactersCharacterIdCalendarErrors[keyof GetCharactersCharacterIdCalendarErrors];

export type GetCharactersCharacterIdCalendarResponses = {
  /**
   * Up to 50 events from now or the event you requested
   */
  200: Array<{
    /**
     * event_date string
     */
    event_date?: string;
    /**
     * event_id integer
     */
    event_id?: number;
    /**
     * event_response string
     */
    event_response?: 'declined' | 'not_responded' | 'accepted' | 'tentative';
    /**
     * importance integer
     */
    importance?: number;
    /**
     * title string
     */
    title?: string;
  }>;
};

export type GetCharactersCharacterIdCalendarResponse =
  GetCharactersCharacterIdCalendarResponses[keyof GetCharactersCharacterIdCalendarResponses];

export type GetCharactersCharacterIdCalendarEventIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
    /**
     * The id of the event requested
     */
    event_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/calendar/{event_id}/';
};

export type GetCharactersCharacterIdCalendarEventIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdCalendarEventIdError =
  GetCharactersCharacterIdCalendarEventIdErrors[keyof GetCharactersCharacterIdCalendarEventIdErrors];

export type GetCharactersCharacterIdCalendarEventIdResponses = {
  /**
   * Full details of a specific event
   */
  200: {
    /**
     * date string
     */
    date: string;
    /**
     * Length in minutes
     */
    duration: number;
    /**
     * event_id integer
     */
    event_id: number;
    /**
     * importance integer
     */
    importance: number;
    /**
     * owner_id integer
     */
    owner_id: number;
    /**
     * owner_name string
     */
    owner_name: string;
    /**
     * owner_type string
     */
    owner_type:
      | 'eve_server'
      | 'corporation'
      | 'faction'
      | 'character'
      | 'alliance';
    /**
     * response string
     */
    response: string;
    /**
     * text string
     */
    text: string;
    /**
     * title string
     */
    title: string;
  };
};

export type GetCharactersCharacterIdCalendarEventIdResponse =
  GetCharactersCharacterIdCalendarEventIdResponses[keyof GetCharactersCharacterIdCalendarEventIdResponses];

export type PutCharactersCharacterIdCalendarEventIdData = {
  /**
   * response object
   */
  body: {
    /**
     * response string
     */
    response: 'accepted' | 'declined' | 'tentative';
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
    /**
     * The ID of the event requested
     */
    event_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/calendar/{event_id}/';
};

export type PutCharactersCharacterIdCalendarEventIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PutCharactersCharacterIdCalendarEventIdError =
  PutCharactersCharacterIdCalendarEventIdErrors[keyof PutCharactersCharacterIdCalendarEventIdErrors];

export type PutCharactersCharacterIdCalendarEventIdResponses = {
  /**
   * Event updated
   */
  204: unknown;
};

export type GetCharactersCharacterIdCalendarEventIdAttendeesData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
    /**
     * The id of the event requested
     */
    event_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/calendar/{event_id}/attendees/';
};

export type GetCharactersCharacterIdCalendarEventIdAttendeesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdCalendarEventIdAttendeesError =
  GetCharactersCharacterIdCalendarEventIdAttendeesErrors[keyof GetCharactersCharacterIdCalendarEventIdAttendeesErrors];

export type GetCharactersCharacterIdCalendarEventIdAttendeesResponses = {
  /**
   * List of attendees for a given event
   */
  200: Array<{
    /**
     * character_id integer
     */
    character_id?: number;
    /**
     * event_response string
     */
    event_response?: 'declined' | 'not_responded' | 'accepted' | 'tentative';
  }>;
};

export type GetCharactersCharacterIdCalendarEventIdAttendeesResponse =
  GetCharactersCharacterIdCalendarEventIdAttendeesResponses[keyof GetCharactersCharacterIdCalendarEventIdAttendeesResponses];

export type GetCharactersCharacterIdClonesData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/clones/';
};

export type GetCharactersCharacterIdClonesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdClonesError =
  GetCharactersCharacterIdClonesErrors[keyof GetCharactersCharacterIdClonesErrors];

export type GetCharactersCharacterIdClonesResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * home_location object
     */
    home_location?: {
      /**
       * location_id integer
       */
      location_id?: number;
      /**
       * location_type string
       */
      location_type?: 'station' | 'structure';
    };
    /**
     * jump_clones array
     */
    jump_clones: Array<{
      /**
       * implants array
       */
      implants: Array<number>;
      /**
       * jump_clone_id integer
       */
      jump_clone_id: number;
      /**
       * location_id integer
       */
      location_id: number;
      /**
       * location_type string
       */
      location_type: 'station' | 'structure';
      /**
       * name string
       */
      name?: string;
    }>;
    /**
     * last_clone_jump_date string
     */
    last_clone_jump_date?: string;
    /**
     * last_station_change_date string
     */
    last_station_change_date?: string;
  };
};

export type GetCharactersCharacterIdClonesResponse =
  GetCharactersCharacterIdClonesResponses[keyof GetCharactersCharacterIdClonesResponses];

export type DeleteCharactersCharacterIdContactsData = {
  body?: never;
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query: {
    /**
     * A list of contacts to delete
     */
    contact_ids: Array<number>;
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/contacts/';
};

export type DeleteCharactersCharacterIdContactsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type DeleteCharactersCharacterIdContactsError =
  DeleteCharactersCharacterIdContactsErrors[keyof DeleteCharactersCharacterIdContactsErrors];

export type DeleteCharactersCharacterIdContactsResponses = {
  /**
   * Contacts deleted
   */
  204: unknown;
};

export type GetCharactersCharacterIdContactsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/contacts/';
};

export type GetCharactersCharacterIdContactsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdContactsError =
  GetCharactersCharacterIdContactsErrors[keyof GetCharactersCharacterIdContactsErrors];

export type GetCharactersCharacterIdContactsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * contact_id integer
     */
    contact_id: number;
    /**
     * contact_type string
     */
    contact_type: 'character' | 'corporation' | 'alliance' | 'faction';
    /**
     * Whether this contact is in the blocked list. Note a missing value denotes unknown, not true or false
     */
    is_blocked?: boolean;
    /**
     * Whether this contact is being watched
     */
    is_watched?: boolean;
    /**
     * label_ids array
     */
    label_ids?: Array<number>;
    /**
     * Standing of the contact
     */
    standing: number;
  }>;
};

export type GetCharactersCharacterIdContactsResponse =
  GetCharactersCharacterIdContactsResponses[keyof GetCharactersCharacterIdContactsResponses];

export type PostCharactersCharacterIdContactsData = {
  /**
   * contact_ids array
   */
  body: Array<number>;
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Add custom labels to the new contact
     */
    label_ids?: Array<number>;
    /**
     * Standing for the contact
     */
    standing: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
    /**
     * Whether the contact should be watched, note this is only effective on characters
     */
    watched?: boolean;
  };
  url: '/characters/{character_id}/contacts/';
};

export type PostCharactersCharacterIdContactsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
  /**
   * Error 520
   */
  520: {
    /**
     * Error 520 message
     */
    error?: string;
  };
};

export type PostCharactersCharacterIdContactsError =
  PostCharactersCharacterIdContactsErrors[keyof PostCharactersCharacterIdContactsErrors];

export type PostCharactersCharacterIdContactsResponses = {
  /**
   * 201 created array
   */
  201: Array<number>;
};

export type PostCharactersCharacterIdContactsResponse =
  PostCharactersCharacterIdContactsResponses[keyof PostCharactersCharacterIdContactsResponses];

export type PutCharactersCharacterIdContactsData = {
  /**
   * contact_ids array
   */
  body: Array<number>;
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Add custom labels to the contact
     */
    label_ids?: Array<number>;
    /**
     * Standing for the contact
     */
    standing: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
    /**
     * Whether the contact should be watched, note this is only effective on characters
     */
    watched?: boolean;
  };
  url: '/characters/{character_id}/contacts/';
};

export type PutCharactersCharacterIdContactsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PutCharactersCharacterIdContactsError =
  PutCharactersCharacterIdContactsErrors[keyof PutCharactersCharacterIdContactsErrors];

export type PutCharactersCharacterIdContactsResponses = {
  /**
   * Contacts updated
   */
  204: unknown;
};

export type GetCharactersCharacterIdContactsLabelsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/contacts/labels/';
};

export type GetCharactersCharacterIdContactsLabelsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdContactsLabelsError =
  GetCharactersCharacterIdContactsLabelsErrors[keyof GetCharactersCharacterIdContactsLabelsErrors];

export type GetCharactersCharacterIdContactsLabelsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * label_id integer
     */
    label_id: number;
    /**
     * label_name string
     */
    label_name: string;
  }>;
};

export type GetCharactersCharacterIdContactsLabelsResponse =
  GetCharactersCharacterIdContactsLabelsResponses[keyof GetCharactersCharacterIdContactsLabelsResponses];

export type GetCharactersCharacterIdContractsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/contracts/';
};

export type GetCharactersCharacterIdContractsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdContractsError =
  GetCharactersCharacterIdContractsErrors[keyof GetCharactersCharacterIdContractsErrors];

export type GetCharactersCharacterIdContractsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * Who will accept the contract
     */
    acceptor_id: number;
    /**
     * ID to whom the contract is assigned, can be alliance, corporation or character ID
     */
    assignee_id: number;
    /**
     * To whom the contract is available
     */
    availability: 'public' | 'personal' | 'corporation' | 'alliance';
    /**
     * Buyout price (for Auctions only)
     */
    buyout?: number;
    /**
     * Collateral price (for Couriers only)
     */
    collateral?: number;
    /**
     * contract_id integer
     */
    contract_id: number;
    /**
     * Date of confirmation of contract
     */
    date_accepted?: string;
    /**
     * Date of completed of contract
     */
    date_completed?: string;
    /**
     * Expiration date of the contract
     */
    date_expired: string;
    /**
     * Сreation date of the contract
     */
    date_issued: string;
    /**
     * Number of days to perform the contract
     */
    days_to_complete?: number;
    /**
     * End location ID (for Couriers contract)
     */
    end_location_id?: number;
    /**
     * true if the contract was issued on behalf of the issuer's corporation
     */
    for_corporation: boolean;
    /**
     * Character's corporation ID for the issuer
     */
    issuer_corporation_id: number;
    /**
     * Character ID for the issuer
     */
    issuer_id: number;
    /**
     * Price of contract (for ItemsExchange and Auctions)
     */
    price?: number;
    /**
     * Remuneration for contract (for Couriers only)
     */
    reward?: number;
    /**
     * Start location ID (for Couriers contract)
     */
    start_location_id?: number;
    /**
     * Status of the the contract
     */
    status:
      | 'outstanding'
      | 'in_progress'
      | 'finished_issuer'
      | 'finished_contractor'
      | 'finished'
      | 'cancelled'
      | 'rejected'
      | 'failed'
      | 'deleted'
      | 'reversed';
    /**
     * Title of the contract
     */
    title?: string;
    /**
     * Type of the contract
     */
    type: 'unknown' | 'item_exchange' | 'auction' | 'courier' | 'loan';
    /**
     * Volume of items in the contract
     */
    volume?: number;
  }>;
};

export type GetCharactersCharacterIdContractsResponse =
  GetCharactersCharacterIdContractsResponses[keyof GetCharactersCharacterIdContractsResponses];

export type GetCharactersCharacterIdContractsContractIdBidsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
    /**
     * ID of a contract
     */
    contract_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/contracts/{contract_id}/bids/';
};

export type GetCharactersCharacterIdContractsContractIdBidsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdContractsContractIdBidsError =
  GetCharactersCharacterIdContractsContractIdBidsErrors[keyof GetCharactersCharacterIdContractsContractIdBidsErrors];

export type GetCharactersCharacterIdContractsContractIdBidsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * The amount bid, in ISK
     */
    amount: number;
    /**
     * Unique ID for the bid
     */
    bid_id: number;
    /**
     * Character ID of the bidder
     */
    bidder_id: number;
    /**
     * Datetime when the bid was placed
     */
    date_bid: string;
  }>;
};

export type GetCharactersCharacterIdContractsContractIdBidsResponse =
  GetCharactersCharacterIdContractsContractIdBidsResponses[keyof GetCharactersCharacterIdContractsContractIdBidsResponses];

export type GetCharactersCharacterIdContractsContractIdItemsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
    /**
     * ID of a contract
     */
    contract_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/contracts/{contract_id}/items/';
};

export type GetCharactersCharacterIdContractsContractIdItemsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdContractsContractIdItemsError =
  GetCharactersCharacterIdContractsContractIdItemsErrors[keyof GetCharactersCharacterIdContractsContractIdItemsErrors];

export type GetCharactersCharacterIdContractsContractIdItemsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract
     */
    is_included: boolean;
    /**
     * is_singleton boolean
     */
    is_singleton: boolean;
    /**
     * Number of items in the stack
     */
    quantity: number;
    /**
     * -1 indicates that the item is a singleton (non-stackable). If the item happens to be a Blueprint, -1 is an Original and -2 is a Blueprint Copy
     */
    raw_quantity?: number;
    /**
     * Unique ID for the item
     */
    record_id: number;
    /**
     * Type ID for item
     */
    type_id: number;
  }>;
};

export type GetCharactersCharacterIdContractsContractIdItemsResponse =
  GetCharactersCharacterIdContractsContractIdItemsResponses[keyof GetCharactersCharacterIdContractsContractIdItemsResponses];

export type GetCharactersCharacterIdCorporationhistoryData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/characters/{character_id}/corporationhistory/';
};

export type GetCharactersCharacterIdCorporationhistoryErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdCorporationhistoryError =
  GetCharactersCharacterIdCorporationhistoryErrors[keyof GetCharactersCharacterIdCorporationhistoryErrors];

export type GetCharactersCharacterIdCorporationhistoryResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * corporation_id integer
     */
    corporation_id: number;
    /**
     * True if the corporation has been deleted
     */
    is_deleted?: boolean;
    /**
     * An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous
     */
    record_id: number;
    /**
     * start_date string
     */
    start_date: string;
  }>;
};

export type GetCharactersCharacterIdCorporationhistoryResponse =
  GetCharactersCharacterIdCorporationhistoryResponses[keyof GetCharactersCharacterIdCorporationhistoryResponses];

export type PostCharactersCharacterIdCspaData = {
  /**
   * characters array
   */
  body: Array<number>;
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/cspa/';
};

export type PostCharactersCharacterIdCspaErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PostCharactersCharacterIdCspaError =
  PostCharactersCharacterIdCspaErrors[keyof PostCharactersCharacterIdCspaErrors];

export type PostCharactersCharacterIdCspaResponses = {
  /**
   * 201 created number
   */
  201: number;
};

export type PostCharactersCharacterIdCspaResponse =
  PostCharactersCharacterIdCspaResponses[keyof PostCharactersCharacterIdCspaResponses];

export type GetCharactersCharacterIdFatigueData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/fatigue/';
};

export type GetCharactersCharacterIdFatigueErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdFatigueError =
  GetCharactersCharacterIdFatigueErrors[keyof GetCharactersCharacterIdFatigueErrors];

export type GetCharactersCharacterIdFatigueResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * Character's jump fatigue expiry
     */
    jump_fatigue_expire_date?: string;
    /**
     * Character's last jump activation
     */
    last_jump_date?: string;
    /**
     * Character's last jump update
     */
    last_update_date?: string;
  };
};

export type GetCharactersCharacterIdFatigueResponse =
  GetCharactersCharacterIdFatigueResponses[keyof GetCharactersCharacterIdFatigueResponses];

export type GetCharactersCharacterIdFittingsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/fittings/';
};

export type GetCharactersCharacterIdFittingsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdFittingsError =
  GetCharactersCharacterIdFittingsErrors[keyof GetCharactersCharacterIdFittingsErrors];

export type GetCharactersCharacterIdFittingsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * description string
     */
    description: string;
    /**
     * fitting_id integer
     */
    fitting_id: number;
    /**
     * items array
     */
    items: Array<{
      /**
       * flag string
       */
      flag:
        | 'Cargo'
        | 'DroneBay'
        | 'FighterBay'
        | 'HiSlot0'
        | 'HiSlot1'
        | 'HiSlot2'
        | 'HiSlot3'
        | 'HiSlot4'
        | 'HiSlot5'
        | 'HiSlot6'
        | 'HiSlot7'
        | 'Invalid'
        | 'LoSlot0'
        | 'LoSlot1'
        | 'LoSlot2'
        | 'LoSlot3'
        | 'LoSlot4'
        | 'LoSlot5'
        | 'LoSlot6'
        | 'LoSlot7'
        | 'MedSlot0'
        | 'MedSlot1'
        | 'MedSlot2'
        | 'MedSlot3'
        | 'MedSlot4'
        | 'MedSlot5'
        | 'MedSlot6'
        | 'MedSlot7'
        | 'RigSlot0'
        | 'RigSlot1'
        | 'RigSlot2'
        | 'ServiceSlot0'
        | 'ServiceSlot1'
        | 'ServiceSlot2'
        | 'ServiceSlot3'
        | 'ServiceSlot4'
        | 'ServiceSlot5'
        | 'ServiceSlot6'
        | 'ServiceSlot7'
        | 'SubSystemSlot0'
        | 'SubSystemSlot1'
        | 'SubSystemSlot2'
        | 'SubSystemSlot3';
      /**
       * quantity integer
       */
      quantity: number;
      /**
       * type_id integer
       */
      type_id: number;
    }>;
    /**
     * name string
     */
    name: string;
    /**
     * ship_type_id integer
     */
    ship_type_id: number;
  }>;
};

export type GetCharactersCharacterIdFittingsResponse =
  GetCharactersCharacterIdFittingsResponses[keyof GetCharactersCharacterIdFittingsResponses];

export type PostCharactersCharacterIdFittingsData = {
  /**
   * fitting object
   */
  body: {
    /**
     * description string
     */
    description: string;
    /**
     * items array
     */
    items: Array<{
      /**
       * Fitting location for the item. Entries placed in 'Invalid' will be discarded. If this leaves the fitting with nothing, it will cause an error.
       */
      flag:
        | 'Cargo'
        | 'DroneBay'
        | 'FighterBay'
        | 'HiSlot0'
        | 'HiSlot1'
        | 'HiSlot2'
        | 'HiSlot3'
        | 'HiSlot4'
        | 'HiSlot5'
        | 'HiSlot6'
        | 'HiSlot7'
        | 'Invalid'
        | 'LoSlot0'
        | 'LoSlot1'
        | 'LoSlot2'
        | 'LoSlot3'
        | 'LoSlot4'
        | 'LoSlot5'
        | 'LoSlot6'
        | 'LoSlot7'
        | 'MedSlot0'
        | 'MedSlot1'
        | 'MedSlot2'
        | 'MedSlot3'
        | 'MedSlot4'
        | 'MedSlot5'
        | 'MedSlot6'
        | 'MedSlot7'
        | 'RigSlot0'
        | 'RigSlot1'
        | 'RigSlot2'
        | 'ServiceSlot0'
        | 'ServiceSlot1'
        | 'ServiceSlot2'
        | 'ServiceSlot3'
        | 'ServiceSlot4'
        | 'ServiceSlot5'
        | 'ServiceSlot6'
        | 'ServiceSlot7'
        | 'SubSystemSlot0'
        | 'SubSystemSlot1'
        | 'SubSystemSlot2'
        | 'SubSystemSlot3';
      /**
       * quantity integer
       */
      quantity: number;
      /**
       * type_id integer
       */
      type_id: number;
    }>;
    /**
     * name string
     */
    name: string;
    /**
     * ship_type_id integer
     */
    ship_type_id: number;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/fittings/';
};

export type PostCharactersCharacterIdFittingsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PostCharactersCharacterIdFittingsError =
  PostCharactersCharacterIdFittingsErrors[keyof PostCharactersCharacterIdFittingsErrors];

export type PostCharactersCharacterIdFittingsResponses = {
  /**
   * 201 created object
   */
  201: {
    /**
     * fitting_id integer
     */
    fitting_id: number;
  };
};

export type PostCharactersCharacterIdFittingsResponse =
  PostCharactersCharacterIdFittingsResponses[keyof PostCharactersCharacterIdFittingsResponses];

export type DeleteCharactersCharacterIdFittingsFittingIdData = {
  body?: never;
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
    /**
     * ID for a fitting of this character
     */
    fitting_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/fittings/{fitting_id}/';
};

export type DeleteCharactersCharacterIdFittingsFittingIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type DeleteCharactersCharacterIdFittingsFittingIdError =
  DeleteCharactersCharacterIdFittingsFittingIdErrors[keyof DeleteCharactersCharacterIdFittingsFittingIdErrors];

export type DeleteCharactersCharacterIdFittingsFittingIdResponses = {
  /**
   * Fitting deleted
   */
  204: unknown;
};

export type GetCharactersCharacterIdFleetData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/fleet/';
};

export type GetCharactersCharacterIdFleetErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdFleetError =
  GetCharactersCharacterIdFleetErrors[keyof GetCharactersCharacterIdFleetErrors];

export type GetCharactersCharacterIdFleetResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * The character's current fleet ID
     */
    fleet_id: number;
    /**
     * Member’s role in fleet
     */
    role:
      | 'fleet_commander'
      | 'squad_commander'
      | 'squad_member'
      | 'wing_commander';
    /**
     * ID of the squad the member is in. If not applicable, will be set to -1
     */
    squad_id: number;
    /**
     * ID of the wing the member is in. If not applicable, will be set to -1
     */
    wing_id: number;
  };
};

export type GetCharactersCharacterIdFleetResponse =
  GetCharactersCharacterIdFleetResponses[keyof GetCharactersCharacterIdFleetResponses];

export type GetCharactersCharacterIdFwStatsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/fw/stats/';
};

export type GetCharactersCharacterIdFwStatsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdFwStatsError =
  GetCharactersCharacterIdFwStatsErrors[keyof GetCharactersCharacterIdFwStatsErrors];

export type GetCharactersCharacterIdFwStatsResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * The given character's current faction rank
     */
    current_rank?: number;
    /**
     * The enlistment date of the given character into faction warfare. Will not be included if character is not enlisted in faction warfare
     */
    enlisted_on?: string;
    /**
     * The faction the given character is enlisted to fight for. Will not be included if character is not enlisted in faction warfare
     */
    faction_id?: number;
    /**
     * The given character's highest faction rank achieved
     */
    highest_rank?: number;
    /**
     * Summary of kills done by the given character against enemy factions
     */
    kills: {
      /**
       * Last week's total number of kills by a given character against enemy factions
       */
      last_week: number;
      /**
       * Total number of kills by a given character against enemy factions since the character enlisted
       */
      total: number;
      /**
       * Yesterday's total number of kills by a given character against enemy factions
       */
      yesterday: number;
    };
    /**
     * Summary of victory points gained by the given character for the enlisted faction
     */
    victory_points: {
      /**
       * Last week's victory points gained by the given character
       */
      last_week: number;
      /**
       * Total victory points gained since the given character enlisted
       */
      total: number;
      /**
       * Yesterday's victory points gained by the given character
       */
      yesterday: number;
    };
  };
};

export type GetCharactersCharacterIdFwStatsResponse =
  GetCharactersCharacterIdFwStatsResponses[keyof GetCharactersCharacterIdFwStatsResponses];

export type GetCharactersCharacterIdImplantsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/implants/';
};

export type GetCharactersCharacterIdImplantsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdImplantsError =
  GetCharactersCharacterIdImplantsErrors[keyof GetCharactersCharacterIdImplantsErrors];

export type GetCharactersCharacterIdImplantsResponses = {
  /**
   * 200 ok array
   */
  200: Array<number>;
};

export type GetCharactersCharacterIdImplantsResponse =
  GetCharactersCharacterIdImplantsResponses[keyof GetCharactersCharacterIdImplantsResponses];

export type GetCharactersCharacterIdIndustryJobsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Whether to retrieve completed character industry jobs. Only includes jobs from the past 90 days
     */
    include_completed?: boolean;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/industry/jobs/';
};

export type GetCharactersCharacterIdIndustryJobsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdIndustryJobsError =
  GetCharactersCharacterIdIndustryJobsErrors[keyof GetCharactersCharacterIdIndustryJobsErrors];

export type GetCharactersCharacterIdIndustryJobsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * Job activity ID
     */
    activity_id: number;
    /**
     * blueprint_id integer
     */
    blueprint_id: number;
    /**
     * Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility
     */
    blueprint_location_id: number;
    /**
     * blueprint_type_id integer
     */
    blueprint_type_id: number;
    /**
     * ID of the character which completed this job
     */
    completed_character_id?: number;
    /**
     * Date and time when this job was completed
     */
    completed_date?: string;
    /**
     * The sume of job installation fee and industry facility tax
     */
    cost?: number;
    /**
     * Job duration in seconds
     */
    duration: number;
    /**
     * Date and time when this job finished
     */
    end_date: string;
    /**
     * ID of the facility where this job is running
     */
    facility_id: number;
    /**
     * ID of the character which installed this job
     */
    installer_id: number;
    /**
     * Unique job ID
     */
    job_id: number;
    /**
     * Number of runs blueprint is licensed for
     */
    licensed_runs?: number;
    /**
     * Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility
     */
    output_location_id: number;
    /**
     * Date and time when this job was paused (i.e. time when the facility where this job was installed went offline)
     */
    pause_date?: string;
    /**
     * Chance of success for invention
     */
    probability?: number;
    /**
     * Type ID of product (manufactured, copied or invented)
     */
    product_type_id?: number;
    /**
     * Number of runs for a manufacturing job, or number of copies to make for a blueprint copy
     */
    runs: number;
    /**
     * Date and time when this job started
     */
    start_date: string;
    /**
     * ID of the station where industry facility is located
     */
    station_id: number;
    /**
     * status string
     */
    status:
      | 'active'
      | 'cancelled'
      | 'delivered'
      | 'paused'
      | 'ready'
      | 'reverted';
    /**
     * Number of successful runs for this job. Equal to runs unless this is an invention job
     */
    successful_runs?: number;
  }>;
};

export type GetCharactersCharacterIdIndustryJobsResponse =
  GetCharactersCharacterIdIndustryJobsResponses[keyof GetCharactersCharacterIdIndustryJobsResponses];

export type GetCharactersCharacterIdKillmailsRecentData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/killmails/recent/';
};

export type GetCharactersCharacterIdKillmailsRecentErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdKillmailsRecentError =
  GetCharactersCharacterIdKillmailsRecentErrors[keyof GetCharactersCharacterIdKillmailsRecentErrors];

export type GetCharactersCharacterIdKillmailsRecentResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * A hash of this killmail
     */
    killmail_hash: string;
    /**
     * ID of this killmail
     */
    killmail_id: number;
  }>;
};

export type GetCharactersCharacterIdKillmailsRecentResponse =
  GetCharactersCharacterIdKillmailsRecentResponses[keyof GetCharactersCharacterIdKillmailsRecentResponses];

export type GetCharactersCharacterIdLocationData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/location/';
};

export type GetCharactersCharacterIdLocationErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdLocationError =
  GetCharactersCharacterIdLocationErrors[keyof GetCharactersCharacterIdLocationErrors];

export type GetCharactersCharacterIdLocationResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * solar_system_id integer
     */
    solar_system_id: number;
    /**
     * station_id integer
     */
    station_id?: number;
    /**
     * structure_id integer
     */
    structure_id?: number;
  };
};

export type GetCharactersCharacterIdLocationResponse =
  GetCharactersCharacterIdLocationResponses[keyof GetCharactersCharacterIdLocationResponses];

export type GetCharactersCharacterIdLoyaltyPointsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/loyalty/points/';
};

export type GetCharactersCharacterIdLoyaltyPointsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdLoyaltyPointsError =
  GetCharactersCharacterIdLoyaltyPointsErrors[keyof GetCharactersCharacterIdLoyaltyPointsErrors];

export type GetCharactersCharacterIdLoyaltyPointsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * corporation_id integer
     */
    corporation_id: number;
    /**
     * loyalty_points integer
     */
    loyalty_points: number;
  }>;
};

export type GetCharactersCharacterIdLoyaltyPointsResponse =
  GetCharactersCharacterIdLoyaltyPointsResponses[keyof GetCharactersCharacterIdLoyaltyPointsResponses];

export type GetCharactersCharacterIdMailData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Fetch only mails that match one or more of the given labels
     */
    labels?: Array<number>;
    /**
     * List only mail with an ID lower than the given ID, if present
     */
    last_mail_id?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/mail/';
};

export type GetCharactersCharacterIdMailErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdMailError =
  GetCharactersCharacterIdMailErrors[keyof GetCharactersCharacterIdMailErrors];

export type GetCharactersCharacterIdMailResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * From whom the mail was sent
     */
    from?: number;
    /**
     * is_read boolean
     */
    is_read?: boolean;
    /**
     * labels array
     */
    labels?: Array<number>;
    /**
     * mail_id integer
     */
    mail_id?: number;
    /**
     * Recipients of the mail
     */
    recipients?: Array<{
      /**
       * recipient_id integer
       */
      recipient_id: number;
      /**
       * recipient_type string
       */
      recipient_type: 'alliance' | 'character' | 'corporation' | 'mailing_list';
    }>;
    /**
     * Mail subject
     */
    subject?: string;
    /**
     * When the mail was sent
     */
    timestamp?: string;
  }>;
};

export type GetCharactersCharacterIdMailResponse =
  GetCharactersCharacterIdMailResponses[keyof GetCharactersCharacterIdMailResponses];

export type PostCharactersCharacterIdMailData = {
  /**
   * mail object
   */
  body: {
    /**
     * approved_cost integer
     */
    approved_cost?: number;
    /**
     * body string
     */
    body: string;
    /**
     * recipients array
     */
    recipients: Array<{
      /**
       * recipient_id integer
       */
      recipient_id: number;
      /**
       * recipient_type string
       */
      recipient_type: 'alliance' | 'character' | 'corporation' | 'mailing_list';
    }>;
    /**
     * subject string
     */
    subject: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/mail/';
};

export type PostCharactersCharacterIdMailErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
  /**
   * Error 520
   */
  520: {
    /**
     * Error 520 message
     */
    error?: string;
  };
};

export type PostCharactersCharacterIdMailError =
  PostCharactersCharacterIdMailErrors[keyof PostCharactersCharacterIdMailErrors];

export type PostCharactersCharacterIdMailResponses = {
  /**
   * Mail ID
   */
  201: number;
};

export type PostCharactersCharacterIdMailResponse =
  PostCharactersCharacterIdMailResponses[keyof PostCharactersCharacterIdMailResponses];

export type GetCharactersCharacterIdMailLabelsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/mail/labels/';
};

export type GetCharactersCharacterIdMailLabelsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdMailLabelsError =
  GetCharactersCharacterIdMailLabelsErrors[keyof GetCharactersCharacterIdMailLabelsErrors];

export type GetCharactersCharacterIdMailLabelsResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * labels array
     */
    labels?: Array<{
      /**
       * color string
       */
      color?:
        | '#0000fe'
        | '#006634'
        | '#0099ff'
        | '#00ff33'
        | '#01ffff'
        | '#349800'
        | '#660066'
        | '#666666'
        | '#999999'
        | '#99ffff'
        | '#9a0000'
        | '#ccff9a'
        | '#e6e6e6'
        | '#fe0000'
        | '#ff6600'
        | '#ffff01'
        | '#ffffcd'
        | '#ffffff';
      /**
       * label_id integer
       */
      label_id?: number;
      /**
       * name string
       */
      name?: string;
      /**
       * unread_count integer
       */
      unread_count?: number;
    }>;
    /**
     * total_unread_count integer
     */
    total_unread_count?: number;
  };
};

export type GetCharactersCharacterIdMailLabelsResponse =
  GetCharactersCharacterIdMailLabelsResponses[keyof GetCharactersCharacterIdMailLabelsResponses];

export type PostCharactersCharacterIdMailLabelsData = {
  /**
   * label object
   */
  body: {
    /**
     * Hexadecimal string representing label color, in RGB format
     */
    color?:
      | '#0000fe'
      | '#006634'
      | '#0099ff'
      | '#00ff33'
      | '#01ffff'
      | '#349800'
      | '#660066'
      | '#666666'
      | '#999999'
      | '#99ffff'
      | '#9a0000'
      | '#ccff9a'
      | '#e6e6e6'
      | '#fe0000'
      | '#ff6600'
      | '#ffff01'
      | '#ffffcd'
      | '#ffffff';
    /**
     * name string
     */
    name: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/mail/labels/';
};

export type PostCharactersCharacterIdMailLabelsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PostCharactersCharacterIdMailLabelsError =
  PostCharactersCharacterIdMailLabelsErrors[keyof PostCharactersCharacterIdMailLabelsErrors];

export type PostCharactersCharacterIdMailLabelsResponses = {
  /**
   * Label ID
   */
  201: number;
};

export type PostCharactersCharacterIdMailLabelsResponse =
  PostCharactersCharacterIdMailLabelsResponses[keyof PostCharactersCharacterIdMailLabelsResponses];

export type DeleteCharactersCharacterIdMailLabelsLabelIdData = {
  body?: never;
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
    /**
     * An EVE label id
     */
    label_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/mail/labels/{label_id}/';
};

export type DeleteCharactersCharacterIdMailLabelsLabelIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Unprocessable entity
   */
  422: {
    /**
     * Unprocessable entity message
     */
    error?: string;
  };
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type DeleteCharactersCharacterIdMailLabelsLabelIdError =
  DeleteCharactersCharacterIdMailLabelsLabelIdErrors[keyof DeleteCharactersCharacterIdMailLabelsLabelIdErrors];

export type DeleteCharactersCharacterIdMailLabelsLabelIdResponses = {
  /**
   * Label deleted
   */
  204: unknown;
};

export type GetCharactersCharacterIdMailListsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/mail/lists/';
};

export type GetCharactersCharacterIdMailListsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdMailListsError =
  GetCharactersCharacterIdMailListsErrors[keyof GetCharactersCharacterIdMailListsErrors];

export type GetCharactersCharacterIdMailListsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * Mailing list ID
     */
    mailing_list_id: number;
    /**
     * name string
     */
    name: string;
  }>;
};

export type GetCharactersCharacterIdMailListsResponse =
  GetCharactersCharacterIdMailListsResponses[keyof GetCharactersCharacterIdMailListsResponses];

export type DeleteCharactersCharacterIdMailMailIdData = {
  body?: never;
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
    /**
     * An EVE mail ID
     */
    mail_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/mail/{mail_id}/';
};

export type DeleteCharactersCharacterIdMailMailIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type DeleteCharactersCharacterIdMailMailIdError =
  DeleteCharactersCharacterIdMailMailIdErrors[keyof DeleteCharactersCharacterIdMailMailIdErrors];

export type DeleteCharactersCharacterIdMailMailIdResponses = {
  /**
   * Mail deleted
   */
  204: unknown;
};

export type GetCharactersCharacterIdMailMailIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
    /**
     * An EVE mail ID
     */
    mail_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/mail/{mail_id}/';
};

export type GetCharactersCharacterIdMailMailIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdMailMailIdError =
  GetCharactersCharacterIdMailMailIdErrors[keyof GetCharactersCharacterIdMailMailIdErrors];

export type GetCharactersCharacterIdMailMailIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * Mail's body
     */
    body?: string;
    /**
     * From whom the mail was sent
     */
    from?: number;
    /**
     * Labels attached to the mail
     */
    labels?: Array<number>;
    /**
     * Whether the mail is flagged as read
     */
    read?: boolean;
    /**
     * Recipients of the mail
     */
    recipients?: Array<{
      /**
       * recipient_id integer
       */
      recipient_id: number;
      /**
       * recipient_type string
       */
      recipient_type: 'alliance' | 'character' | 'corporation' | 'mailing_list';
    }>;
    /**
     * Mail subject
     */
    subject?: string;
    /**
     * When the mail was sent
     */
    timestamp?: string;
  };
};

export type GetCharactersCharacterIdMailMailIdResponse =
  GetCharactersCharacterIdMailMailIdResponses[keyof GetCharactersCharacterIdMailMailIdResponses];

export type PutCharactersCharacterIdMailMailIdData = {
  /**
   * contents object
   */
  body: {
    /**
     * Labels to assign to the mail. Pre-existing labels are unassigned.
     */
    labels?: Array<number>;
    /**
     * Whether the mail is flagged as read
     */
    read?: boolean;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
    /**
     * An EVE mail ID
     */
    mail_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/mail/{mail_id}/';
};

export type PutCharactersCharacterIdMailMailIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PutCharactersCharacterIdMailMailIdError =
  PutCharactersCharacterIdMailMailIdErrors[keyof PutCharactersCharacterIdMailMailIdErrors];

export type PutCharactersCharacterIdMailMailIdResponses = {
  /**
   * Mail updated
   */
  204: unknown;
};

export type GetCharactersCharacterIdMedalsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/medals/';
};

export type GetCharactersCharacterIdMedalsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdMedalsError =
  GetCharactersCharacterIdMedalsErrors[keyof GetCharactersCharacterIdMedalsErrors];

export type GetCharactersCharacterIdMedalsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * corporation_id integer
     */
    corporation_id: number;
    /**
     * date string
     */
    date: string;
    /**
     * description string
     */
    description: string;
    /**
     * graphics array
     */
    graphics: Array<{
      /**
       * color integer
       */
      color?: number;
      /**
       * graphic string
       */
      graphic: string;
      /**
       * layer integer
       */
      layer: number;
      /**
       * part integer
       */
      part: number;
    }>;
    /**
     * issuer_id integer
     */
    issuer_id: number;
    /**
     * medal_id integer
     */
    medal_id: number;
    /**
     * reason string
     */
    reason: string;
    /**
     * status string
     */
    status: 'public' | 'private';
    /**
     * title string
     */
    title: string;
  }>;
};

export type GetCharactersCharacterIdMedalsResponse =
  GetCharactersCharacterIdMedalsResponses[keyof GetCharactersCharacterIdMedalsResponses];

export type GetCharactersCharacterIdMiningData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/mining/';
};

export type GetCharactersCharacterIdMiningErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdMiningError =
  GetCharactersCharacterIdMiningErrors[keyof GetCharactersCharacterIdMiningErrors];

export type GetCharactersCharacterIdMiningResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * date string
     */
    date: string;
    /**
     * quantity integer
     */
    quantity: number;
    /**
     * solar_system_id integer
     */
    solar_system_id: number;
    /**
     * type_id integer
     */
    type_id: number;
  }>;
};

export type GetCharactersCharacterIdMiningResponse =
  GetCharactersCharacterIdMiningResponses[keyof GetCharactersCharacterIdMiningResponses];

export type GetCharactersCharacterIdNotificationsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/notifications/';
};

export type GetCharactersCharacterIdNotificationsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdNotificationsError =
  GetCharactersCharacterIdNotificationsErrors[keyof GetCharactersCharacterIdNotificationsErrors];

export type GetCharactersCharacterIdNotificationsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * is_read boolean
     */
    is_read?: boolean;
    /**
     * notification_id integer
     */
    notification_id: number;
    /**
     * sender_id integer
     */
    sender_id: number;
    /**
     * sender_type string
     */
    sender_type: 'character' | 'corporation' | 'alliance' | 'faction' | 'other';
    /**
     * text string
     */
    text?: string;
    /**
     * timestamp string
     */
    timestamp: string;
    /**
     * type string
     */
    type:
      | 'AcceptedAlly'
      | 'AcceptedSurrender'
      | 'AgentRetiredTrigravian'
      | 'AllAnchoringMsg'
      | 'AllMaintenanceBillMsg'
      | 'AllStrucInvulnerableMsg'
      | 'AllStructVulnerableMsg'
      | 'AllWarCorpJoinedAllianceMsg'
      | 'AllWarDeclaredMsg'
      | 'AllWarInvalidatedMsg'
      | 'AllWarRetractedMsg'
      | 'AllWarSurrenderMsg'
      | 'AllianceCapitalChanged'
      | 'AllianceWarDeclaredV2'
      | 'AllyContractCancelled'
      | 'AllyJoinedWarAggressorMsg'
      | 'AllyJoinedWarAllyMsg'
      | 'AllyJoinedWarDefenderMsg'
      | 'BattlePunishFriendlyFire'
      | 'BillOutOfMoneyMsg'
      | 'BillPaidCorpAllMsg'
      | 'BountyClaimMsg'
      | 'BountyESSShared'
      | 'BountyESSTaken'
      | 'BountyPlacedAlliance'
      | 'BountyPlacedChar'
      | 'BountyPlacedCorp'
      | 'BountyYourBountyClaimed'
      | 'BuddyConnectContactAdd'
      | 'CharAppAcceptMsg'
      | 'CharAppRejectMsg'
      | 'CharAppWithdrawMsg'
      | 'CharLeftCorpMsg'
      | 'CharMedalMsg'
      | 'CharTerminationMsg'
      | 'CloneActivationMsg'
      | 'CloneActivationMsg2'
      | 'CloneMovedMsg'
      | 'CloneRevokedMsg1'
      | 'CloneRevokedMsg2'
      | 'CombatOperationFinished'
      | 'ContactAdd'
      | 'ContactEdit'
      | 'ContainerPasswordMsg'
      | 'ContractRegionChangedToPochven'
      | 'CorpAllBillMsg'
      | 'CorpAppAcceptMsg'
      | 'CorpAppInvitedMsg'
      | 'CorpAppNewMsg'
      | 'CorpAppRejectCustomMsg'
      | 'CorpAppRejectMsg'
      | 'CorpBecameWarEligible'
      | 'CorpDividendMsg'
      | 'CorpFriendlyFireDisableTimerCompleted'
      | 'CorpFriendlyFireDisableTimerStarted'
      | 'CorpFriendlyFireEnableTimerCompleted'
      | 'CorpFriendlyFireEnableTimerStarted'
      | 'CorpKicked'
      | 'CorpLiquidationMsg'
      | 'CorpNewCEOMsg'
      | 'CorpNewsMsg'
      | 'CorpNoLongerWarEligible'
      | 'CorpOfficeExpirationMsg'
      | 'CorpStructLostMsg'
      | 'CorpTaxChangeMsg'
      | 'CorpVoteCEORevokedMsg'
      | 'CorpVoteMsg'
      | 'CorpWarDeclaredMsg'
      | 'CorpWarDeclaredV2'
      | 'CorpWarFightingLegalMsg'
      | 'CorpWarInvalidatedMsg'
      | 'CorpWarRetractedMsg'
      | 'CorpWarSurrenderMsg'
      | 'CorporationGoalClosed'
      | 'CorporationGoalCompleted'
      | 'CorporationGoalCreated'
      | 'CorporationGoalExpired'
      | 'CorporationGoalLimitReached'
      | 'CorporationGoalNameChange'
      | 'CorporationLeft'
      | 'CustomsMsg'
      | 'DailyItemRewardAutoClaimed'
      | 'DeclareWar'
      | 'DistrictAttacked'
      | 'DustAppAcceptedMsg'
      | 'ESSMainBankLink'
      | 'EntosisCaptureStarted'
      | 'ExpertSystemExpired'
      | 'ExpertSystemExpiryImminent'
      | 'FWAllianceKickMsg'
      | 'FWAllianceWarningMsg'
      | 'FWCharKickMsg'
      | 'FWCharRankGainMsg'
      | 'FWCharRankLossMsg'
      | 'FWCharWarningMsg'
      | 'FWCorpJoinMsg'
      | 'FWCorpKickMsg'
      | 'FWCorpLeaveMsg'
      | 'FWCorpWarningMsg'
      | 'FacWarCorpJoinRequestMsg'
      | 'FacWarCorpJoinWithdrawMsg'
      | 'FacWarCorpLeaveRequestMsg'
      | 'FacWarCorpLeaveWithdrawMsg'
      | 'FacWarLPDisqualifiedEvent'
      | 'FacWarLPDisqualifiedKill'
      | 'FacWarLPPayoutEvent'
      | 'FacWarLPPayoutKill'
      | 'GameTimeAdded'
      | 'GameTimeReceived'
      | 'GameTimeSent'
      | 'GiftReceived'
      | 'IHubDestroyedByBillFailure'
      | 'IncursionCompletedMsg'
      | 'IndustryOperationFinished'
      | 'IndustryTeamAuctionLost'
      | 'IndustryTeamAuctionWon'
      | 'InfrastructureHubBillAboutToExpire'
      | 'InsuranceExpirationMsg'
      | 'InsuranceFirstShipMsg'
      | 'InsuranceInvalidatedMsg'
      | 'InsuranceIssuedMsg'
      | 'InsurancePayoutMsg'
      | 'InvasionCompletedMsg'
      | 'InvasionSystemLogin'
      | 'InvasionSystemStart'
      | 'JumpCloneDeletedMsg1'
      | 'JumpCloneDeletedMsg2'
      | 'KillReportFinalBlow'
      | 'KillReportVictim'
      | 'KillRightAvailable'
      | 'KillRightAvailableOpen'
      | 'KillRightEarned'
      | 'KillRightUnavailable'
      | 'KillRightUnavailableOpen'
      | 'KillRightUsed'
      | 'LPAutoRedeemed'
      | 'LocateCharMsg'
      | 'MadeWarMutual'
      | 'MercOfferRetractedMsg'
      | 'MercOfferedNegotiationMsg'
      | 'MercenaryDenAttacked'
      | 'MercenaryDenNewMTO'
      | 'MercenaryDenReinforced'
      | 'MissionCanceledTriglavian'
      | 'MissionOfferExpirationMsg'
      | 'MissionTimeoutMsg'
      | 'MoonminingAutomaticFracture'
      | 'MoonminingExtractionCancelled'
      | 'MoonminingExtractionFinished'
      | 'MoonminingExtractionStarted'
      | 'MoonminingLaserFired'
      | 'MutualWarExpired'
      | 'MutualWarInviteAccepted'
      | 'MutualWarInviteRejected'
      | 'MutualWarInviteSent'
      | 'NPCStandingsGained'
      | 'NPCStandingsLost'
      | 'OfferToAllyRetracted'
      | 'OfferedSurrender'
      | 'OfferedToAlly'
      | 'OfficeLeaseCanceledInsufficientStandings'
      | 'OldLscMessages'
      | 'OperationFinished'
      | 'OrbitalAttacked'
      | 'OrbitalReinforced'
      | 'OwnershipTransferred'
      | 'RaffleCreated'
      | 'RaffleExpired'
      | 'RaffleFinished'
      | 'ReimbursementMsg'
      | 'ResearchMissionAvailableMsg'
      | 'RetractsWar'
      | 'SPAutoRedeemed'
      | 'SeasonalChallengeCompleted'
      | 'SkinSequencingCompleted'
      | 'SkyhookDeployed'
      | 'SkyhookDestroyed'
      | 'SkyhookLostShields'
      | 'SkyhookOnline'
      | 'SkyhookUnderAttack'
      | 'SovAllClaimAquiredMsg'
      | 'SovAllClaimLostMsg'
      | 'SovCommandNodeEventStarted'
      | 'SovCorpBillLateMsg'
      | 'SovCorpClaimFailMsg'
      | 'SovDisruptorMsg'
      | 'SovStationEnteredFreeport'
      | 'SovStructureDestroyed'
      | 'SovStructureReinforced'
      | 'SovStructureSelfDestructCancel'
      | 'SovStructureSelfDestructFinished'
      | 'SovStructureSelfDestructRequested'
      | 'SovereigntyIHDamageMsg'
      | 'SovereigntySBUDamageMsg'
      | 'SovereigntyTCUDamageMsg'
      | 'StationAggressionMsg1'
      | 'StationAggressionMsg2'
      | 'StationConquerMsg'
      | 'StationServiceDisabled'
      | 'StationServiceEnabled'
      | 'StationStateChangeMsg'
      | 'StoryLineMissionAvailableMsg'
      | 'StructureAnchoring'
      | 'StructureCourierContractChanged'
      | 'StructureDestroyed'
      | 'StructureFuelAlert'
      | 'StructureImpendingAbandonmentAssetsAtRisk'
      | 'StructureItemsDelivered'
      | 'StructureItemsMovedToSafety'
      | 'StructureLostArmor'
      | 'StructureLostShields'
      | 'StructureLowReagentsAlert'
      | 'StructureNoReagentsAlert'
      | 'StructureOnline'
      | 'StructurePaintPurchased'
      | 'StructureServicesOffline'
      | 'StructureUnanchoring'
      | 'StructureUnderAttack'
      | 'StructureWentHighPower'
      | 'StructureWentLowPower'
      | 'StructuresJobsCancelled'
      | 'StructuresJobsPaused'
      | 'StructuresReinforcementChanged'
      | 'TowerAlertMsg'
      | 'TowerResourceAlertMsg'
      | 'TransactionReversalMsg'
      | 'TutorialMsg'
      | 'WarAdopted '
      | 'WarAllyInherited'
      | 'WarAllyOfferDeclinedMsg'
      | 'WarConcordInvalidates'
      | 'WarDeclared'
      | 'WarEndedHqSecurityDrop'
      | 'WarHQRemovedFromSpace'
      | 'WarInherited'
      | 'WarInvalid'
      | 'WarRetracted'
      | 'WarRetractedByConcord'
      | 'WarSurrenderDeclinedMsg'
      | 'WarSurrenderOfferMsg';
  }>;
};

export type GetCharactersCharacterIdNotificationsResponse =
  GetCharactersCharacterIdNotificationsResponses[keyof GetCharactersCharacterIdNotificationsResponses];

export type GetCharactersCharacterIdNotificationsContactsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/notifications/contacts/';
};

export type GetCharactersCharacterIdNotificationsContactsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdNotificationsContactsError =
  GetCharactersCharacterIdNotificationsContactsErrors[keyof GetCharactersCharacterIdNotificationsContactsErrors];

export type GetCharactersCharacterIdNotificationsContactsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * message string
     */
    message: string;
    /**
     * notification_id integer
     */
    notification_id: number;
    /**
     * send_date string
     */
    send_date: string;
    /**
     * sender_character_id integer
     */
    sender_character_id: number;
    /**
     * A number representing the standing level the receiver has been added at by the sender. The standing levels are as follows: -10 -> Terrible | -5 -> Bad |  0 -> Neutral |  5 -> Good |  10 -> Excellent
     */
    standing_level: number;
  }>;
};

export type GetCharactersCharacterIdNotificationsContactsResponse =
  GetCharactersCharacterIdNotificationsContactsResponses[keyof GetCharactersCharacterIdNotificationsContactsResponses];

export type GetCharactersCharacterIdOnlineData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/online/';
};

export type GetCharactersCharacterIdOnlineErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdOnlineError =
  GetCharactersCharacterIdOnlineErrors[keyof GetCharactersCharacterIdOnlineErrors];

export type GetCharactersCharacterIdOnlineResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * Timestamp of the last login
     */
    last_login?: string;
    /**
     * Timestamp of the last logout
     */
    last_logout?: string;
    /**
     * Total number of times the character has logged in
     */
    logins?: number;
    /**
     * If the character is online
     */
    online: boolean;
  };
};

export type GetCharactersCharacterIdOnlineResponse =
  GetCharactersCharacterIdOnlineResponses[keyof GetCharactersCharacterIdOnlineResponses];

export type GetCharactersCharacterIdOrdersData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/orders/';
};

export type GetCharactersCharacterIdOrdersErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdOrdersError =
  GetCharactersCharacterIdOrdersErrors[keyof GetCharactersCharacterIdOrdersErrors];

export type GetCharactersCharacterIdOrdersResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * Number of days for which order is valid (starting from the issued date). An order expires at time issued + duration
     */
    duration: number;
    /**
     * For buy orders, the amount of ISK in escrow
     */
    escrow?: number;
    /**
     * True if the order is a bid (buy) order
     */
    is_buy_order?: boolean;
    /**
     * Signifies whether the buy/sell order was placed on behalf of a corporation.
     */
    is_corporation: boolean;
    /**
     * Date and time when this order was issued
     */
    issued: string;
    /**
     * ID of the location where order was placed
     */
    location_id: number;
    /**
     * For buy orders, the minimum quantity that will be accepted in a matching sell order
     */
    min_volume?: number;
    /**
     * Unique order ID
     */
    order_id: number;
    /**
     * Cost per unit for this order
     */
    price: number;
    /**
     * Valid order range, numbers are ranges in jumps
     */
    range:
      | '1'
      | '10'
      | '2'
      | '20'
      | '3'
      | '30'
      | '4'
      | '40'
      | '5'
      | 'region'
      | 'solarsystem'
      | 'station';
    /**
     * ID of the region where order was placed
     */
    region_id: number;
    /**
     * The type ID of the item transacted in this order
     */
    type_id: number;
    /**
     * Quantity of items still required or offered
     */
    volume_remain: number;
    /**
     * Quantity of items required or offered at time order was placed
     */
    volume_total: number;
  }>;
};

export type GetCharactersCharacterIdOrdersResponse =
  GetCharactersCharacterIdOrdersResponses[keyof GetCharactersCharacterIdOrdersResponses];

export type GetCharactersCharacterIdOrdersHistoryData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/orders/history/';
};

export type GetCharactersCharacterIdOrdersHistoryErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdOrdersHistoryError =
  GetCharactersCharacterIdOrdersHistoryErrors[keyof GetCharactersCharacterIdOrdersHistoryErrors];

export type GetCharactersCharacterIdOrdersHistoryResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * Number of days the order was valid for (starting from the issued date). An order expires at time issued + duration
     */
    duration: number;
    /**
     * For buy orders, the amount of ISK in escrow
     */
    escrow?: number;
    /**
     * True if the order is a bid (buy) order
     */
    is_buy_order?: boolean;
    /**
     * Signifies whether the buy/sell order was placed on behalf of a corporation.
     */
    is_corporation: boolean;
    /**
     * Date and time when this order was issued
     */
    issued: string;
    /**
     * ID of the location where order was placed
     */
    location_id: number;
    /**
     * For buy orders, the minimum quantity that will be accepted in a matching sell order
     */
    min_volume?: number;
    /**
     * Unique order ID
     */
    order_id: number;
    /**
     * Cost per unit for this order
     */
    price: number;
    /**
     * Valid order range, numbers are ranges in jumps
     */
    range:
      | '1'
      | '10'
      | '2'
      | '20'
      | '3'
      | '30'
      | '4'
      | '40'
      | '5'
      | 'region'
      | 'solarsystem'
      | 'station';
    /**
     * ID of the region where order was placed
     */
    region_id: number;
    /**
     * Current order state
     */
    state: 'cancelled' | 'expired';
    /**
     * The type ID of the item transacted in this order
     */
    type_id: number;
    /**
     * Quantity of items still required or offered
     */
    volume_remain: number;
    /**
     * Quantity of items required or offered at time order was placed
     */
    volume_total: number;
  }>;
};

export type GetCharactersCharacterIdOrdersHistoryResponse =
  GetCharactersCharacterIdOrdersHistoryResponses[keyof GetCharactersCharacterIdOrdersHistoryResponses];

export type GetCharactersCharacterIdPlanetsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/planets/';
};

export type GetCharactersCharacterIdPlanetsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdPlanetsError =
  GetCharactersCharacterIdPlanetsErrors[keyof GetCharactersCharacterIdPlanetsErrors];

export type GetCharactersCharacterIdPlanetsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * last_update string
     */
    last_update: string;
    /**
     * num_pins integer
     */
    num_pins: number;
    /**
     * owner_id integer
     */
    owner_id: number;
    /**
     * planet_id integer
     */
    planet_id: number;
    /**
     * planet_type string
     */
    planet_type:
      | 'temperate'
      | 'barren'
      | 'oceanic'
      | 'ice'
      | 'gas'
      | 'lava'
      | 'storm'
      | 'plasma';
    /**
     * solar_system_id integer
     */
    solar_system_id: number;
    /**
     * upgrade_level integer
     */
    upgrade_level: number;
  }>;
};

export type GetCharactersCharacterIdPlanetsResponse =
  GetCharactersCharacterIdPlanetsResponses[keyof GetCharactersCharacterIdPlanetsResponses];

export type GetCharactersCharacterIdPlanetsPlanetIdData = {
  body?: never;
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
    /**
     * Planet id of the target planet
     */
    planet_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/planets/{planet_id}/';
};

export type GetCharactersCharacterIdPlanetsPlanetIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Colony not found
   */
  404: {
    /**
     * error message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdPlanetsPlanetIdError =
  GetCharactersCharacterIdPlanetsPlanetIdErrors[keyof GetCharactersCharacterIdPlanetsPlanetIdErrors];

export type GetCharactersCharacterIdPlanetsPlanetIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * links array
     */
    links: Array<{
      /**
       * destination_pin_id integer
       */
      destination_pin_id: number;
      /**
       * link_level integer
       */
      link_level: number;
      /**
       * source_pin_id integer
       */
      source_pin_id: number;
    }>;
    /**
     * pins array
     */
    pins: Array<{
      /**
       * contents array
       */
      contents?: Array<{
        /**
         * amount integer
         */
        amount: number;
        /**
         * type_id integer
         */
        type_id: number;
      }>;
      /**
       * expiry_time string
       */
      expiry_time?: string;
      /**
       * extractor_details object
       */
      extractor_details?: {
        /**
         * in seconds
         */
        cycle_time?: number;
        /**
         * head_radius number
         */
        head_radius?: number;
        /**
         * heads array
         */
        heads: Array<{
          /**
           * head_id integer
           */
          head_id: number;
          /**
           * latitude number
           */
          latitude: number;
          /**
           * longitude number
           */
          longitude: number;
        }>;
        /**
         * product_type_id integer
         */
        product_type_id?: number;
        /**
         * qty_per_cycle integer
         */
        qty_per_cycle?: number;
      };
      /**
       * factory_details object
       */
      factory_details?: {
        /**
         * schematic_id integer
         */
        schematic_id: number;
      };
      /**
       * install_time string
       */
      install_time?: string;
      /**
       * last_cycle_start string
       */
      last_cycle_start?: string;
      /**
       * latitude number
       */
      latitude: number;
      /**
       * longitude number
       */
      longitude: number;
      /**
       * pin_id integer
       */
      pin_id: number;
      /**
       * schematic_id integer
       */
      schematic_id?: number;
      /**
       * type_id integer
       */
      type_id: number;
    }>;
    /**
     * routes array
     */
    routes: Array<{
      /**
       * content_type_id integer
       */
      content_type_id: number;
      /**
       * destination_pin_id integer
       */
      destination_pin_id: number;
      /**
       * quantity number
       */
      quantity: number;
      /**
       * route_id integer
       */
      route_id: number;
      /**
       * source_pin_id integer
       */
      source_pin_id: number;
      /**
       * list of pin ID waypoints
       */
      waypoints?: Array<number>;
    }>;
  };
};

export type GetCharactersCharacterIdPlanetsPlanetIdResponse =
  GetCharactersCharacterIdPlanetsPlanetIdResponses[keyof GetCharactersCharacterIdPlanetsPlanetIdResponses];

export type GetCharactersCharacterIdPortraitData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/characters/{character_id}/portrait/';
};

export type GetCharactersCharacterIdPortraitErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * No image server for this datasource
   */
  404: {
    /**
     * error message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdPortraitError =
  GetCharactersCharacterIdPortraitErrors[keyof GetCharactersCharacterIdPortraitErrors];

export type GetCharactersCharacterIdPortraitResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * px128x128 string
     */
    px128x128?: string;
    /**
     * px256x256 string
     */
    px256x256?: string;
    /**
     * px512x512 string
     */
    px512x512?: string;
    /**
     * px64x64 string
     */
    px64x64?: string;
  };
};

export type GetCharactersCharacterIdPortraitResponse =
  GetCharactersCharacterIdPortraitResponses[keyof GetCharactersCharacterIdPortraitResponses];

export type GetCharactersCharacterIdRolesData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/roles/';
};

export type GetCharactersCharacterIdRolesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdRolesError =
  GetCharactersCharacterIdRolesErrors[keyof GetCharactersCharacterIdRolesErrors];

export type GetCharactersCharacterIdRolesResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * roles array
     */
    roles?: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
    /**
     * roles_at_base array
     */
    roles_at_base?: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
    /**
     * roles_at_hq array
     */
    roles_at_hq?: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
    /**
     * roles_at_other array
     */
    roles_at_other?: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
  };
};

export type GetCharactersCharacterIdRolesResponse =
  GetCharactersCharacterIdRolesResponses[keyof GetCharactersCharacterIdRolesResponses];

export type GetCharactersCharacterIdSearchData = {
  body?: never;
  headers?: {
    /**
     * Language to use in the response
     */
    'Accept-Language'?:
      | 'en'
      | 'en-us'
      | 'de'
      | 'fr'
      | 'ja'
      | 'ru'
      | 'zh'
      | 'ko'
      | 'es';
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query: {
    /**
     * Type of entities to search for
     */
    categories: Array<
      | 'agent'
      | 'alliance'
      | 'character'
      | 'constellation'
      | 'corporation'
      | 'faction'
      | 'inventory_type'
      | 'region'
      | 'solar_system'
      | 'station'
      | 'structure'
    >;
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Language to use in the response, takes precedence over Accept-Language
     */
    language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
    /**
     * The string to search on
     */
    search: string;
    /**
     * Whether the search should be a strict match
     */
    strict?: boolean;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/search/';
};

export type GetCharactersCharacterIdSearchErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdSearchError =
  GetCharactersCharacterIdSearchErrors[keyof GetCharactersCharacterIdSearchErrors];

export type GetCharactersCharacterIdSearchResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * agent array
     */
    agent?: Array<number>;
    /**
     * alliance array
     */
    alliance?: Array<number>;
    /**
     * character array
     */
    character?: Array<number>;
    /**
     * constellation array
     */
    constellation?: Array<number>;
    /**
     * corporation array
     */
    corporation?: Array<number>;
    /**
     * faction array
     */
    faction?: Array<number>;
    /**
     * inventory_type array
     */
    inventory_type?: Array<number>;
    /**
     * region array
     */
    region?: Array<number>;
    /**
     * solar_system array
     */
    solar_system?: Array<number>;
    /**
     * station array
     */
    station?: Array<number>;
    /**
     * structure array
     */
    structure?: Array<number>;
  };
};

export type GetCharactersCharacterIdSearchResponse =
  GetCharactersCharacterIdSearchResponses[keyof GetCharactersCharacterIdSearchResponses];

export type GetCharactersCharacterIdShipData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/ship/';
};

export type GetCharactersCharacterIdShipErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdShipError =
  GetCharactersCharacterIdShipErrors[keyof GetCharactersCharacterIdShipErrors];

export type GetCharactersCharacterIdShipResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * Item id's are unique to a ship and persist until it is repackaged. This value can be used to track repeated uses of a ship, or detect when a pilot changes into a different instance of the same ship type.
     */
    ship_item_id: number;
    /**
     * ship_name string
     */
    ship_name: string;
    /**
     * ship_type_id integer
     */
    ship_type_id: number;
  };
};

export type GetCharactersCharacterIdShipResponse =
  GetCharactersCharacterIdShipResponses[keyof GetCharactersCharacterIdShipResponses];

export type GetCharactersCharacterIdSkillqueueData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/skillqueue/';
};

export type GetCharactersCharacterIdSkillqueueErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdSkillqueueError =
  GetCharactersCharacterIdSkillqueueErrors[keyof GetCharactersCharacterIdSkillqueueErrors];

export type GetCharactersCharacterIdSkillqueueResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * Date on which training of the skill will complete. Omitted if the skill queue is paused.
     */
    finish_date?: string;
    /**
     * finished_level integer
     */
    finished_level: number;
    /**
     * level_end_sp integer
     */
    level_end_sp?: number;
    /**
     * Amount of SP that was in the skill when it started training it's current level. Used to calculate % of current level complete.
     */
    level_start_sp?: number;
    /**
     * queue_position integer
     */
    queue_position: number;
    /**
     * skill_id integer
     */
    skill_id: number;
    /**
     * start_date string
     */
    start_date?: string;
    /**
     * training_start_sp integer
     */
    training_start_sp?: number;
  }>;
};

export type GetCharactersCharacterIdSkillqueueResponse =
  GetCharactersCharacterIdSkillqueueResponses[keyof GetCharactersCharacterIdSkillqueueResponses];

export type GetCharactersCharacterIdSkillsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/skills/';
};

export type GetCharactersCharacterIdSkillsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdSkillsError =
  GetCharactersCharacterIdSkillsErrors[keyof GetCharactersCharacterIdSkillsErrors];

export type GetCharactersCharacterIdSkillsResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * skills array
     */
    skills: Array<{
      /**
       * active_skill_level integer
       */
      active_skill_level: number;
      /**
       * skill_id integer
       */
      skill_id: number;
      /**
       * skillpoints_in_skill integer
       */
      skillpoints_in_skill: number;
      /**
       * trained_skill_level integer
       */
      trained_skill_level: number;
    }>;
    /**
     * total_sp integer
     */
    total_sp: number;
    /**
     * Skill points available to be assigned
     */
    unallocated_sp?: number;
  };
};

export type GetCharactersCharacterIdSkillsResponse =
  GetCharactersCharacterIdSkillsResponses[keyof GetCharactersCharacterIdSkillsResponses];

export type GetCharactersCharacterIdStandingsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/standings/';
};

export type GetCharactersCharacterIdStandingsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdStandingsError =
  GetCharactersCharacterIdStandingsErrors[keyof GetCharactersCharacterIdStandingsErrors];

export type GetCharactersCharacterIdStandingsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * from_id integer
     */
    from_id: number;
    /**
     * from_type string
     */
    from_type: 'agent' | 'npc_corp' | 'faction';
    /**
     * standing number
     */
    standing: number;
  }>;
};

export type GetCharactersCharacterIdStandingsResponse =
  GetCharactersCharacterIdStandingsResponses[keyof GetCharactersCharacterIdStandingsResponses];

export type GetCharactersCharacterIdTitlesData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/titles/';
};

export type GetCharactersCharacterIdTitlesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdTitlesError =
  GetCharactersCharacterIdTitlesErrors[keyof GetCharactersCharacterIdTitlesErrors];

export type GetCharactersCharacterIdTitlesResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * name string
     */
    name?: string;
    /**
     * title_id integer
     */
    title_id?: number;
  }>;
};

export type GetCharactersCharacterIdTitlesResponse =
  GetCharactersCharacterIdTitlesResponses[keyof GetCharactersCharacterIdTitlesResponses];

export type GetCharactersCharacterIdWalletData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/wallet/';
};

export type GetCharactersCharacterIdWalletErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdWalletError =
  GetCharactersCharacterIdWalletErrors[keyof GetCharactersCharacterIdWalletErrors];

export type GetCharactersCharacterIdWalletResponses = {
  /**
   * Wallet balance
   */
  200: number;
};

export type GetCharactersCharacterIdWalletResponse =
  GetCharactersCharacterIdWalletResponses[keyof GetCharactersCharacterIdWalletResponses];

export type GetCharactersCharacterIdWalletJournalData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/wallet/journal/';
};

export type GetCharactersCharacterIdWalletJournalErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdWalletJournalError =
  GetCharactersCharacterIdWalletJournalErrors[keyof GetCharactersCharacterIdWalletJournalErrors];

export type GetCharactersCharacterIdWalletJournalResponses = {
  /**
   * Wallet journal entries
   */
  200: Array<{
    /**
     * The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet and negative when ISK is withdrawn
     */
    amount?: number;
    /**
     * Wallet balance after transaction occurred
     */
    balance?: number;
    /**
     * An ID that gives extra context to the particular transaction. Because of legacy reasons the context is completely different per ref_type and means different things. It is also possible to not have a context_id
     */
    context_id?: number;
    /**
     * The type of the given context_id if present
     */
    context_id_type?:
      | 'structure_id'
      | 'station_id'
      | 'market_transaction_id'
      | 'character_id'
      | 'corporation_id'
      | 'alliance_id'
      | 'eve_system'
      | 'industry_job_id'
      | 'contract_id'
      | 'planet_id'
      | 'system_id'
      | 'type_id';
    /**
     * Date and time of transaction
     */
    date: string;
    /**
     * The reason for the transaction, mirrors what is seen in the client
     */
    description: string;
    /**
     * The id of the first party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
     */
    first_party_id?: number;
    /**
     * Unique journal reference ID
     */
    id: number;
    /**
     * The user stated reason for the transaction. Only applies to some ref_types
     */
    reason?: string;
    /**
     * "The transaction type for the given. transaction. Different transaction types will populate different attributes."
     */
    ref_type:
      | 'acceleration_gate_fee'
      | 'advertisement_listing_fee'
      | 'agent_donation'
      | 'agent_location_services'
      | 'agent_miscellaneous'
      | 'agent_mission_collateral_paid'
      | 'agent_mission_collateral_refunded'
      | 'agent_mission_reward'
      | 'agent_mission_reward_corporation_tax'
      | 'agent_mission_time_bonus_reward'
      | 'agent_mission_time_bonus_reward_corporation_tax'
      | 'agent_security_services'
      | 'agent_services_rendered'
      | 'agents_preward'
      | 'alliance_maintainance_fee'
      | 'alliance_registration_fee'
      | 'allignment_based_gate_toll'
      | 'asset_safety_recovery_tax'
      | 'bounty'
      | 'bounty_prize'
      | 'bounty_prize_corporation_tax'
      | 'bounty_prizes'
      | 'bounty_reimbursement'
      | 'bounty_surcharge'
      | 'brokers_fee'
      | 'clone_activation'
      | 'clone_transfer'
      | 'contraband_fine'
      | 'contract_auction_bid'
      | 'contract_auction_bid_corp'
      | 'contract_auction_bid_refund'
      | 'contract_auction_sold'
      | 'contract_brokers_fee'
      | 'contract_brokers_fee_corp'
      | 'contract_collateral'
      | 'contract_collateral_deposited_corp'
      | 'contract_collateral_payout'
      | 'contract_collateral_refund'
      | 'contract_deposit'
      | 'contract_deposit_corp'
      | 'contract_deposit_refund'
      | 'contract_deposit_sales_tax'
      | 'contract_price'
      | 'contract_price_payment_corp'
      | 'contract_reversal'
      | 'contract_reward'
      | 'contract_reward_deposited'
      | 'contract_reward_deposited_corp'
      | 'contract_reward_refund'
      | 'contract_sales_tax'
      | 'copying'
      | 'corporate_reward_payout'
      | 'corporate_reward_tax'
      | 'corporation_account_withdrawal'
      | 'corporation_bulk_payment'
      | 'corporation_dividend_payment'
      | 'corporation_liquidation'
      | 'corporation_logo_change_cost'
      | 'corporation_payment'
      | 'corporation_registration_fee'
      | 'cosmetic_market_component_item_purchase'
      | 'cosmetic_market_skin_purchase'
      | 'cosmetic_market_skin_sale'
      | 'cosmetic_market_skin_sale_broker_fee'
      | 'cosmetic_market_skin_sale_tax'
      | 'cosmetic_market_skin_transaction'
      | 'courier_mission_escrow'
      | 'cspa'
      | 'cspaofflinerefund'
      | 'daily_challenge_reward'
      | 'daily_goal_payouts'
      | 'daily_goal_payouts_tax'
      | 'datacore_fee'
      | 'dna_modification_fee'
      | 'docking_fee'
      | 'duel_wager_escrow'
      | 'duel_wager_payment'
      | 'duel_wager_refund'
      | 'ess_escrow_transfer'
      | 'external_trade_delivery'
      | 'external_trade_freeze'
      | 'external_trade_thaw'
      | 'factory_slot_rental_fee'
      | 'flux_payout'
      | 'flux_tax'
      | 'flux_ticket_repayment'
      | 'flux_ticket_sale'
      | 'gm_cash_transfer'
      | 'industry_job_tax'
      | 'infrastructure_hub_maintenance'
      | 'inheritance'
      | 'insurance'
      | 'insurgency_corruption_contribution_reward'
      | 'insurgency_suppression_contribution_reward'
      | 'item_trader_payment'
      | 'jump_clone_activation_fee'
      | 'jump_clone_installation_fee'
      | 'kill_right_fee'
      | 'lp_store'
      | 'manufacturing'
      | 'market_escrow'
      | 'market_fine_paid'
      | 'market_provider_tax'
      | 'market_transaction'
      | 'medal_creation'
      | 'medal_issued'
      | 'milestone_reward_payment'
      | 'mission_completion'
      | 'mission_cost'
      | 'mission_expiration'
      | 'mission_reward'
      | 'office_rental_fee'
      | 'operation_bonus'
      | 'opportunity_reward'
      | 'planetary_construction'
      | 'planetary_export_tax'
      | 'planetary_import_tax'
      | 'player_donation'
      | 'player_trading'
      | 'project_discovery_reward'
      | 'project_discovery_tax'
      | 'project_payouts'
      | 'reaction'
      | 'redeemed_isk_token'
      | 'release_of_impounded_property'
      | 'repair_bill'
      | 'reprocessing_tax'
      | 'researching_material_productivity'
      | 'researching_technology'
      | 'researching_time_productivity'
      | 'resource_wars_reward'
      | 'reverse_engineering'
      | 'season_challenge_reward'
      | 'security_processing_fee'
      | 'shares'
      | 'skill_purchase'
      | 'sovereignity_bill'
      | 'store_purchase'
      | 'store_purchase_refund'
      | 'structure_gate_jump'
      | 'transaction_tax'
      | 'under_construction'
      | 'upkeep_adjustment_fee'
      | 'war_ally_contract'
      | 'war_fee'
      | 'war_fee_surrender';
    /**
     * The id of the second party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
     */
    second_party_id?: number;
    /**
     * Tax amount received. Only applies to tax related transactions
     */
    tax?: number;
    /**
     * The corporation ID receiving any tax paid. Only applies to tax related transactions
     */
    tax_receiver_id?: number;
  }>;
};

export type GetCharactersCharacterIdWalletJournalResponse =
  GetCharactersCharacterIdWalletJournalResponses[keyof GetCharactersCharacterIdWalletJournalResponses];

export type GetCharactersCharacterIdWalletTransactionsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE character ID
     */
    character_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Only show transactions happened before the one referenced by this id
     */
    from_id?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/characters/{character_id}/wallet/transactions/';
};

export type GetCharactersCharacterIdWalletTransactionsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCharactersCharacterIdWalletTransactionsError =
  GetCharactersCharacterIdWalletTransactionsErrors[keyof GetCharactersCharacterIdWalletTransactionsErrors];

export type GetCharactersCharacterIdWalletTransactionsResponses = {
  /**
   * Wallet transactions
   */
  200: Array<{
    /**
     * client_id integer
     */
    client_id: number;
    /**
     * Date and time of transaction
     */
    date: string;
    /**
     * is_buy boolean
     */
    is_buy: boolean;
    /**
     * is_personal boolean
     */
    is_personal: boolean;
    /**
     * journal_ref_id integer
     */
    journal_ref_id: number;
    /**
     * location_id integer
     */
    location_id: number;
    /**
     * quantity integer
     */
    quantity: number;
    /**
     * Unique transaction ID
     */
    transaction_id: number;
    /**
     * type_id integer
     */
    type_id: number;
    /**
     * Amount paid per unit
     */
    unit_price: number;
  }>;
};

export type GetCharactersCharacterIdWalletTransactionsResponse =
  GetCharactersCharacterIdWalletTransactionsResponses[keyof GetCharactersCharacterIdWalletTransactionsResponses];

export type GetContractsPublicBidsContractIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * ID of a contract
     */
    contract_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
  };
  url: '/contracts/public/bids/{contract_id}/';
};

export type GetContractsPublicBidsContractIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Forbidden
   */
  403: {
    /**
     * Forbidden message
     */
    error?: string;
  };
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetContractsPublicBidsContractIdError =
  GetContractsPublicBidsContractIdErrors[keyof GetContractsPublicBidsContractIdErrors];

export type GetContractsPublicBidsContractIdResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * The amount bid, in ISK
     */
    amount: number;
    /**
     * Unique ID for the bid
     */
    bid_id: number;
    /**
     * Datetime when the bid was placed
     */
    date_bid: string;
  }>;
  /**
   * Contract expired or recently accepted by player
   */
  204: unknown;
};

export type GetContractsPublicBidsContractIdResponse =
  GetContractsPublicBidsContractIdResponses[keyof GetContractsPublicBidsContractIdResponses];

export type GetContractsPublicItemsContractIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * ID of a contract
     */
    contract_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
  };
  url: '/contracts/public/items/{contract_id}/';
};

export type GetContractsPublicItemsContractIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Forbidden
   */
  403: {
    /**
     * Forbidden message
     */
    error?: string;
  };
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetContractsPublicItemsContractIdError =
  GetContractsPublicItemsContractIdErrors[keyof GetContractsPublicItemsContractIdErrors];

export type GetContractsPublicItemsContractIdResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * is_blueprint_copy boolean
     */
    is_blueprint_copy?: boolean;
    /**
     * true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract
     */
    is_included: boolean;
    /**
     * Unique ID for the item being sold. Not present if item is being requested by contract rather than sold with contract
     */
    item_id?: number;
    /**
     * Material Efficiency Level of the blueprint
     */
    material_efficiency?: number;
    /**
     * Number of items in the stack
     */
    quantity: number;
    /**
     * Unique ID for the item, used by the contract system
     */
    record_id: number;
    /**
     * Number of runs remaining if the blueprint is a copy, -1 if it is an original
     */
    runs?: number;
    /**
     * Time Efficiency Level of the blueprint
     */
    time_efficiency?: number;
    /**
     * Type ID for item
     */
    type_id: number;
  }>;
  /**
   * Contract expired or recently accepted by player
   */
  204: unknown;
};

export type GetContractsPublicItemsContractIdResponse =
  GetContractsPublicItemsContractIdResponses[keyof GetContractsPublicItemsContractIdResponses];

export type GetContractsPublicRegionIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE region id
     */
    region_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
  };
  url: '/contracts/public/{region_id}/';
};

export type GetContractsPublicRegionIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetContractsPublicRegionIdError =
  GetContractsPublicRegionIdErrors[keyof GetContractsPublicRegionIdErrors];

export type GetContractsPublicRegionIdResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * Buyout price (for Auctions only)
     */
    buyout?: number;
    /**
     * Collateral price (for Couriers only)
     */
    collateral?: number;
    /**
     * contract_id integer
     */
    contract_id: number;
    /**
     * Expiration date of the contract
     */
    date_expired: string;
    /**
     * Сreation date of the contract
     */
    date_issued: string;
    /**
     * Number of days to perform the contract
     */
    days_to_complete?: number;
    /**
     * End location ID (for Couriers contract)
     */
    end_location_id?: number;
    /**
     * true if the contract was issued on behalf of the issuer's corporation
     */
    for_corporation?: boolean;
    /**
     * Character's corporation ID for the issuer
     */
    issuer_corporation_id: number;
    /**
     * Character ID for the issuer
     */
    issuer_id: number;
    /**
     * Price of contract (for ItemsExchange and Auctions)
     */
    price?: number;
    /**
     * Remuneration for contract (for Couriers only)
     */
    reward?: number;
    /**
     * Start location ID (for Couriers contract)
     */
    start_location_id?: number;
    /**
     * Title of the contract
     */
    title?: string;
    /**
     * Type of the contract
     */
    type: 'unknown' | 'item_exchange' | 'auction' | 'courier' | 'loan';
    /**
     * Volume of items in the contract
     */
    volume?: number;
  }>;
};

export type GetContractsPublicRegionIdResponse =
  GetContractsPublicRegionIdResponses[keyof GetContractsPublicRegionIdResponses];

export type GetCorporationCorporationIdMiningExtractionsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporation/{corporation_id}/mining/extractions/';
};

export type GetCorporationCorporationIdMiningExtractionsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationCorporationIdMiningExtractionsError =
  GetCorporationCorporationIdMiningExtractionsErrors[keyof GetCorporationCorporationIdMiningExtractionsErrors];

export type GetCorporationCorporationIdMiningExtractionsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * The time at which the chunk being extracted will arrive and can be fractured by the moon mining drill.
     *
     */
    chunk_arrival_time: string;
    /**
     * The time at which the current extraction was initiated.
     *
     */
    extraction_start_time: string;
    /**
     * moon_id integer
     */
    moon_id: number;
    /**
     * The time at which the chunk being extracted will naturally fracture if it is not first fractured by the moon mining drill.
     *
     */
    natural_decay_time: string;
    /**
     * structure_id integer
     */
    structure_id: number;
  }>;
};

export type GetCorporationCorporationIdMiningExtractionsResponse =
  GetCorporationCorporationIdMiningExtractionsResponses[keyof GetCorporationCorporationIdMiningExtractionsResponses];

export type GetCorporationCorporationIdMiningObserversData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporation/{corporation_id}/mining/observers/';
};

export type GetCorporationCorporationIdMiningObserversErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationCorporationIdMiningObserversError =
  GetCorporationCorporationIdMiningObserversErrors[keyof GetCorporationCorporationIdMiningObserversErrors];

export type GetCorporationCorporationIdMiningObserversResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * last_updated string
     */
    last_updated: string;
    /**
     * The entity that was observing the asteroid field when it was mined.
     *
     */
    observer_id: number;
    /**
     * The category of the observing entity
     */
    observer_type: 'structure';
  }>;
};

export type GetCorporationCorporationIdMiningObserversResponse =
  GetCorporationCorporationIdMiningObserversResponses[keyof GetCorporationCorporationIdMiningObserversResponses];

export type GetCorporationCorporationIdMiningObserversObserverIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
    /**
     * A mining observer id
     */
    observer_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporation/{corporation_id}/mining/observers/{observer_id}/';
};

export type GetCorporationCorporationIdMiningObserversObserverIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationCorporationIdMiningObserversObserverIdError =
  GetCorporationCorporationIdMiningObserversObserverIdErrors[keyof GetCorporationCorporationIdMiningObserversObserverIdErrors];

export type GetCorporationCorporationIdMiningObserversObserverIdResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * The character that did the mining
     *
     */
    character_id: number;
    /**
     * last_updated string
     */
    last_updated: string;
    /**
     * quantity integer
     */
    quantity: number;
    /**
     * The corporation id of the character at the time data was recorded.
     *
     */
    recorded_corporation_id: number;
    /**
     * type_id integer
     */
    type_id: number;
  }>;
};

export type GetCorporationCorporationIdMiningObserversObserverIdResponse =
  GetCorporationCorporationIdMiningObserversObserverIdResponses[keyof GetCorporationCorporationIdMiningObserversObserverIdResponses];

export type GetCorporationsNpccorpsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/corporations/npccorps/';
};

export type GetCorporationsNpccorpsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsNpccorpsError =
  GetCorporationsNpccorpsErrors[keyof GetCorporationsNpccorpsErrors];

export type GetCorporationsNpccorpsResponses = {
  /**
   * 200 ok array
   */
  200: Array<number>;
};

export type GetCorporationsNpccorpsResponse =
  GetCorporationsNpccorpsResponses[keyof GetCorporationsNpccorpsResponses];

export type GetCorporationsCorporationIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/corporations/{corporation_id}/';
};

export type GetCorporationsCorporationIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdError =
  GetCorporationsCorporationIdErrors[keyof GetCorporationsCorporationIdErrors];

export type GetCorporationsCorporationIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * ID of the alliance that corporation is a member of, if any
     */
    alliance_id?: number;
    /**
     * ceo_id integer
     */
    ceo_id: number;
    /**
     * creator_id integer
     */
    creator_id: number;
    /**
     * date_founded string
     */
    date_founded?: string;
    /**
     * description string
     */
    description?: string;
    /**
     * faction_id integer
     */
    faction_id?: number;
    /**
     * home_station_id integer
     */
    home_station_id?: number;
    /**
     * member_count integer
     */
    member_count: number;
    /**
     * the full name of the corporation
     */
    name: string;
    /**
     * shares integer
     */
    shares?: number;
    /**
     * tax_rate number
     */
    tax_rate: number;
    /**
     * the short name of the corporation
     */
    ticker: string;
    /**
     * url string
     */
    url?: string;
    /**
     * war_eligible boolean
     */
    war_eligible?: boolean;
  };
};

export type GetCorporationsCorporationIdResponse =
  GetCorporationsCorporationIdResponses[keyof GetCorporationsCorporationIdResponses];

export type GetCorporationsCorporationIdAlliancehistoryData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/corporations/{corporation_id}/alliancehistory/';
};

export type GetCorporationsCorporationIdAlliancehistoryErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdAlliancehistoryError =
  GetCorporationsCorporationIdAlliancehistoryErrors[keyof GetCorporationsCorporationIdAlliancehistoryErrors];

export type GetCorporationsCorporationIdAlliancehistoryResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * alliance_id integer
     */
    alliance_id?: number;
    /**
     * True if the alliance has been closed
     */
    is_deleted?: boolean;
    /**
     * An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous
     */
    record_id: number;
    /**
     * start_date string
     */
    start_date: string;
  }>;
};

export type GetCorporationsCorporationIdAlliancehistoryResponse =
  GetCorporationsCorporationIdAlliancehistoryResponses[keyof GetCorporationsCorporationIdAlliancehistoryResponses];

export type GetCorporationsCorporationIdAssetsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/assets/';
};

export type GetCorporationsCorporationIdAssetsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdAssetsError =
  GetCorporationsCorporationIdAssetsErrors[keyof GetCorporationsCorporationIdAssetsErrors];

export type GetCorporationsCorporationIdAssetsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * is_blueprint_copy boolean
     */
    is_blueprint_copy?: boolean;
    /**
     * is_singleton boolean
     */
    is_singleton: boolean;
    /**
     * item_id integer
     */
    item_id: number;
    /**
     * location_flag string
     */
    location_flag:
      | 'AssetSafety'
      | 'AutoFit'
      | 'Bonus'
      | 'Booster'
      | 'BoosterBay'
      | 'Capsule'
      | 'Cargo'
      | 'CorpDeliveries'
      | 'CorpSAG1'
      | 'CorpSAG2'
      | 'CorpSAG3'
      | 'CorpSAG4'
      | 'CorpSAG5'
      | 'CorpSAG6'
      | 'CorpSAG7'
      | 'CorporationGoalDeliveries'
      | 'CrateLoot'
      | 'Deliveries'
      | 'DroneBay'
      | 'DustBattle'
      | 'DustDatabank'
      | 'FighterBay'
      | 'FighterTube0'
      | 'FighterTube1'
      | 'FighterTube2'
      | 'FighterTube3'
      | 'FighterTube4'
      | 'FleetHangar'
      | 'FrigateEscapeBay'
      | 'Hangar'
      | 'HangarAll'
      | 'HiSlot0'
      | 'HiSlot1'
      | 'HiSlot2'
      | 'HiSlot3'
      | 'HiSlot4'
      | 'HiSlot5'
      | 'HiSlot6'
      | 'HiSlot7'
      | 'HiddenModifiers'
      | 'Implant'
      | 'Impounded'
      | 'InfrastructureHangar'
      | 'JunkyardReprocessed'
      | 'JunkyardTrashed'
      | 'LoSlot0'
      | 'LoSlot1'
      | 'LoSlot2'
      | 'LoSlot3'
      | 'LoSlot4'
      | 'LoSlot5'
      | 'LoSlot6'
      | 'LoSlot7'
      | 'Locked'
      | 'MedSlot0'
      | 'MedSlot1'
      | 'MedSlot2'
      | 'MedSlot3'
      | 'MedSlot4'
      | 'MedSlot5'
      | 'MedSlot6'
      | 'MedSlot7'
      | 'MobileDepotHold'
      | 'MoonMaterialBay'
      | 'OfficeFolder'
      | 'Pilot'
      | 'PlanetSurface'
      | 'QuafeBay'
      | 'QuantumCoreRoom'
      | 'Reward'
      | 'RigSlot0'
      | 'RigSlot1'
      | 'RigSlot2'
      | 'RigSlot3'
      | 'RigSlot4'
      | 'RigSlot5'
      | 'RigSlot6'
      | 'RigSlot7'
      | 'SecondaryStorage'
      | 'ServiceSlot0'
      | 'ServiceSlot1'
      | 'ServiceSlot2'
      | 'ServiceSlot3'
      | 'ServiceSlot4'
      | 'ServiceSlot5'
      | 'ServiceSlot6'
      | 'ServiceSlot7'
      | 'ShipHangar'
      | 'ShipOffline'
      | 'Skill'
      | 'SkillInTraining'
      | 'SpecializedAmmoHold'
      | 'SpecializedAsteroidHold'
      | 'SpecializedCommandCenterHold'
      | 'SpecializedFuelBay'
      | 'SpecializedGasHold'
      | 'SpecializedIceHold'
      | 'SpecializedIndustrialShipHold'
      | 'SpecializedLargeShipHold'
      | 'SpecializedMaterialBay'
      | 'SpecializedMediumShipHold'
      | 'SpecializedMineralHold'
      | 'SpecializedOreHold'
      | 'SpecializedPlanetaryCommoditiesHold'
      | 'SpecializedSalvageHold'
      | 'SpecializedShipHold'
      | 'SpecializedSmallShipHold'
      | 'StructureActive'
      | 'StructureFuel'
      | 'StructureInactive'
      | 'StructureOffline'
      | 'SubSystemBay'
      | 'SubSystemSlot0'
      | 'SubSystemSlot1'
      | 'SubSystemSlot2'
      | 'SubSystemSlot3'
      | 'SubSystemSlot4'
      | 'SubSystemSlot5'
      | 'SubSystemSlot6'
      | 'SubSystemSlot7'
      | 'Unlocked'
      | 'Wallet'
      | 'Wardrobe';
    /**
     * location_id integer
     */
    location_id: number;
    /**
     * location_type string
     */
    location_type: 'station' | 'solar_system' | 'item' | 'other';
    /**
     * quantity integer
     */
    quantity: number;
    /**
     * type_id integer
     */
    type_id: number;
  }>;
};

export type GetCorporationsCorporationIdAssetsResponse =
  GetCorporationsCorporationIdAssetsResponses[keyof GetCorporationsCorporationIdAssetsResponses];

export type PostCorporationsCorporationIdAssetsLocationsData = {
  /**
   * item_ids array
   */
  body: Array<number>;
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/assets/locations/';
};

export type PostCorporationsCorporationIdAssetsLocationsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PostCorporationsCorporationIdAssetsLocationsError =
  PostCorporationsCorporationIdAssetsLocationsErrors[keyof PostCorporationsCorporationIdAssetsLocationsErrors];

export type PostCorporationsCorporationIdAssetsLocationsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * item_id integer
     */
    item_id: number;
    /**
     * position object
     */
    position: {
      /**
       * x number
       */
      x: number;
      /**
       * y number
       */
      y: number;
      /**
       * z number
       */
      z: number;
    };
  }>;
};

export type PostCorporationsCorporationIdAssetsLocationsResponse =
  PostCorporationsCorporationIdAssetsLocationsResponses[keyof PostCorporationsCorporationIdAssetsLocationsResponses];

export type PostCorporationsCorporationIdAssetsNamesData = {
  /**
   * item_ids array
   */
  body: Array<number>;
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/assets/names/';
};

export type PostCorporationsCorporationIdAssetsNamesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PostCorporationsCorporationIdAssetsNamesError =
  PostCorporationsCorporationIdAssetsNamesErrors[keyof PostCorporationsCorporationIdAssetsNamesErrors];

export type PostCorporationsCorporationIdAssetsNamesResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * item_id integer
     */
    item_id: number;
    /**
     * name string
     */
    name: string;
  }>;
};

export type PostCorporationsCorporationIdAssetsNamesResponse =
  PostCorporationsCorporationIdAssetsNamesResponses[keyof PostCorporationsCorporationIdAssetsNamesResponses];

export type GetCorporationsCorporationIdBlueprintsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/blueprints/';
};

export type GetCorporationsCorporationIdBlueprintsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdBlueprintsError =
  GetCorporationsCorporationIdBlueprintsErrors[keyof GetCorporationsCorporationIdBlueprintsErrors];

export type GetCorporationsCorporationIdBlueprintsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * Unique ID for this item.
     */
    item_id: number;
    /**
     * Type of the location_id
     */
    location_flag:
      | 'AssetSafety'
      | 'AutoFit'
      | 'Bonus'
      | 'Booster'
      | 'BoosterBay'
      | 'Capsule'
      | 'Cargo'
      | 'CorpDeliveries'
      | 'CorpSAG1'
      | 'CorpSAG2'
      | 'CorpSAG3'
      | 'CorpSAG4'
      | 'CorpSAG5'
      | 'CorpSAG6'
      | 'CorpSAG7'
      | 'CrateLoot'
      | 'Deliveries'
      | 'DroneBay'
      | 'DustBattle'
      | 'DustDatabank'
      | 'FighterBay'
      | 'FighterTube0'
      | 'FighterTube1'
      | 'FighterTube2'
      | 'FighterTube3'
      | 'FighterTube4'
      | 'FleetHangar'
      | 'FrigateEscapeBay'
      | 'Hangar'
      | 'HangarAll'
      | 'HiSlot0'
      | 'HiSlot1'
      | 'HiSlot2'
      | 'HiSlot3'
      | 'HiSlot4'
      | 'HiSlot5'
      | 'HiSlot6'
      | 'HiSlot7'
      | 'HiddenModifiers'
      | 'Implant'
      | 'Impounded'
      | 'JunkyardReprocessed'
      | 'JunkyardTrashed'
      | 'LoSlot0'
      | 'LoSlot1'
      | 'LoSlot2'
      | 'LoSlot3'
      | 'LoSlot4'
      | 'LoSlot5'
      | 'LoSlot6'
      | 'LoSlot7'
      | 'Locked'
      | 'MedSlot0'
      | 'MedSlot1'
      | 'MedSlot2'
      | 'MedSlot3'
      | 'MedSlot4'
      | 'MedSlot5'
      | 'MedSlot6'
      | 'MedSlot7'
      | 'OfficeFolder'
      | 'Pilot'
      | 'PlanetSurface'
      | 'QuafeBay'
      | 'QuantumCoreRoom'
      | 'Reward'
      | 'RigSlot0'
      | 'RigSlot1'
      | 'RigSlot2'
      | 'RigSlot3'
      | 'RigSlot4'
      | 'RigSlot5'
      | 'RigSlot6'
      | 'RigSlot7'
      | 'SecondaryStorage'
      | 'ServiceSlot0'
      | 'ServiceSlot1'
      | 'ServiceSlot2'
      | 'ServiceSlot3'
      | 'ServiceSlot4'
      | 'ServiceSlot5'
      | 'ServiceSlot6'
      | 'ServiceSlot7'
      | 'ShipHangar'
      | 'ShipOffline'
      | 'Skill'
      | 'SkillInTraining'
      | 'SpecializedAmmoHold'
      | 'SpecializedCommandCenterHold'
      | 'SpecializedFuelBay'
      | 'SpecializedGasHold'
      | 'SpecializedIndustrialShipHold'
      | 'SpecializedLargeShipHold'
      | 'SpecializedMaterialBay'
      | 'SpecializedMediumShipHold'
      | 'SpecializedMineralHold'
      | 'SpecializedOreHold'
      | 'SpecializedPlanetaryCommoditiesHold'
      | 'SpecializedSalvageHold'
      | 'SpecializedShipHold'
      | 'SpecializedSmallShipHold'
      | 'StructureActive'
      | 'StructureFuel'
      | 'StructureInactive'
      | 'StructureOffline'
      | 'SubSystemBay'
      | 'SubSystemSlot0'
      | 'SubSystemSlot1'
      | 'SubSystemSlot2'
      | 'SubSystemSlot3'
      | 'SubSystemSlot4'
      | 'SubSystemSlot5'
      | 'SubSystemSlot6'
      | 'SubSystemSlot7'
      | 'Unlocked'
      | 'Wallet'
      | 'Wardrobe';
    /**
     * References a station, a ship or an item_id if this blueprint is located within a container.
     */
    location_id: number;
    /**
     * Material Efficiency Level of the blueprint.
     */
    material_efficiency: number;
    /**
     * A range of numbers with a minimum of -2 and no maximum value where -1 is an original and -2 is a copy. It can be a positive integer if it is a stack of blueprint originals fresh from the market (e.g. no activities performed on them yet).
     */
    quantity: number;
    /**
     * Number of runs remaining if the blueprint is a copy, -1 if it is an original.
     */
    runs: number;
    /**
     * Time Efficiency Level of the blueprint.
     */
    time_efficiency: number;
    /**
     * type_id integer
     */
    type_id: number;
  }>;
};

export type GetCorporationsCorporationIdBlueprintsResponse =
  GetCorporationsCorporationIdBlueprintsResponses[keyof GetCorporationsCorporationIdBlueprintsResponses];

export type GetCorporationsCorporationIdContactsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/contacts/';
};

export type GetCorporationsCorporationIdContactsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdContactsError =
  GetCorporationsCorporationIdContactsErrors[keyof GetCorporationsCorporationIdContactsErrors];

export type GetCorporationsCorporationIdContactsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * contact_id integer
     */
    contact_id: number;
    /**
     * contact_type string
     */
    contact_type: 'character' | 'corporation' | 'alliance' | 'faction';
    /**
     * Whether this contact is being watched
     */
    is_watched?: boolean;
    /**
     * label_ids array
     */
    label_ids?: Array<number>;
    /**
     * Standing of the contact
     */
    standing: number;
  }>;
};

export type GetCorporationsCorporationIdContactsResponse =
  GetCorporationsCorporationIdContactsResponses[keyof GetCorporationsCorporationIdContactsResponses];

export type GetCorporationsCorporationIdContactsLabelsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/contacts/labels/';
};

export type GetCorporationsCorporationIdContactsLabelsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdContactsLabelsError =
  GetCorporationsCorporationIdContactsLabelsErrors[keyof GetCorporationsCorporationIdContactsLabelsErrors];

export type GetCorporationsCorporationIdContactsLabelsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * label_id integer
     */
    label_id: number;
    /**
     * label_name string
     */
    label_name: string;
  }>;
};

export type GetCorporationsCorporationIdContactsLabelsResponse =
  GetCorporationsCorporationIdContactsLabelsResponses[keyof GetCorporationsCorporationIdContactsLabelsResponses];

export type GetCorporationsCorporationIdContainersLogsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/containers/logs/';
};

export type GetCorporationsCorporationIdContainersLogsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdContainersLogsError =
  GetCorporationsCorporationIdContainersLogsErrors[keyof GetCorporationsCorporationIdContainersLogsErrors];

export type GetCorporationsCorporationIdContainersLogsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * action string
     */
    action:
      | 'add'
      | 'assemble'
      | 'configure'
      | 'enter_password'
      | 'lock'
      | 'move'
      | 'repackage'
      | 'set_name'
      | 'set_password'
      | 'unlock';
    /**
     * ID of the character who performed the action.
     */
    character_id: number;
    /**
     * ID of the container
     */
    container_id: number;
    /**
     * Type ID of the container
     */
    container_type_id: number;
    /**
     * location_flag string
     */
    location_flag:
      | 'AssetSafety'
      | 'AutoFit'
      | 'Bonus'
      | 'Booster'
      | 'BoosterBay'
      | 'Capsule'
      | 'Cargo'
      | 'CorpDeliveries'
      | 'CorpSAG1'
      | 'CorpSAG2'
      | 'CorpSAG3'
      | 'CorpSAG4'
      | 'CorpSAG5'
      | 'CorpSAG6'
      | 'CorpSAG7'
      | 'CrateLoot'
      | 'Deliveries'
      | 'DroneBay'
      | 'DustBattle'
      | 'DustDatabank'
      | 'FighterBay'
      | 'FighterTube0'
      | 'FighterTube1'
      | 'FighterTube2'
      | 'FighterTube3'
      | 'FighterTube4'
      | 'FleetHangar'
      | 'FrigateEscapeBay'
      | 'Hangar'
      | 'HangarAll'
      | 'HiSlot0'
      | 'HiSlot1'
      | 'HiSlot2'
      | 'HiSlot3'
      | 'HiSlot4'
      | 'HiSlot5'
      | 'HiSlot6'
      | 'HiSlot7'
      | 'HiddenModifiers'
      | 'Implant'
      | 'Impounded'
      | 'JunkyardReprocessed'
      | 'JunkyardTrashed'
      | 'LoSlot0'
      | 'LoSlot1'
      | 'LoSlot2'
      | 'LoSlot3'
      | 'LoSlot4'
      | 'LoSlot5'
      | 'LoSlot6'
      | 'LoSlot7'
      | 'Locked'
      | 'MedSlot0'
      | 'MedSlot1'
      | 'MedSlot2'
      | 'MedSlot3'
      | 'MedSlot4'
      | 'MedSlot5'
      | 'MedSlot6'
      | 'MedSlot7'
      | 'OfficeFolder'
      | 'Pilot'
      | 'PlanetSurface'
      | 'QuafeBay'
      | 'QuantumCoreRoom'
      | 'Reward'
      | 'RigSlot0'
      | 'RigSlot1'
      | 'RigSlot2'
      | 'RigSlot3'
      | 'RigSlot4'
      | 'RigSlot5'
      | 'RigSlot6'
      | 'RigSlot7'
      | 'SecondaryStorage'
      | 'ServiceSlot0'
      | 'ServiceSlot1'
      | 'ServiceSlot2'
      | 'ServiceSlot3'
      | 'ServiceSlot4'
      | 'ServiceSlot5'
      | 'ServiceSlot6'
      | 'ServiceSlot7'
      | 'ShipHangar'
      | 'ShipOffline'
      | 'Skill'
      | 'SkillInTraining'
      | 'SpecializedAmmoHold'
      | 'SpecializedCommandCenterHold'
      | 'SpecializedFuelBay'
      | 'SpecializedGasHold'
      | 'SpecializedIndustrialShipHold'
      | 'SpecializedLargeShipHold'
      | 'SpecializedMaterialBay'
      | 'SpecializedMediumShipHold'
      | 'SpecializedMineralHold'
      | 'SpecializedOreHold'
      | 'SpecializedPlanetaryCommoditiesHold'
      | 'SpecializedSalvageHold'
      | 'SpecializedShipHold'
      | 'SpecializedSmallShipHold'
      | 'StructureActive'
      | 'StructureFuel'
      | 'StructureInactive'
      | 'StructureOffline'
      | 'SubSystemBay'
      | 'SubSystemSlot0'
      | 'SubSystemSlot1'
      | 'SubSystemSlot2'
      | 'SubSystemSlot3'
      | 'SubSystemSlot4'
      | 'SubSystemSlot5'
      | 'SubSystemSlot6'
      | 'SubSystemSlot7'
      | 'Unlocked'
      | 'Wallet'
      | 'Wardrobe';
    /**
     * location_id integer
     */
    location_id: number;
    /**
     * Timestamp when this log was created
     */
    logged_at: string;
    /**
     * new_config_bitmask integer
     */
    new_config_bitmask?: number;
    /**
     * old_config_bitmask integer
     */
    old_config_bitmask?: number;
    /**
     * Type of password set if action is of type SetPassword or EnterPassword
     */
    password_type?: 'config' | 'general';
    /**
     * Quantity of the item being acted upon
     */
    quantity?: number;
    /**
     * Type ID of the item being acted upon
     */
    type_id?: number;
  }>;
};

export type GetCorporationsCorporationIdContainersLogsResponse =
  GetCorporationsCorporationIdContainersLogsResponses[keyof GetCorporationsCorporationIdContainersLogsResponses];

export type GetCorporationsCorporationIdContractsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/contracts/';
};

export type GetCorporationsCorporationIdContractsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdContractsError =
  GetCorporationsCorporationIdContractsErrors[keyof GetCorporationsCorporationIdContractsErrors];

export type GetCorporationsCorporationIdContractsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * Who will accept the contract
     */
    acceptor_id: number;
    /**
     * ID to whom the contract is assigned, can be corporation or character ID
     */
    assignee_id: number;
    /**
     * To whom the contract is available
     */
    availability: 'public' | 'personal' | 'corporation' | 'alliance';
    /**
     * Buyout price (for Auctions only)
     */
    buyout?: number;
    /**
     * Collateral price (for Couriers only)
     */
    collateral?: number;
    /**
     * contract_id integer
     */
    contract_id: number;
    /**
     * Date of confirmation of contract
     */
    date_accepted?: string;
    /**
     * Date of completed of contract
     */
    date_completed?: string;
    /**
     * Expiration date of the contract
     */
    date_expired: string;
    /**
     * Сreation date of the contract
     */
    date_issued: string;
    /**
     * Number of days to perform the contract
     */
    days_to_complete?: number;
    /**
     * End location ID (for Couriers contract)
     */
    end_location_id?: number;
    /**
     * true if the contract was issued on behalf of the issuer's corporation
     */
    for_corporation: boolean;
    /**
     * Character's corporation ID for the issuer
     */
    issuer_corporation_id: number;
    /**
     * Character ID for the issuer
     */
    issuer_id: number;
    /**
     * Price of contract (for ItemsExchange and Auctions)
     */
    price?: number;
    /**
     * Remuneration for contract (for Couriers only)
     */
    reward?: number;
    /**
     * Start location ID (for Couriers contract)
     */
    start_location_id?: number;
    /**
     * Status of the the contract
     */
    status:
      | 'outstanding'
      | 'in_progress'
      | 'finished_issuer'
      | 'finished_contractor'
      | 'finished'
      | 'cancelled'
      | 'rejected'
      | 'failed'
      | 'deleted'
      | 'reversed';
    /**
     * Title of the contract
     */
    title?: string;
    /**
     * Type of the contract
     */
    type: 'unknown' | 'item_exchange' | 'auction' | 'courier' | 'loan';
    /**
     * Volume of items in the contract
     */
    volume?: number;
  }>;
};

export type GetCorporationsCorporationIdContractsResponse =
  GetCorporationsCorporationIdContractsResponses[keyof GetCorporationsCorporationIdContractsResponses];

export type GetCorporationsCorporationIdContractsContractIdBidsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * ID of a contract
     */
    contract_id: number;
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/contracts/{contract_id}/bids/';
};

export type GetCorporationsCorporationIdContractsContractIdBidsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdContractsContractIdBidsError =
  GetCorporationsCorporationIdContractsContractIdBidsErrors[keyof GetCorporationsCorporationIdContractsContractIdBidsErrors];

export type GetCorporationsCorporationIdContractsContractIdBidsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * The amount bid, in ISK
     */
    amount: number;
    /**
     * Unique ID for the bid
     */
    bid_id: number;
    /**
     * Character ID of the bidder
     */
    bidder_id: number;
    /**
     * Datetime when the bid was placed
     */
    date_bid: string;
  }>;
};

export type GetCorporationsCorporationIdContractsContractIdBidsResponse =
  GetCorporationsCorporationIdContractsContractIdBidsResponses[keyof GetCorporationsCorporationIdContractsContractIdBidsResponses];

export type GetCorporationsCorporationIdContractsContractIdItemsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * ID of a contract
     */
    contract_id: number;
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/contracts/{contract_id}/items/';
};

export type GetCorporationsCorporationIdContractsContractIdItemsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
  /**
   * Error 520
   */
  520: {
    /**
     * Error 520 message
     */
    error?: string;
  };
};

export type GetCorporationsCorporationIdContractsContractIdItemsError =
  GetCorporationsCorporationIdContractsContractIdItemsErrors[keyof GetCorporationsCorporationIdContractsContractIdItemsErrors];

export type GetCorporationsCorporationIdContractsContractIdItemsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract
     */
    is_included: boolean;
    /**
     * is_singleton boolean
     */
    is_singleton: boolean;
    /**
     * Number of items in the stack
     */
    quantity: number;
    /**
     * -1 indicates that the item is a singleton (non-stackable). If the item happens to be a Blueprint, -1 is an Original and -2 is a Blueprint Copy
     */
    raw_quantity?: number;
    /**
     * Unique ID for the item
     */
    record_id: number;
    /**
     * Type ID for item
     */
    type_id: number;
  }>;
};

export type GetCorporationsCorporationIdContractsContractIdItemsResponse =
  GetCorporationsCorporationIdContractsContractIdItemsResponses[keyof GetCorporationsCorporationIdContractsContractIdItemsResponses];

export type GetCorporationsCorporationIdCustomsOfficesData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/customs_offices/';
};

export type GetCorporationsCorporationIdCustomsOfficesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdCustomsOfficesError =
  GetCorporationsCorporationIdCustomsOfficesErrors[keyof GetCorporationsCorporationIdCustomsOfficesErrors];

export type GetCorporationsCorporationIdCustomsOfficesResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * Only present if alliance access is allowed
     */
    alliance_tax_rate?: number;
    /**
     * standing_level and any standing related tax rate only present when this is true
     */
    allow_access_with_standings: boolean;
    /**
     * allow_alliance_access boolean
     */
    allow_alliance_access: boolean;
    /**
     * bad_standing_tax_rate number
     */
    bad_standing_tax_rate?: number;
    /**
     * corporation_tax_rate number
     */
    corporation_tax_rate?: number;
    /**
     * Tax rate for entities with excellent level of standing, only present if this level is allowed, same for all other standing related tax rates
     */
    excellent_standing_tax_rate?: number;
    /**
     * good_standing_tax_rate number
     */
    good_standing_tax_rate?: number;
    /**
     * neutral_standing_tax_rate number
     */
    neutral_standing_tax_rate?: number;
    /**
     * unique ID of this customs office
     */
    office_id: number;
    /**
     * reinforce_exit_end integer
     */
    reinforce_exit_end: number;
    /**
     * Together with reinforce_exit_end, marks a 2-hour period where this customs office could exit reinforcement mode during the day after initial attack
     */
    reinforce_exit_start: number;
    /**
     * Access is allowed only for entities with this level of standing or better
     */
    standing_level?: 'bad' | 'excellent' | 'good' | 'neutral' | 'terrible';
    /**
     * ID of the solar system this customs office is located in
     */
    system_id: number;
    /**
     * terrible_standing_tax_rate number
     */
    terrible_standing_tax_rate?: number;
  }>;
};

export type GetCorporationsCorporationIdCustomsOfficesResponse =
  GetCorporationsCorporationIdCustomsOfficesResponses[keyof GetCorporationsCorporationIdCustomsOfficesResponses];

export type GetCorporationsCorporationIdDivisionsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/divisions/';
};

export type GetCorporationsCorporationIdDivisionsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdDivisionsError =
  GetCorporationsCorporationIdDivisionsErrors[keyof GetCorporationsCorporationIdDivisionsErrors];

export type GetCorporationsCorporationIdDivisionsResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * hangar array
     */
    hangar?: Array<{
      /**
       * division integer
       */
      division?: number;
      /**
       * name string
       */
      name?: string;
    }>;
    /**
     * wallet array
     */
    wallet?: Array<{
      /**
       * division integer
       */
      division?: number;
      /**
       * name string
       */
      name?: string;
    }>;
  };
};

export type GetCorporationsCorporationIdDivisionsResponse =
  GetCorporationsCorporationIdDivisionsResponses[keyof GetCorporationsCorporationIdDivisionsResponses];

export type GetCorporationsCorporationIdFacilitiesData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/facilities/';
};

export type GetCorporationsCorporationIdFacilitiesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdFacilitiesError =
  GetCorporationsCorporationIdFacilitiesErrors[keyof GetCorporationsCorporationIdFacilitiesErrors];

export type GetCorporationsCorporationIdFacilitiesResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * facility_id integer
     */
    facility_id: number;
    /**
     * system_id integer
     */
    system_id: number;
    /**
     * type_id integer
     */
    type_id: number;
  }>;
};

export type GetCorporationsCorporationIdFacilitiesResponse =
  GetCorporationsCorporationIdFacilitiesResponses[keyof GetCorporationsCorporationIdFacilitiesResponses];

export type GetCorporationsCorporationIdFwStatsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/fw/stats/';
};

export type GetCorporationsCorporationIdFwStatsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdFwStatsError =
  GetCorporationsCorporationIdFwStatsErrors[keyof GetCorporationsCorporationIdFwStatsErrors];

export type GetCorporationsCorporationIdFwStatsResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * The enlistment date of the given corporation into faction warfare. Will not be included if corporation is not enlisted in faction warfare
     */
    enlisted_on?: string;
    /**
     * The faction the given corporation is enlisted to fight for. Will not be included if corporation is not enlisted in faction warfare
     */
    faction_id?: number;
    /**
     * Summary of kills done by the given corporation against enemy factions
     */
    kills: {
      /**
       * Last week's total number of kills by members of the given corporation against enemy factions
       */
      last_week: number;
      /**
       * Total number of kills by members of the given corporation against enemy factions since the corporation enlisted
       */
      total: number;
      /**
       * Yesterday's total number of kills by members of the given corporation against enemy factions
       */
      yesterday: number;
    };
    /**
     * How many pilots the enlisted corporation has. Will not be included if corporation is not enlisted in faction warfare
     */
    pilots?: number;
    /**
     * Summary of victory points gained by the given corporation for the enlisted faction
     */
    victory_points: {
      /**
       * Last week's victory points gained by members of the given corporation
       */
      last_week: number;
      /**
       * Total victory points gained since the given corporation enlisted
       */
      total: number;
      /**
       * Yesterday's victory points gained by members of the given corporation
       */
      yesterday: number;
    };
  };
};

export type GetCorporationsCorporationIdFwStatsResponse =
  GetCorporationsCorporationIdFwStatsResponses[keyof GetCorporationsCorporationIdFwStatsResponses];

export type GetCorporationsCorporationIdIconsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/corporations/{corporation_id}/icons/';
};

export type GetCorporationsCorporationIdIconsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * No image server for this datasource
   */
  404: {
    /**
     * error message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdIconsError =
  GetCorporationsCorporationIdIconsErrors[keyof GetCorporationsCorporationIdIconsErrors];

export type GetCorporationsCorporationIdIconsResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * px128x128 string
     */
    px128x128?: string;
    /**
     * px256x256 string
     */
    px256x256?: string;
    /**
     * px64x64 string
     */
    px64x64?: string;
  };
};

export type GetCorporationsCorporationIdIconsResponse =
  GetCorporationsCorporationIdIconsResponses[keyof GetCorporationsCorporationIdIconsResponses];

export type GetCorporationsCorporationIdIndustryJobsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Whether to retrieve completed corporation industry jobs. Only includes jobs from the past 90 days
     */
    include_completed?: boolean;
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/industry/jobs/';
};

export type GetCorporationsCorporationIdIndustryJobsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdIndustryJobsError =
  GetCorporationsCorporationIdIndustryJobsErrors[keyof GetCorporationsCorporationIdIndustryJobsErrors];

export type GetCorporationsCorporationIdIndustryJobsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * Job activity ID
     */
    activity_id: number;
    /**
     * blueprint_id integer
     */
    blueprint_id: number;
    /**
     * Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility
     */
    blueprint_location_id: number;
    /**
     * blueprint_type_id integer
     */
    blueprint_type_id: number;
    /**
     * ID of the character which completed this job
     */
    completed_character_id?: number;
    /**
     * Date and time when this job was completed
     */
    completed_date?: string;
    /**
     * The sume of job installation fee and industry facility tax
     */
    cost?: number;
    /**
     * Job duration in seconds
     */
    duration: number;
    /**
     * Date and time when this job finished
     */
    end_date: string;
    /**
     * ID of the facility where this job is running
     */
    facility_id: number;
    /**
     * ID of the character which installed this job
     */
    installer_id: number;
    /**
     * Unique job ID
     */
    job_id: number;
    /**
     * Number of runs blueprint is licensed for
     */
    licensed_runs?: number;
    /**
     * ID of the location for the industry facility
     */
    location_id: number;
    /**
     * Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility
     */
    output_location_id: number;
    /**
     * Date and time when this job was paused (i.e. time when the facility where this job was installed went offline)
     */
    pause_date?: string;
    /**
     * Chance of success for invention
     */
    probability?: number;
    /**
     * Type ID of product (manufactured, copied or invented)
     */
    product_type_id?: number;
    /**
     * Number of runs for a manufacturing job, or number of copies to make for a blueprint copy
     */
    runs: number;
    /**
     * Date and time when this job started
     */
    start_date: string;
    /**
     * status string
     */
    status:
      | 'active'
      | 'cancelled'
      | 'delivered'
      | 'paused'
      | 'ready'
      | 'reverted';
    /**
     * Number of successful runs for this job. Equal to runs unless this is an invention job
     */
    successful_runs?: number;
  }>;
};

export type GetCorporationsCorporationIdIndustryJobsResponse =
  GetCorporationsCorporationIdIndustryJobsResponses[keyof GetCorporationsCorporationIdIndustryJobsResponses];

export type GetCorporationsCorporationIdKillmailsRecentData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/killmails/recent/';
};

export type GetCorporationsCorporationIdKillmailsRecentErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdKillmailsRecentError =
  GetCorporationsCorporationIdKillmailsRecentErrors[keyof GetCorporationsCorporationIdKillmailsRecentErrors];

export type GetCorporationsCorporationIdKillmailsRecentResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * A hash of this killmail
     */
    killmail_hash: string;
    /**
     * ID of this killmail
     */
    killmail_id: number;
  }>;
};

export type GetCorporationsCorporationIdKillmailsRecentResponse =
  GetCorporationsCorporationIdKillmailsRecentResponses[keyof GetCorporationsCorporationIdKillmailsRecentResponses];

export type GetCorporationsCorporationIdMedalsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/medals/';
};

export type GetCorporationsCorporationIdMedalsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdMedalsError =
  GetCorporationsCorporationIdMedalsErrors[keyof GetCorporationsCorporationIdMedalsErrors];

export type GetCorporationsCorporationIdMedalsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * created_at string
     */
    created_at: string;
    /**
     * ID of the character who created this medal
     */
    creator_id: number;
    /**
     * description string
     */
    description: string;
    /**
     * medal_id integer
     */
    medal_id: number;
    /**
     * title string
     */
    title: string;
  }>;
};

export type GetCorporationsCorporationIdMedalsResponse =
  GetCorporationsCorporationIdMedalsResponses[keyof GetCorporationsCorporationIdMedalsResponses];

export type GetCorporationsCorporationIdMedalsIssuedData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/medals/issued/';
};

export type GetCorporationsCorporationIdMedalsIssuedErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdMedalsIssuedError =
  GetCorporationsCorporationIdMedalsIssuedErrors[keyof GetCorporationsCorporationIdMedalsIssuedErrors];

export type GetCorporationsCorporationIdMedalsIssuedResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * ID of the character who was rewarded this medal
     */
    character_id: number;
    /**
     * issued_at string
     */
    issued_at: string;
    /**
     * ID of the character who issued the medal
     */
    issuer_id: number;
    /**
     * medal_id integer
     */
    medal_id: number;
    /**
     * reason string
     */
    reason: string;
    /**
     * status string
     */
    status: 'private' | 'public';
  }>;
};

export type GetCorporationsCorporationIdMedalsIssuedResponse =
  GetCorporationsCorporationIdMedalsIssuedResponses[keyof GetCorporationsCorporationIdMedalsIssuedResponses];

export type GetCorporationsCorporationIdMembersData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/members/';
};

export type GetCorporationsCorporationIdMembersErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdMembersError =
  GetCorporationsCorporationIdMembersErrors[keyof GetCorporationsCorporationIdMembersErrors];

export type GetCorporationsCorporationIdMembersResponses = {
  /**
   * A list of character IDs
   */
  200: Array<number>;
};

export type GetCorporationsCorporationIdMembersResponse =
  GetCorporationsCorporationIdMembersResponses[keyof GetCorporationsCorporationIdMembersResponses];

export type GetCorporationsCorporationIdMembersLimitData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/members/limit/';
};

export type GetCorporationsCorporationIdMembersLimitErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdMembersLimitError =
  GetCorporationsCorporationIdMembersLimitErrors[keyof GetCorporationsCorporationIdMembersLimitErrors];

export type GetCorporationsCorporationIdMembersLimitResponses = {
  /**
   * 200 ok integer
   */
  200: number;
};

export type GetCorporationsCorporationIdMembersLimitResponse =
  GetCorporationsCorporationIdMembersLimitResponses[keyof GetCorporationsCorporationIdMembersLimitResponses];

export type GetCorporationsCorporationIdMembersTitlesData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/members/titles/';
};

export type GetCorporationsCorporationIdMembersTitlesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdMembersTitlesError =
  GetCorporationsCorporationIdMembersTitlesErrors[keyof GetCorporationsCorporationIdMembersTitlesErrors];

export type GetCorporationsCorporationIdMembersTitlesResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * character_id integer
     */
    character_id: number;
    /**
     * A list of title_id
     */
    titles: Array<number>;
  }>;
};

export type GetCorporationsCorporationIdMembersTitlesResponse =
  GetCorporationsCorporationIdMembersTitlesResponses[keyof GetCorporationsCorporationIdMembersTitlesResponses];

export type GetCorporationsCorporationIdMembertrackingData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/membertracking/';
};

export type GetCorporationsCorporationIdMembertrackingErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdMembertrackingError =
  GetCorporationsCorporationIdMembertrackingErrors[keyof GetCorporationsCorporationIdMembertrackingErrors];

export type GetCorporationsCorporationIdMembertrackingResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * base_id integer
     */
    base_id?: number;
    /**
     * character_id integer
     */
    character_id: number;
    /**
     * location_id integer
     */
    location_id?: number;
    /**
     * logoff_date string
     */
    logoff_date?: string;
    /**
     * logon_date string
     */
    logon_date?: string;
    /**
     * ship_type_id integer
     */
    ship_type_id?: number;
    /**
     * start_date string
     */
    start_date?: string;
  }>;
};

export type GetCorporationsCorporationIdMembertrackingResponse =
  GetCorporationsCorporationIdMembertrackingResponses[keyof GetCorporationsCorporationIdMembertrackingResponses];

export type GetCorporationsCorporationIdOrdersData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/orders/';
};

export type GetCorporationsCorporationIdOrdersErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdOrdersError =
  GetCorporationsCorporationIdOrdersErrors[keyof GetCorporationsCorporationIdOrdersErrors];

export type GetCorporationsCorporationIdOrdersResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * Number of days for which order is valid (starting from the issued date). An order expires at time issued + duration
     */
    duration: number;
    /**
     * For buy orders, the amount of ISK in escrow
     */
    escrow?: number;
    /**
     * True if the order is a bid (buy) order
     */
    is_buy_order?: boolean;
    /**
     * Date and time when this order was issued
     */
    issued: string;
    /**
     * The character who issued this order
     */
    issued_by: number;
    /**
     * ID of the location where order was placed
     */
    location_id: number;
    /**
     * For buy orders, the minimum quantity that will be accepted in a matching sell order
     */
    min_volume?: number;
    /**
     * Unique order ID
     */
    order_id: number;
    /**
     * Cost per unit for this order
     */
    price: number;
    /**
     * Valid order range, numbers are ranges in jumps
     */
    range:
      | '1'
      | '10'
      | '2'
      | '20'
      | '3'
      | '30'
      | '4'
      | '40'
      | '5'
      | 'region'
      | 'solarsystem'
      | 'station';
    /**
     * ID of the region where order was placed
     */
    region_id: number;
    /**
     * The type ID of the item transacted in this order
     */
    type_id: number;
    /**
     * Quantity of items still required or offered
     */
    volume_remain: number;
    /**
     * Quantity of items required or offered at time order was placed
     */
    volume_total: number;
    /**
     * The corporation wallet division used for this order.
     */
    wallet_division: number;
  }>;
};

export type GetCorporationsCorporationIdOrdersResponse =
  GetCorporationsCorporationIdOrdersResponses[keyof GetCorporationsCorporationIdOrdersResponses];

export type GetCorporationsCorporationIdOrdersHistoryData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/orders/history/';
};

export type GetCorporationsCorporationIdOrdersHistoryErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdOrdersHistoryError =
  GetCorporationsCorporationIdOrdersHistoryErrors[keyof GetCorporationsCorporationIdOrdersHistoryErrors];

export type GetCorporationsCorporationIdOrdersHistoryResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * Number of days the order was valid for (starting from the issued date). An order expires at time issued + duration
     */
    duration: number;
    /**
     * For buy orders, the amount of ISK in escrow
     */
    escrow?: number;
    /**
     * True if the order is a bid (buy) order
     */
    is_buy_order?: boolean;
    /**
     * Date and time when this order was issued
     */
    issued: string;
    /**
     * The character who issued this order
     */
    issued_by?: number;
    /**
     * ID of the location where order was placed
     */
    location_id: number;
    /**
     * For buy orders, the minimum quantity that will be accepted in a matching sell order
     */
    min_volume?: number;
    /**
     * Unique order ID
     */
    order_id: number;
    /**
     * Cost per unit for this order
     */
    price: number;
    /**
     * Valid order range, numbers are ranges in jumps
     */
    range:
      | '1'
      | '10'
      | '2'
      | '20'
      | '3'
      | '30'
      | '4'
      | '40'
      | '5'
      | 'region'
      | 'solarsystem'
      | 'station';
    /**
     * ID of the region where order was placed
     */
    region_id: number;
    /**
     * Current order state
     */
    state: 'cancelled' | 'expired';
    /**
     * The type ID of the item transacted in this order
     */
    type_id: number;
    /**
     * Quantity of items still required or offered
     */
    volume_remain: number;
    /**
     * Quantity of items required or offered at time order was placed
     */
    volume_total: number;
    /**
     * The corporation wallet division used for this order
     */
    wallet_division: number;
  }>;
};

export type GetCorporationsCorporationIdOrdersHistoryResponse =
  GetCorporationsCorporationIdOrdersHistoryResponses[keyof GetCorporationsCorporationIdOrdersHistoryResponses];

export type GetCorporationsCorporationIdRolesData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/roles/';
};

export type GetCorporationsCorporationIdRolesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdRolesError =
  GetCorporationsCorporationIdRolesErrors[keyof GetCorporationsCorporationIdRolesErrors];

export type GetCorporationsCorporationIdRolesResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * character_id integer
     */
    character_id: number;
    /**
     * grantable_roles array
     */
    grantable_roles?: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
    /**
     * grantable_roles_at_base array
     */
    grantable_roles_at_base?: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
    /**
     * grantable_roles_at_hq array
     */
    grantable_roles_at_hq?: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
    /**
     * grantable_roles_at_other array
     */
    grantable_roles_at_other?: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
    /**
     * roles array
     */
    roles?: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
    /**
     * roles_at_base array
     */
    roles_at_base?: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
    /**
     * roles_at_hq array
     */
    roles_at_hq?: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
    /**
     * roles_at_other array
     */
    roles_at_other?: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
  }>;
};

export type GetCorporationsCorporationIdRolesResponse =
  GetCorporationsCorporationIdRolesResponses[keyof GetCorporationsCorporationIdRolesResponses];

export type GetCorporationsCorporationIdRolesHistoryData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/roles/history/';
};

export type GetCorporationsCorporationIdRolesHistoryErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdRolesHistoryError =
  GetCorporationsCorporationIdRolesHistoryErrors[keyof GetCorporationsCorporationIdRolesHistoryErrors];

export type GetCorporationsCorporationIdRolesHistoryResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * changed_at string
     */
    changed_at: string;
    /**
     * The character whose roles are changed
     */
    character_id: number;
    /**
     * ID of the character who issued this change
     */
    issuer_id: number;
    /**
     * new_roles array
     */
    new_roles: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
    /**
     * old_roles array
     */
    old_roles: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
    /**
     * role_type string
     */
    role_type:
      | 'grantable_roles'
      | 'grantable_roles_at_base'
      | 'grantable_roles_at_hq'
      | 'grantable_roles_at_other'
      | 'roles'
      | 'roles_at_base'
      | 'roles_at_hq'
      | 'roles_at_other';
  }>;
};

export type GetCorporationsCorporationIdRolesHistoryResponse =
  GetCorporationsCorporationIdRolesHistoryResponses[keyof GetCorporationsCorporationIdRolesHistoryResponses];

export type GetCorporationsCorporationIdShareholdersData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/shareholders/';
};

export type GetCorporationsCorporationIdShareholdersErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdShareholdersError =
  GetCorporationsCorporationIdShareholdersErrors[keyof GetCorporationsCorporationIdShareholdersErrors];

export type GetCorporationsCorporationIdShareholdersResponses = {
  /**
   * List of shareholders
   */
  200: Array<{
    /**
     * share_count integer
     */
    share_count: number;
    /**
     * shareholder_id integer
     */
    shareholder_id: number;
    /**
     * shareholder_type string
     */
    shareholder_type: 'character' | 'corporation';
  }>;
};

export type GetCorporationsCorporationIdShareholdersResponse =
  GetCorporationsCorporationIdShareholdersResponses[keyof GetCorporationsCorporationIdShareholdersResponses];

export type GetCorporationsCorporationIdStandingsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/standings/';
};

export type GetCorporationsCorporationIdStandingsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdStandingsError =
  GetCorporationsCorporationIdStandingsErrors[keyof GetCorporationsCorporationIdStandingsErrors];

export type GetCorporationsCorporationIdStandingsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * from_id integer
     */
    from_id: number;
    /**
     * from_type string
     */
    from_type: 'agent' | 'npc_corp' | 'faction';
    /**
     * standing number
     */
    standing: number;
  }>;
};

export type GetCorporationsCorporationIdStandingsResponse =
  GetCorporationsCorporationIdStandingsResponses[keyof GetCorporationsCorporationIdStandingsResponses];

export type GetCorporationsCorporationIdStarbasesData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/starbases/';
};

export type GetCorporationsCorporationIdStarbasesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdStarbasesError =
  GetCorporationsCorporationIdStarbasesErrors[keyof GetCorporationsCorporationIdStarbasesErrors];

export type GetCorporationsCorporationIdStarbasesResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * The moon this starbase (POS) is anchored on, unanchored POSes do not have this information
     */
    moon_id?: number;
    /**
     * When the POS onlined, for starbases (POSes) in online state
     */
    onlined_since?: string;
    /**
     * When the POS will be out of reinforcement, for starbases (POSes) in reinforced state
     */
    reinforced_until?: string;
    /**
     * Unique ID for this starbase (POS)
     */
    starbase_id: number;
    /**
     * state string
     */
    state?: 'offline' | 'online' | 'onlining' | 'reinforced' | 'unanchoring';
    /**
     * The solar system this starbase (POS) is in, unanchored POSes have this information
     */
    system_id: number;
    /**
     * Starbase (POS) type
     */
    type_id: number;
    /**
     * When the POS started unanchoring, for starbases (POSes) in unanchoring state
     */
    unanchor_at?: string;
  }>;
};

export type GetCorporationsCorporationIdStarbasesResponse =
  GetCorporationsCorporationIdStarbasesResponses[keyof GetCorporationsCorporationIdStarbasesResponses];

export type GetCorporationsCorporationIdStarbasesStarbaseIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
    /**
     * An EVE starbase (POS) ID
     */
    starbase_id: number;
  };
  query: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * The solar system this starbase (POS) is located in,
     */
    system_id: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/starbases/{starbase_id}/';
};

export type GetCorporationsCorporationIdStarbasesStarbaseIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdStarbasesStarbaseIdError =
  GetCorporationsCorporationIdStarbasesStarbaseIdErrors[keyof GetCorporationsCorporationIdStarbasesStarbaseIdErrors];

export type GetCorporationsCorporationIdStarbasesStarbaseIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * allow_alliance_members boolean
     */
    allow_alliance_members: boolean;
    /**
     * allow_corporation_members boolean
     */
    allow_corporation_members: boolean;
    /**
     * Who can anchor starbase (POS) and its structures
     */
    anchor:
      | 'alliance_member'
      | 'config_starbase_equipment_role'
      | 'corporation_member'
      | 'starbase_fuel_technician_role';
    /**
     * attack_if_at_war boolean
     */
    attack_if_at_war: boolean;
    /**
     * attack_if_other_security_status_dropping boolean
     */
    attack_if_other_security_status_dropping: boolean;
    /**
     * Starbase (POS) will attack if target's security standing is lower than this value
     */
    attack_security_status_threshold?: number;
    /**
     * Starbase (POS) will attack if target's standing is lower than this value
     */
    attack_standing_threshold?: number;
    /**
     * Who can take fuel blocks out of the starbase (POS)'s fuel bay
     */
    fuel_bay_take:
      | 'alliance_member'
      | 'config_starbase_equipment_role'
      | 'corporation_member'
      | 'starbase_fuel_technician_role';
    /**
     * Who can view the starbase (POS)'s fule bay. Characters either need to have required role or belong to the starbase (POS) owner's corporation or alliance, as described by the enum, all other access settings follows the same scheme
     */
    fuel_bay_view:
      | 'alliance_member'
      | 'config_starbase_equipment_role'
      | 'corporation_member'
      | 'starbase_fuel_technician_role';
    /**
     * Fuel blocks and other things that will be consumed when operating a starbase (POS)
     */
    fuels?: Array<{
      /**
       * quantity integer
       */
      quantity: number;
      /**
       * type_id integer
       */
      type_id: number;
    }>;
    /**
     * Who can offline starbase (POS) and its structures
     */
    offline:
      | 'alliance_member'
      | 'config_starbase_equipment_role'
      | 'corporation_member'
      | 'starbase_fuel_technician_role';
    /**
     * Who can online starbase (POS) and its structures
     */
    online:
      | 'alliance_member'
      | 'config_starbase_equipment_role'
      | 'corporation_member'
      | 'starbase_fuel_technician_role';
    /**
     * Who can unanchor starbase (POS) and its structures
     */
    unanchor:
      | 'alliance_member'
      | 'config_starbase_equipment_role'
      | 'corporation_member'
      | 'starbase_fuel_technician_role';
    /**
     * True if the starbase (POS) is using alliance standings, otherwise using corporation's
     */
    use_alliance_standings: boolean;
  };
};

export type GetCorporationsCorporationIdStarbasesStarbaseIdResponse =
  GetCorporationsCorporationIdStarbasesStarbaseIdResponses[keyof GetCorporationsCorporationIdStarbasesStarbaseIdResponses];

export type GetCorporationsCorporationIdStructuresData = {
  body?: never;
  headers?: {
    /**
     * Language to use in the response
     */
    'Accept-Language'?:
      | 'en'
      | 'en-us'
      | 'de'
      | 'fr'
      | 'ja'
      | 'ru'
      | 'zh'
      | 'ko'
      | 'es';
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Language to use in the response, takes precedence over Accept-Language
     */
    language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/structures/';
};

export type GetCorporationsCorporationIdStructuresErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdStructuresError =
  GetCorporationsCorporationIdStructuresErrors[keyof GetCorporationsCorporationIdStructuresErrors];

export type GetCorporationsCorporationIdStructuresResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * ID of the corporation that owns the structure
     */
    corporation_id: number;
    /**
     * Date on which the structure will run out of fuel
     */
    fuel_expires?: string;
    /**
     * The structure name
     */
    name?: string;
    /**
     * The date and time when the structure's newly requested reinforcement times (e.g. next_reinforce_hour and next_reinforce_day) will take effect
     */
    next_reinforce_apply?: string;
    /**
     * The requested change to reinforce_hour that will take effect at the time shown by next_reinforce_apply
     */
    next_reinforce_hour?: number;
    /**
     * The id of the ACL profile for this citadel
     */
    profile_id: number;
    /**
     * The hour of day that determines the four hour window when the structure will randomly exit its reinforcement periods and become vulnerable to attack against its armor and/or hull. The structure will become vulnerable at a random time that is +/- 2 hours centered on the value of this property
     */
    reinforce_hour?: number;
    /**
     * Contains a list of service upgrades, and their state
     */
    services?: Array<{
      /**
       * name string
       */
      name: string;
      /**
       * state string
       */
      state: 'online' | 'offline' | 'cleanup';
    }>;
    /**
     * state string
     */
    state:
      | 'anchor_vulnerable'
      | 'anchoring'
      | 'armor_reinforce'
      | 'armor_vulnerable'
      | 'deploy_vulnerable'
      | 'fitting_invulnerable'
      | 'hull_reinforce'
      | 'hull_vulnerable'
      | 'online_deprecated'
      | 'onlining_vulnerable'
      | 'shield_vulnerable'
      | 'unanchored'
      | 'unknown';
    /**
     * Date at which the structure will move to it's next state
     */
    state_timer_end?: string;
    /**
     * Date at which the structure entered it's current state
     */
    state_timer_start?: string;
    /**
     * The Item ID of the structure
     */
    structure_id: number;
    /**
     * The solar system the structure is in
     */
    system_id: number;
    /**
     * The type id of the structure
     */
    type_id: number;
    /**
     * Date at which the structure will unanchor
     */
    unanchors_at?: string;
  }>;
};

export type GetCorporationsCorporationIdStructuresResponse =
  GetCorporationsCorporationIdStructuresResponses[keyof GetCorporationsCorporationIdStructuresResponses];

export type GetCorporationsCorporationIdTitlesData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/titles/';
};

export type GetCorporationsCorporationIdTitlesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdTitlesError =
  GetCorporationsCorporationIdTitlesErrors[keyof GetCorporationsCorporationIdTitlesErrors];

export type GetCorporationsCorporationIdTitlesResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * grantable_roles array
     */
    grantable_roles?: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
    /**
     * grantable_roles_at_base array
     */
    grantable_roles_at_base?: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
    /**
     * grantable_roles_at_hq array
     */
    grantable_roles_at_hq?: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
    /**
     * grantable_roles_at_other array
     */
    grantable_roles_at_other?: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
    /**
     * name string
     */
    name?: string;
    /**
     * roles array
     */
    roles?: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
    /**
     * roles_at_base array
     */
    roles_at_base?: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
    /**
     * roles_at_hq array
     */
    roles_at_hq?: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
    /**
     * roles_at_other array
     */
    roles_at_other?: Array<
      | 'Account_Take_1'
      | 'Account_Take_2'
      | 'Account_Take_3'
      | 'Account_Take_4'
      | 'Account_Take_5'
      | 'Account_Take_6'
      | 'Account_Take_7'
      | 'Accountant'
      | 'Auditor'
      | 'Brand_Manager'
      | 'Communications_Officer'
      | 'Config_Equipment'
      | 'Config_Starbase_Equipment'
      | 'Container_Take_1'
      | 'Container_Take_2'
      | 'Container_Take_3'
      | 'Container_Take_4'
      | 'Container_Take_5'
      | 'Container_Take_6'
      | 'Container_Take_7'
      | 'Contract_Manager'
      | 'Deliveries_Container_Take'
      | 'Deliveries_Query'
      | 'Deliveries_Take'
      | 'Diplomat'
      | 'Director'
      | 'Factory_Manager'
      | 'Fitting_Manager'
      | 'Hangar_Query_1'
      | 'Hangar_Query_2'
      | 'Hangar_Query_3'
      | 'Hangar_Query_4'
      | 'Hangar_Query_5'
      | 'Hangar_Query_6'
      | 'Hangar_Query_7'
      | 'Hangar_Take_1'
      | 'Hangar_Take_2'
      | 'Hangar_Take_3'
      | 'Hangar_Take_4'
      | 'Hangar_Take_5'
      | 'Hangar_Take_6'
      | 'Hangar_Take_7'
      | 'Junior_Accountant'
      | 'Personnel_Manager'
      | 'Project_Manager'
      | 'Rent_Factory_Facility'
      | 'Rent_Office'
      | 'Rent_Research_Facility'
      | 'Security_Officer'
      | 'Skill_Plan_Manager'
      | 'Starbase_Defense_Operator'
      | 'Starbase_Fuel_Technician'
      | 'Station_Manager'
      | 'Trader'
    >;
    /**
     * title_id integer
     */
    title_id?: number;
  }>;
};

export type GetCorporationsCorporationIdTitlesResponse =
  GetCorporationsCorporationIdTitlesResponses[keyof GetCorporationsCorporationIdTitlesResponses];

export type GetCorporationsCorporationIdWalletsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/wallets/';
};

export type GetCorporationsCorporationIdWalletsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdWalletsError =
  GetCorporationsCorporationIdWalletsErrors[keyof GetCorporationsCorporationIdWalletsErrors];

export type GetCorporationsCorporationIdWalletsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * balance number
     */
    balance: number;
    /**
     * division integer
     */
    division: number;
  }>;
};

export type GetCorporationsCorporationIdWalletsResponse =
  GetCorporationsCorporationIdWalletsResponses[keyof GetCorporationsCorporationIdWalletsResponses];

export type GetCorporationsCorporationIdWalletsDivisionJournalData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
    /**
     * Wallet key of the division to fetch journals from
     */
    division: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/wallets/{division}/journal/';
};

export type GetCorporationsCorporationIdWalletsDivisionJournalErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdWalletsDivisionJournalError =
  GetCorporationsCorporationIdWalletsDivisionJournalErrors[keyof GetCorporationsCorporationIdWalletsDivisionJournalErrors];

export type GetCorporationsCorporationIdWalletsDivisionJournalResponses = {
  /**
   * Journal entries
   */
  200: Array<{
    /**
     * The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet and negative when ISK is withdrawn
     */
    amount?: number;
    /**
     * Wallet balance after transaction occurred
     */
    balance?: number;
    /**
     * An ID that gives extra context to the particular transaction. Because of legacy reasons the context is completely different per ref_type and means different things. It is also possible to not have a context_id
     */
    context_id?: number;
    /**
     * The type of the given context_id if present
     */
    context_id_type?:
      | 'structure_id'
      | 'station_id'
      | 'market_transaction_id'
      | 'character_id'
      | 'corporation_id'
      | 'alliance_id'
      | 'eve_system'
      | 'industry_job_id'
      | 'contract_id'
      | 'planet_id'
      | 'system_id'
      | 'type_id';
    /**
     * Date and time of transaction
     */
    date: string;
    /**
     * The reason for the transaction, mirrors what is seen in the client
     */
    description: string;
    /**
     * The id of the first party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
     */
    first_party_id?: number;
    /**
     * Unique journal reference ID
     */
    id: number;
    /**
     * The user stated reason for the transaction. Only applies to some ref_types
     */
    reason?: string;
    /**
     * "The transaction type for the given. transaction. Different transaction types will populate different attributes. Note: If you have an existing XML API application that is using ref_types, you will need to know which string ESI ref_type maps to which integer. You can look at the following file to see string->int mappings: https://github.com/ccpgames/eve-glue/blob/master/eve_glue/wallet_journal_ref.py"
     */
    ref_type:
      | 'acceleration_gate_fee'
      | 'advertisement_listing_fee'
      | 'agent_donation'
      | 'agent_location_services'
      | 'agent_miscellaneous'
      | 'agent_mission_collateral_paid'
      | 'agent_mission_collateral_refunded'
      | 'agent_mission_reward'
      | 'agent_mission_reward_corporation_tax'
      | 'agent_mission_time_bonus_reward'
      | 'agent_mission_time_bonus_reward_corporation_tax'
      | 'agent_security_services'
      | 'agent_services_rendered'
      | 'agents_preward'
      | 'alliance_maintainance_fee'
      | 'alliance_registration_fee'
      | 'allignment_based_gate_toll'
      | 'asset_safety_recovery_tax'
      | 'bounty'
      | 'bounty_prize'
      | 'bounty_prize_corporation_tax'
      | 'bounty_prizes'
      | 'bounty_reimbursement'
      | 'bounty_surcharge'
      | 'brokers_fee'
      | 'clone_activation'
      | 'clone_transfer'
      | 'contraband_fine'
      | 'contract_auction_bid'
      | 'contract_auction_bid_corp'
      | 'contract_auction_bid_refund'
      | 'contract_auction_sold'
      | 'contract_brokers_fee'
      | 'contract_brokers_fee_corp'
      | 'contract_collateral'
      | 'contract_collateral_deposited_corp'
      | 'contract_collateral_payout'
      | 'contract_collateral_refund'
      | 'contract_deposit'
      | 'contract_deposit_corp'
      | 'contract_deposit_refund'
      | 'contract_deposit_sales_tax'
      | 'contract_price'
      | 'contract_price_payment_corp'
      | 'contract_reversal'
      | 'contract_reward'
      | 'contract_reward_deposited'
      | 'contract_reward_deposited_corp'
      | 'contract_reward_refund'
      | 'contract_sales_tax'
      | 'copying'
      | 'corporate_reward_payout'
      | 'corporate_reward_tax'
      | 'corporation_account_withdrawal'
      | 'corporation_bulk_payment'
      | 'corporation_dividend_payment'
      | 'corporation_liquidation'
      | 'corporation_logo_change_cost'
      | 'corporation_payment'
      | 'corporation_registration_fee'
      | 'cosmetic_market_component_item_purchase'
      | 'cosmetic_market_skin_purchase'
      | 'cosmetic_market_skin_sale'
      | 'cosmetic_market_skin_sale_broker_fee'
      | 'cosmetic_market_skin_sale_tax'
      | 'cosmetic_market_skin_transaction'
      | 'courier_mission_escrow'
      | 'cspa'
      | 'cspaofflinerefund'
      | 'daily_challenge_reward'
      | 'daily_goal_payouts'
      | 'daily_goal_payouts_tax'
      | 'datacore_fee'
      | 'dna_modification_fee'
      | 'docking_fee'
      | 'duel_wager_escrow'
      | 'duel_wager_payment'
      | 'duel_wager_refund'
      | 'ess_escrow_transfer'
      | 'external_trade_delivery'
      | 'external_trade_freeze'
      | 'external_trade_thaw'
      | 'factory_slot_rental_fee'
      | 'flux_payout'
      | 'flux_tax'
      | 'flux_ticket_repayment'
      | 'flux_ticket_sale'
      | 'gm_cash_transfer'
      | 'industry_job_tax'
      | 'infrastructure_hub_maintenance'
      | 'inheritance'
      | 'insurance'
      | 'insurgency_corruption_contribution_reward'
      | 'insurgency_suppression_contribution_reward'
      | 'item_trader_payment'
      | 'jump_clone_activation_fee'
      | 'jump_clone_installation_fee'
      | 'kill_right_fee'
      | 'lp_store'
      | 'manufacturing'
      | 'market_escrow'
      | 'market_fine_paid'
      | 'market_provider_tax'
      | 'market_transaction'
      | 'medal_creation'
      | 'medal_issued'
      | 'milestone_reward_payment'
      | 'mission_completion'
      | 'mission_cost'
      | 'mission_expiration'
      | 'mission_reward'
      | 'office_rental_fee'
      | 'operation_bonus'
      | 'opportunity_reward'
      | 'planetary_construction'
      | 'planetary_export_tax'
      | 'planetary_import_tax'
      | 'player_donation'
      | 'player_trading'
      | 'project_discovery_reward'
      | 'project_discovery_tax'
      | 'project_payouts'
      | 'reaction'
      | 'redeemed_isk_token'
      | 'release_of_impounded_property'
      | 'repair_bill'
      | 'reprocessing_tax'
      | 'researching_material_productivity'
      | 'researching_technology'
      | 'researching_time_productivity'
      | 'resource_wars_reward'
      | 'reverse_engineering'
      | 'season_challenge_reward'
      | 'security_processing_fee'
      | 'shares'
      | 'skill_purchase'
      | 'sovereignity_bill'
      | 'store_purchase'
      | 'store_purchase_refund'
      | 'structure_gate_jump'
      | 'transaction_tax'
      | 'under_construction'
      | 'upkeep_adjustment_fee'
      | 'war_ally_contract'
      | 'war_fee'
      | 'war_fee_surrender';
    /**
     * The id of the second party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
     */
    second_party_id?: number;
    /**
     * Tax amount received. Only applies to tax related transactions
     */
    tax?: number;
    /**
     * The corporation ID receiving any tax paid. Only applies to tax related transactions
     */
    tax_receiver_id?: number;
  }>;
};

export type GetCorporationsCorporationIdWalletsDivisionJournalResponse =
  GetCorporationsCorporationIdWalletsDivisionJournalResponses[keyof GetCorporationsCorporationIdWalletsDivisionJournalResponses];

export type GetCorporationsCorporationIdWalletsDivisionTransactionsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
    /**
     * Wallet key of the division to fetch journals from
     */
    division: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Only show journal entries happened before the transaction referenced by this id
     */
    from_id?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/corporations/{corporation_id}/wallets/{division}/transactions/';
};

export type GetCorporationsCorporationIdWalletsDivisionTransactionsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetCorporationsCorporationIdWalletsDivisionTransactionsError =
  GetCorporationsCorporationIdWalletsDivisionTransactionsErrors[keyof GetCorporationsCorporationIdWalletsDivisionTransactionsErrors];

export type GetCorporationsCorporationIdWalletsDivisionTransactionsResponses = {
  /**
   * Wallet transactions
   */
  200: Array<{
    /**
     * client_id integer
     */
    client_id: number;
    /**
     * Date and time of transaction
     */
    date: string;
    /**
     * is_buy boolean
     */
    is_buy: boolean;
    /**
     * -1 if there is no corresponding wallet journal entry
     */
    journal_ref_id: number;
    /**
     * location_id integer
     */
    location_id: number;
    /**
     * quantity integer
     */
    quantity: number;
    /**
     * Unique transaction ID
     */
    transaction_id: number;
    /**
     * type_id integer
     */
    type_id: number;
    /**
     * Amount paid per unit
     */
    unit_price: number;
  }>;
};

export type GetCorporationsCorporationIdWalletsDivisionTransactionsResponse =
  GetCorporationsCorporationIdWalletsDivisionTransactionsResponses[keyof GetCorporationsCorporationIdWalletsDivisionTransactionsResponses];

export type GetDogmaAttributesData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/dogma/attributes/';
};

export type GetDogmaAttributesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetDogmaAttributesError =
  GetDogmaAttributesErrors[keyof GetDogmaAttributesErrors];

export type GetDogmaAttributesResponses = {
  /**
   * 200 ok array
   */
  200: Array<number>;
};

export type GetDogmaAttributesResponse =
  GetDogmaAttributesResponses[keyof GetDogmaAttributesResponses];

export type GetDogmaAttributesAttributeIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * A dogma attribute ID
     */
    attribute_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/dogma/attributes/{attribute_id}/';
};

export type GetDogmaAttributesAttributeIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetDogmaAttributesAttributeIdError =
  GetDogmaAttributesAttributeIdErrors[keyof GetDogmaAttributesAttributeIdErrors];

export type GetDogmaAttributesAttributeIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * attribute_id integer
     */
    attribute_id: number;
    /**
     * default_value number
     */
    default_value?: number;
    /**
     * description string
     */
    description?: string;
    /**
     * display_name string
     */
    display_name?: string;
    /**
     * high_is_good boolean
     */
    high_is_good?: boolean;
    /**
     * icon_id integer
     */
    icon_id?: number;
    /**
     * name string
     */
    name?: string;
    /**
     * published boolean
     */
    published?: boolean;
    /**
     * stackable boolean
     */
    stackable?: boolean;
    /**
     * unit_id integer
     */
    unit_id?: number;
  };
};

export type GetDogmaAttributesAttributeIdResponse =
  GetDogmaAttributesAttributeIdResponses[keyof GetDogmaAttributesAttributeIdResponses];

export type GetDogmaDynamicItemsTypeIdItemIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * item_id integer
     */
    item_id: number;
    /**
     * type_id integer
     */
    type_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/dogma/dynamic/items/{type_id}/{item_id}/';
};

export type GetDogmaDynamicItemsTypeIdItemIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetDogmaDynamicItemsTypeIdItemIdError =
  GetDogmaDynamicItemsTypeIdItemIdErrors[keyof GetDogmaDynamicItemsTypeIdItemIdErrors];

export type GetDogmaDynamicItemsTypeIdItemIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * The ID of the character who created the item
     */
    created_by: number;
    /**
     * dogma_attributes array
     */
    dogma_attributes: Array<{
      /**
       * attribute_id integer
       */
      attribute_id: number;
      /**
       * value number
       */
      value: number;
    }>;
    /**
     * dogma_effects array
     */
    dogma_effects: Array<{
      /**
       * effect_id integer
       */
      effect_id: number;
      /**
       * is_default boolean
       */
      is_default: boolean;
    }>;
    /**
     * The type ID of the mutator used to generate the dynamic item.
     */
    mutator_type_id: number;
    /**
     * The type ID of the source item the mutator was applied to create the dynamic item.
     */
    source_type_id: number;
  };
};

export type GetDogmaDynamicItemsTypeIdItemIdResponse =
  GetDogmaDynamicItemsTypeIdItemIdResponses[keyof GetDogmaDynamicItemsTypeIdItemIdResponses];

export type GetDogmaEffectsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/dogma/effects/';
};

export type GetDogmaEffectsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetDogmaEffectsError =
  GetDogmaEffectsErrors[keyof GetDogmaEffectsErrors];

export type GetDogmaEffectsResponses = {
  /**
   * 200 ok array
   */
  200: Array<number>;
};

export type GetDogmaEffectsResponse =
  GetDogmaEffectsResponses[keyof GetDogmaEffectsResponses];

export type GetDogmaEffectsEffectIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * A dogma effect ID
     */
    effect_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/dogma/effects/{effect_id}/';
};

export type GetDogmaEffectsEffectIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetDogmaEffectsEffectIdError =
  GetDogmaEffectsEffectIdErrors[keyof GetDogmaEffectsEffectIdErrors];

export type GetDogmaEffectsEffectIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * description string
     */
    description?: string;
    /**
     * disallow_auto_repeat boolean
     */
    disallow_auto_repeat?: boolean;
    /**
     * discharge_attribute_id integer
     */
    discharge_attribute_id?: number;
    /**
     * display_name string
     */
    display_name?: string;
    /**
     * duration_attribute_id integer
     */
    duration_attribute_id?: number;
    /**
     * effect_category integer
     */
    effect_category?: number;
    /**
     * effect_id integer
     */
    effect_id: number;
    /**
     * electronic_chance boolean
     */
    electronic_chance?: boolean;
    /**
     * falloff_attribute_id integer
     */
    falloff_attribute_id?: number;
    /**
     * icon_id integer
     */
    icon_id?: number;
    /**
     * is_assistance boolean
     */
    is_assistance?: boolean;
    /**
     * is_offensive boolean
     */
    is_offensive?: boolean;
    /**
     * is_warp_safe boolean
     */
    is_warp_safe?: boolean;
    /**
     * modifiers array
     */
    modifiers?: Array<{
      /**
       * domain string
       */
      domain?: string;
      /**
       * effect_id integer
       */
      effect_id?: number;
      /**
       * func string
       */
      func: string;
      /**
       * modified_attribute_id integer
       */
      modified_attribute_id?: number;
      /**
       * modifying_attribute_id integer
       */
      modifying_attribute_id?: number;
      /**
       * operator integer
       */
      operator?: number;
    }>;
    /**
     * name string
     */
    name?: string;
    /**
     * post_expression integer
     */
    post_expression?: number;
    /**
     * pre_expression integer
     */
    pre_expression?: number;
    /**
     * published boolean
     */
    published?: boolean;
    /**
     * range_attribute_id integer
     */
    range_attribute_id?: number;
    /**
     * range_chance boolean
     */
    range_chance?: boolean;
    /**
     * tracking_speed_attribute_id integer
     */
    tracking_speed_attribute_id?: number;
  };
};

export type GetDogmaEffectsEffectIdResponse =
  GetDogmaEffectsEffectIdResponses[keyof GetDogmaEffectsEffectIdResponses];

export type GetFleetsFleetIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * ID for a fleet
     */
    fleet_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/fleets/{fleet_id}/';
};

export type GetFleetsFleetIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetFleetsFleetIdError =
  GetFleetsFleetIdErrors[keyof GetFleetsFleetIdErrors];

export type GetFleetsFleetIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * Is free-move enabled
     */
    is_free_move: boolean;
    /**
     * Does the fleet have an active fleet advertisement
     */
    is_registered: boolean;
    /**
     * Is EVE Voice enabled
     */
    is_voice_enabled: boolean;
    /**
     * Fleet MOTD in CCP flavoured HTML
     */
    motd: string;
  };
};

export type GetFleetsFleetIdResponse =
  GetFleetsFleetIdResponses[keyof GetFleetsFleetIdResponses];

export type PutFleetsFleetIdData = {
  /**
   * new_settings object
   */
  body: {
    /**
     * Should free-move be enabled in the fleet
     */
    is_free_move?: boolean;
    /**
     * New fleet MOTD in CCP flavoured HTML
     */
    motd?: string;
  };
  path: {
    /**
     * ID for a fleet
     */
    fleet_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/fleets/{fleet_id}/';
};

export type PutFleetsFleetIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PutFleetsFleetIdError =
  PutFleetsFleetIdErrors[keyof PutFleetsFleetIdErrors];

export type PutFleetsFleetIdResponses = {
  /**
   * Fleet updated
   */
  204: unknown;
};

export type GetFleetsFleetIdMembersData = {
  body?: never;
  headers?: {
    /**
     * Language to use in the response
     */
    'Accept-Language'?:
      | 'en'
      | 'en-us'
      | 'de'
      | 'fr'
      | 'ja'
      | 'ru'
      | 'zh'
      | 'ko'
      | 'es';
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * ID for a fleet
     */
    fleet_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Language to use in the response, takes precedence over Accept-Language
     */
    language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/fleets/{fleet_id}/members/';
};

export type GetFleetsFleetIdMembersErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetFleetsFleetIdMembersError =
  GetFleetsFleetIdMembersErrors[keyof GetFleetsFleetIdMembersErrors];

export type GetFleetsFleetIdMembersResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * character_id integer
     */
    character_id: number;
    /**
     * join_time string
     */
    join_time: string;
    /**
     * Member’s role in fleet
     */
    role:
      | 'fleet_commander'
      | 'wing_commander'
      | 'squad_commander'
      | 'squad_member';
    /**
     * Localized role names
     */
    role_name: string;
    /**
     * ship_type_id integer
     */
    ship_type_id: number;
    /**
     * Solar system the member is located in
     */
    solar_system_id: number;
    /**
     * ID of the squad the member is in. If not applicable, will be set to -1
     */
    squad_id: number;
    /**
     * Station in which the member is docked in, if applicable
     */
    station_id?: number;
    /**
     * Whether the member take fleet warps
     */
    takes_fleet_warp: boolean;
    /**
     * ID of the wing the member is in. If not applicable, will be set to -1
     */
    wing_id: number;
  }>;
};

export type GetFleetsFleetIdMembersResponse =
  GetFleetsFleetIdMembersResponses[keyof GetFleetsFleetIdMembersResponses];

export type PostFleetsFleetIdMembersData = {
  /**
   * invitation object
   */
  body: {
    /**
     * The character you want to invite
     */
    character_id: number;
    /**
     * If a character is invited with the `fleet_commander` role, neither `wing_id` or `squad_id` should be specified. If a character is invited with the `wing_commander` role, only `wing_id` should be specified. If a character is invited with the `squad_commander` role, both `wing_id` and `squad_id` should be specified. If a character is invited with the `squad_member` role, `wing_id` and `squad_id` should either both be specified or not specified at all. If they aren’t specified, the invited character will join any squad with available positions.
     */
    role:
      | 'fleet_commander'
      | 'wing_commander'
      | 'squad_commander'
      | 'squad_member';
    /**
     * squad_id integer
     */
    squad_id?: number;
    /**
     * wing_id integer
     */
    wing_id?: number;
  };
  path: {
    /**
     * ID for a fleet
     */
    fleet_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/fleets/{fleet_id}/members/';
};

export type PostFleetsFleetIdMembersErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * 422 unprocessable entity object
   */
  422: {
    /**
     * error message
     */
    error?: string;
  };
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PostFleetsFleetIdMembersError =
  PostFleetsFleetIdMembersErrors[keyof PostFleetsFleetIdMembersErrors];

export type PostFleetsFleetIdMembersResponses = {
  /**
   * Fleet invitation sent
   */
  204: unknown;
};

export type DeleteFleetsFleetIdMembersMemberIdData = {
  body?: never;
  path: {
    /**
     * ID for a fleet
     */
    fleet_id: number;
    /**
     * The character ID of a member in this fleet
     */
    member_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/fleets/{fleet_id}/members/{member_id}/';
};

export type DeleteFleetsFleetIdMembersMemberIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type DeleteFleetsFleetIdMembersMemberIdError =
  DeleteFleetsFleetIdMembersMemberIdErrors[keyof DeleteFleetsFleetIdMembersMemberIdErrors];

export type DeleteFleetsFleetIdMembersMemberIdResponses = {
  /**
   * Fleet member kicked
   */
  204: unknown;
};

export type PutFleetsFleetIdMembersMemberIdData = {
  /**
   * movement object
   */
  body: {
    /**
     * If a character is moved to the `fleet_commander` role, neither `wing_id` or `squad_id` should be specified. If a character is moved to the `wing_commander` role, only `wing_id` should be specified. If a character is moved to the `squad_commander` role, both `wing_id` and `squad_id` should be specified. If a character is moved to the `squad_member` role, both `wing_id` and `squad_id` should be specified.
     */
    role:
      | 'fleet_commander'
      | 'wing_commander'
      | 'squad_commander'
      | 'squad_member';
    /**
     * squad_id integer
     */
    squad_id?: number;
    /**
     * wing_id integer
     */
    wing_id?: number;
  };
  path: {
    /**
     * ID for a fleet
     */
    fleet_id: number;
    /**
     * The character ID of a member in this fleet
     */
    member_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/fleets/{fleet_id}/members/{member_id}/';
};

export type PutFleetsFleetIdMembersMemberIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * 422 unprocessable entity object
   */
  422: {
    /**
     * error message
     */
    error?: string;
  };
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PutFleetsFleetIdMembersMemberIdError =
  PutFleetsFleetIdMembersMemberIdErrors[keyof PutFleetsFleetIdMembersMemberIdErrors];

export type PutFleetsFleetIdMembersMemberIdResponses = {
  /**
   * Fleet invitation sent
   */
  204: unknown;
};

export type DeleteFleetsFleetIdSquadsSquadIdData = {
  body?: never;
  path: {
    /**
     * ID for a fleet
     */
    fleet_id: number;
    /**
     * The squad to delete
     */
    squad_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/fleets/{fleet_id}/squads/{squad_id}/';
};

export type DeleteFleetsFleetIdSquadsSquadIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type DeleteFleetsFleetIdSquadsSquadIdError =
  DeleteFleetsFleetIdSquadsSquadIdErrors[keyof DeleteFleetsFleetIdSquadsSquadIdErrors];

export type DeleteFleetsFleetIdSquadsSquadIdResponses = {
  /**
   * Squad deleted
   */
  204: unknown;
};

export type PutFleetsFleetIdSquadsSquadIdData = {
  /**
   * naming object
   */
  body: {
    /**
     * name string
     */
    name: string;
  };
  path: {
    /**
     * ID for a fleet
     */
    fleet_id: number;
    /**
     * The squad to rename
     */
    squad_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/fleets/{fleet_id}/squads/{squad_id}/';
};

export type PutFleetsFleetIdSquadsSquadIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PutFleetsFleetIdSquadsSquadIdError =
  PutFleetsFleetIdSquadsSquadIdErrors[keyof PutFleetsFleetIdSquadsSquadIdErrors];

export type PutFleetsFleetIdSquadsSquadIdResponses = {
  /**
   * Squad renamed
   */
  204: unknown;
};

export type GetFleetsFleetIdWingsData = {
  body?: never;
  headers?: {
    /**
     * Language to use in the response
     */
    'Accept-Language'?:
      | 'en'
      | 'en-us'
      | 'de'
      | 'fr'
      | 'ja'
      | 'ru'
      | 'zh'
      | 'ko'
      | 'es';
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * ID for a fleet
     */
    fleet_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Language to use in the response, takes precedence over Accept-Language
     */
    language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/fleets/{fleet_id}/wings/';
};

export type GetFleetsFleetIdWingsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetFleetsFleetIdWingsError =
  GetFleetsFleetIdWingsErrors[keyof GetFleetsFleetIdWingsErrors];

export type GetFleetsFleetIdWingsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * id integer
     */
    id: number;
    /**
     * name string
     */
    name: string;
    /**
     * squads array
     */
    squads: Array<{
      /**
       * id integer
       */
      id: number;
      /**
       * name string
       */
      name: string;
    }>;
  }>;
};

export type GetFleetsFleetIdWingsResponse =
  GetFleetsFleetIdWingsResponses[keyof GetFleetsFleetIdWingsResponses];

export type PostFleetsFleetIdWingsData = {
  body?: never;
  path: {
    /**
     * ID for a fleet
     */
    fleet_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/fleets/{fleet_id}/wings/';
};

export type PostFleetsFleetIdWingsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PostFleetsFleetIdWingsError =
  PostFleetsFleetIdWingsErrors[keyof PostFleetsFleetIdWingsErrors];

export type PostFleetsFleetIdWingsResponses = {
  /**
   * 201 created object
   */
  201: {
    /**
     * The wing_id of the newly created wing
     */
    wing_id: number;
  };
};

export type PostFleetsFleetIdWingsResponse =
  PostFleetsFleetIdWingsResponses[keyof PostFleetsFleetIdWingsResponses];

export type DeleteFleetsFleetIdWingsWingIdData = {
  body?: never;
  path: {
    /**
     * ID for a fleet
     */
    fleet_id: number;
    /**
     * The wing to delete
     */
    wing_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/fleets/{fleet_id}/wings/{wing_id}/';
};

export type DeleteFleetsFleetIdWingsWingIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type DeleteFleetsFleetIdWingsWingIdError =
  DeleteFleetsFleetIdWingsWingIdErrors[keyof DeleteFleetsFleetIdWingsWingIdErrors];

export type DeleteFleetsFleetIdWingsWingIdResponses = {
  /**
   * Wing deleted
   */
  204: unknown;
};

export type PutFleetsFleetIdWingsWingIdData = {
  /**
   * naming object
   */
  body: {
    /**
     * name string
     */
    name: string;
  };
  path: {
    /**
     * ID for a fleet
     */
    fleet_id: number;
    /**
     * The wing to rename
     */
    wing_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/fleets/{fleet_id}/wings/{wing_id}/';
};

export type PutFleetsFleetIdWingsWingIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PutFleetsFleetIdWingsWingIdError =
  PutFleetsFleetIdWingsWingIdErrors[keyof PutFleetsFleetIdWingsWingIdErrors];

export type PutFleetsFleetIdWingsWingIdResponses = {
  /**
   * Wing renamed
   */
  204: unknown;
};

export type PostFleetsFleetIdWingsWingIdSquadsData = {
  body?: never;
  path: {
    /**
     * ID for a fleet
     */
    fleet_id: number;
    /**
     * The wing_id to create squad in
     */
    wing_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/fleets/{fleet_id}/wings/{wing_id}/squads/';
};

export type PostFleetsFleetIdWingsWingIdSquadsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PostFleetsFleetIdWingsWingIdSquadsError =
  PostFleetsFleetIdWingsWingIdSquadsErrors[keyof PostFleetsFleetIdWingsWingIdSquadsErrors];

export type PostFleetsFleetIdWingsWingIdSquadsResponses = {
  /**
   * 201 created object
   */
  201: {
    /**
     * The squad_id of the newly created squad
     */
    squad_id: number;
  };
};

export type PostFleetsFleetIdWingsWingIdSquadsResponse =
  PostFleetsFleetIdWingsWingIdSquadsResponses[keyof PostFleetsFleetIdWingsWingIdSquadsResponses];

export type GetFwLeaderboardsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/fw/leaderboards/';
};

export type GetFwLeaderboardsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetFwLeaderboardsError =
  GetFwLeaderboardsErrors[keyof GetFwLeaderboardsErrors];

export type GetFwLeaderboardsResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * Top 4 rankings of factions by number of kills from yesterday, last week and in total
     */
    kills: {
      /**
       * Top 4 ranking of factions active in faction warfare by total kills. A faction is considered "active" if they have participated in faction warfare in the past 14 days
       */
      active_total: Array<{
        /**
         * Amount of kills
         */
        amount?: number;
        /**
         * faction_id integer
         */
        faction_id?: number;
      }>;
      /**
       * Top 4 ranking of factions by kills in the past week
       */
      last_week: Array<{
        /**
         * Amount of kills
         */
        amount?: number;
        /**
         * faction_id integer
         */
        faction_id?: number;
      }>;
      /**
       * Top 4 ranking of factions by kills in the past day
       */
      yesterday: Array<{
        /**
         * Amount of kills
         */
        amount?: number;
        /**
         * faction_id integer
         */
        faction_id?: number;
      }>;
    };
    /**
     * Top 4 rankings of factions by victory points from yesterday, last week and in total
     */
    victory_points: {
      /**
       * Top 4 ranking of factions active in faction warfare by total victory points. A faction is considered "active" if they have participated in faction warfare in the past 14 days
       */
      active_total: Array<{
        /**
         * Amount of victory points
         */
        amount?: number;
        /**
         * faction_id integer
         */
        faction_id?: number;
      }>;
      /**
       * Top 4 ranking of factions by victory points in the past week
       */
      last_week: Array<{
        /**
         * Amount of victory points
         */
        amount?: number;
        /**
         * faction_id integer
         */
        faction_id?: number;
      }>;
      /**
       * Top 4 ranking of factions by victory points in the past day
       */
      yesterday: Array<{
        /**
         * Amount of victory points
         */
        amount?: number;
        /**
         * faction_id integer
         */
        faction_id?: number;
      }>;
    };
  };
};

export type GetFwLeaderboardsResponse =
  GetFwLeaderboardsResponses[keyof GetFwLeaderboardsResponses];

export type GetFwLeaderboardsCharactersData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/fw/leaderboards/characters/';
};

export type GetFwLeaderboardsCharactersErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetFwLeaderboardsCharactersError =
  GetFwLeaderboardsCharactersErrors[keyof GetFwLeaderboardsCharactersErrors];

export type GetFwLeaderboardsCharactersResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * Top 100 rankings of pilots by number of kills from yesterday, last week and in total
     */
    kills: {
      /**
       * Top 100 ranking of pilots active in faction warfare by total kills. A pilot is considered "active" if they have participated in faction warfare in the past 14 days
       */
      active_total: Array<{
        /**
         * Amount of kills
         */
        amount?: number;
        /**
         * character_id integer
         */
        character_id?: number;
      }>;
      /**
       * Top 100 ranking of pilots by kills in the past week
       */
      last_week: Array<{
        /**
         * Amount of kills
         */
        amount?: number;
        /**
         * character_id integer
         */
        character_id?: number;
      }>;
      /**
       * Top 100 ranking of pilots by kills in the past day
       */
      yesterday: Array<{
        /**
         * Amount of kills
         */
        amount?: number;
        /**
         * character_id integer
         */
        character_id?: number;
      }>;
    };
    /**
     * Top 100 rankings of pilots by victory points from yesterday, last week and in total
     */
    victory_points: {
      /**
       * Top 100 ranking of pilots active in faction warfare by total victory points. A pilot is considered "active" if they have participated in faction warfare in the past 14 days
       */
      active_total: Array<{
        /**
         * Amount of victory points
         */
        amount?: number;
        /**
         * character_id integer
         */
        character_id?: number;
      }>;
      /**
       * Top 100 ranking of pilots by victory points in the past week
       */
      last_week: Array<{
        /**
         * Amount of victory points
         */
        amount?: number;
        /**
         * character_id integer
         */
        character_id?: number;
      }>;
      /**
       * Top 100 ranking of pilots by victory points in the past day
       */
      yesterday: Array<{
        /**
         * Amount of victory points
         */
        amount?: number;
        /**
         * character_id integer
         */
        character_id?: number;
      }>;
    };
  };
};

export type GetFwLeaderboardsCharactersResponse =
  GetFwLeaderboardsCharactersResponses[keyof GetFwLeaderboardsCharactersResponses];

export type GetFwLeaderboardsCorporationsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/fw/leaderboards/corporations/';
};

export type GetFwLeaderboardsCorporationsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetFwLeaderboardsCorporationsError =
  GetFwLeaderboardsCorporationsErrors[keyof GetFwLeaderboardsCorporationsErrors];

export type GetFwLeaderboardsCorporationsResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * Top 10 rankings of corporations by number of kills from yesterday, last week and in total
     */
    kills: {
      /**
       * Top 10 ranking of corporations active in faction warfare by total kills. A corporation is considered "active" if they have participated in faction warfare in the past 14 days
       */
      active_total: Array<{
        /**
         * Amount of kills
         */
        amount?: number;
        /**
         * corporation_id integer
         */
        corporation_id?: number;
      }>;
      /**
       * Top 10 ranking of corporations by kills in the past week
       */
      last_week: Array<{
        /**
         * Amount of kills
         */
        amount?: number;
        /**
         * corporation_id integer
         */
        corporation_id?: number;
      }>;
      /**
       * Top 10 ranking of corporations by kills in the past day
       */
      yesterday: Array<{
        /**
         * Amount of kills
         */
        amount?: number;
        /**
         * corporation_id integer
         */
        corporation_id?: number;
      }>;
    };
    /**
     * Top 10 rankings of corporations by victory points from yesterday, last week and in total
     */
    victory_points: {
      /**
       * Top 10 ranking of corporations active in faction warfare by total victory points. A corporation is considered "active" if they have participated in faction warfare in the past 14 days
       */
      active_total: Array<{
        /**
         * Amount of victory points
         */
        amount?: number;
        /**
         * corporation_id integer
         */
        corporation_id?: number;
      }>;
      /**
       * Top 10 ranking of corporations by victory points in the past week
       */
      last_week: Array<{
        /**
         * Amount of victory points
         */
        amount?: number;
        /**
         * corporation_id integer
         */
        corporation_id?: number;
      }>;
      /**
       * Top 10 ranking of corporations by victory points in the past day
       */
      yesterday: Array<{
        /**
         * Amount of victory points
         */
        amount?: number;
        /**
         * corporation_id integer
         */
        corporation_id?: number;
      }>;
    };
  };
};

export type GetFwLeaderboardsCorporationsResponse =
  GetFwLeaderboardsCorporationsResponses[keyof GetFwLeaderboardsCorporationsResponses];

export type GetFwStatsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/fw/stats/';
};

export type GetFwStatsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetFwStatsError = GetFwStatsErrors[keyof GetFwStatsErrors];

export type GetFwStatsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * faction_id integer
     */
    faction_id: number;
    /**
     * Summary of kills against an enemy faction for the given faction
     */
    kills: {
      /**
       * Last week's total number of kills against enemy factions
       */
      last_week: number;
      /**
       * Total number of kills against enemy factions since faction warfare began
       */
      total: number;
      /**
       * Yesterday's total number of kills against enemy factions
       */
      yesterday: number;
    };
    /**
     * How many pilots fight for the given faction
     */
    pilots: number;
    /**
     * The number of solar systems controlled by the given faction
     */
    systems_controlled: number;
    /**
     * Summary of victory points gained for the given faction
     */
    victory_points: {
      /**
       * Last week's victory points gained
       */
      last_week: number;
      /**
       * Total victory points gained since faction warfare began
       */
      total: number;
      /**
       * Yesterday's victory points gained
       */
      yesterday: number;
    };
  }>;
};

export type GetFwStatsResponse = GetFwStatsResponses[keyof GetFwStatsResponses];

export type GetFwSystemsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/fw/systems/';
};

export type GetFwSystemsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetFwSystemsError = GetFwSystemsErrors[keyof GetFwSystemsErrors];

export type GetFwSystemsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * contested string
     */
    contested: 'captured' | 'contested' | 'uncontested' | 'vulnerable';
    /**
     * occupier_faction_id integer
     */
    occupier_faction_id: number;
    /**
     * owner_faction_id integer
     */
    owner_faction_id: number;
    /**
     * solar_system_id integer
     */
    solar_system_id: number;
    /**
     * victory_points integer
     */
    victory_points: number;
    /**
     * victory_points_threshold integer
     */
    victory_points_threshold: number;
  }>;
};

export type GetFwSystemsResponse =
  GetFwSystemsResponses[keyof GetFwSystemsResponses];

export type GetFwWarsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/fw/wars/';
};

export type GetFwWarsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetFwWarsError = GetFwWarsErrors[keyof GetFwWarsErrors];

export type GetFwWarsResponses = {
  /**
   * List of factions at war
   */
  200: Array<{
    /**
     * The faction ID of the enemy faction.
     */
    against_id: number;
    /**
     * faction_id integer
     */
    faction_id: number;
  }>;
};

export type GetFwWarsResponse = GetFwWarsResponses[keyof GetFwWarsResponses];

export type GetIncursionsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/incursions/';
};

export type GetIncursionsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetIncursionsError = GetIncursionsErrors[keyof GetIncursionsErrors];

export type GetIncursionsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * The constellation id in which this incursion takes place
     */
    constellation_id: number;
    /**
     * The attacking faction's id
     */
    faction_id: number;
    /**
     * Whether the final encounter has boss or not
     */
    has_boss: boolean;
    /**
     * A list of infested solar system ids that are a part of this incursion
     */
    infested_solar_systems: Array<number>;
    /**
     * Influence of this incursion as a float from 0 to 1
     */
    influence: number;
    /**
     * Staging solar system for this incursion
     */
    staging_solar_system_id: number;
    /**
     * The state of this incursion
     */
    state: 'withdrawing' | 'mobilizing' | 'established';
    /**
     * The type of this incursion
     */
    type: string;
  }>;
};

export type GetIncursionsResponse =
  GetIncursionsResponses[keyof GetIncursionsResponses];

export type GetIndustryFacilitiesData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/industry/facilities/';
};

export type GetIndustryFacilitiesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetIndustryFacilitiesError =
  GetIndustryFacilitiesErrors[keyof GetIndustryFacilitiesErrors];

export type GetIndustryFacilitiesResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * ID of the facility
     */
    facility_id: number;
    /**
     * Owner of the facility
     */
    owner_id: number;
    /**
     * Region ID where the facility is
     */
    region_id: number;
    /**
     * Solar system ID where the facility is
     */
    solar_system_id: number;
    /**
     * Tax imposed by the facility
     */
    tax?: number;
    /**
     * Type ID of the facility
     */
    type_id: number;
  }>;
};

export type GetIndustryFacilitiesResponse =
  GetIndustryFacilitiesResponses[keyof GetIndustryFacilitiesResponses];

export type GetIndustrySystemsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/industry/systems/';
};

export type GetIndustrySystemsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetIndustrySystemsError =
  GetIndustrySystemsErrors[keyof GetIndustrySystemsErrors];

export type GetIndustrySystemsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * cost_indices array
     */
    cost_indices: Array<{
      /**
       * activity string
       */
      activity:
        | 'copying'
        | 'duplicating'
        | 'invention'
        | 'manufacturing'
        | 'none'
        | 'reaction'
        | 'researching_material_efficiency'
        | 'researching_technology'
        | 'researching_time_efficiency'
        | 'reverse_engineering';
      /**
       * cost_index number
       */
      cost_index: number;
    }>;
    /**
     * solar_system_id integer
     */
    solar_system_id: number;
  }>;
};

export type GetIndustrySystemsResponse =
  GetIndustrySystemsResponses[keyof GetIndustrySystemsResponses];

export type GetInsurancePricesData = {
  body?: never;
  headers?: {
    /**
     * Language to use in the response
     */
    'Accept-Language'?:
      | 'en'
      | 'en-us'
      | 'de'
      | 'fr'
      | 'ja'
      | 'ru'
      | 'zh'
      | 'ko'
      | 'es';
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Language to use in the response, takes precedence over Accept-Language
     */
    language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
  };
  url: '/insurance/prices/';
};

export type GetInsurancePricesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetInsurancePricesError =
  GetInsurancePricesErrors[keyof GetInsurancePricesErrors];

export type GetInsurancePricesResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * A list of a available insurance levels for this ship type
     */
    levels: Array<{
      /**
       * cost number
       */
      cost: number;
      /**
       * Localized insurance level
       */
      name: string;
      /**
       * payout number
       */
      payout: number;
    }>;
    /**
     * type_id integer
     */
    type_id: number;
  }>;
};

export type GetInsurancePricesResponse =
  GetInsurancePricesResponses[keyof GetInsurancePricesResponses];

export type GetKillmailsKillmailIdKillmailHashData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * The killmail hash for verification
     */
    killmail_hash: string;
    /**
     * The killmail ID to be queried
     */
    killmail_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/killmails/{killmail_id}/{killmail_hash}/';
};

export type GetKillmailsKillmailIdKillmailHashErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Unprocessable entity
   */
  422: {
    /**
     * Unprocessable entity message
     */
    error?: string;
  };
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetKillmailsKillmailIdKillmailHashError =
  GetKillmailsKillmailIdKillmailHashErrors[keyof GetKillmailsKillmailIdKillmailHashErrors];

export type GetKillmailsKillmailIdKillmailHashResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * attackers array
     */
    attackers: Array<{
      /**
       * alliance_id integer
       */
      alliance_id?: number;
      /**
       * character_id integer
       */
      character_id?: number;
      /**
       * corporation_id integer
       */
      corporation_id?: number;
      /**
       * damage_done integer
       */
      damage_done: number;
      /**
       * faction_id integer
       */
      faction_id?: number;
      /**
       * Was the attacker the one to achieve the final blow
       *
       */
      final_blow: boolean;
      /**
       * Security status for the attacker
       *
       */
      security_status: number;
      /**
       * What ship was the attacker flying
       *
       */
      ship_type_id?: number;
      /**
       * What weapon was used by the attacker for the kill
       *
       */
      weapon_type_id?: number;
    }>;
    /**
     * ID of the killmail
     */
    killmail_id: number;
    /**
     * Time that the victim was killed and the killmail generated
     *
     */
    killmail_time: string;
    /**
     * Moon if the kill took place at one
     */
    moon_id?: number;
    /**
     * Solar system that the kill took place in
     *
     */
    solar_system_id: number;
    /**
     * victim object
     */
    victim: {
      /**
       * alliance_id integer
       */
      alliance_id?: number;
      /**
       * character_id integer
       */
      character_id?: number;
      /**
       * corporation_id integer
       */
      corporation_id?: number;
      /**
       * How much total damage was taken by the victim
       *
       */
      damage_taken: number;
      /**
       * faction_id integer
       */
      faction_id?: number;
      /**
       * items array
       */
      items?: Array<{
        /**
         * Flag for the location of the item
         *
         */
        flag: number;
        /**
         * item_type_id integer
         */
        item_type_id: number;
        /**
         * items array
         */
        items?: Array<{
          /**
           * flag integer
           */
          flag: number;
          /**
           * item_type_id integer
           */
          item_type_id: number;
          /**
           * quantity_destroyed integer
           */
          quantity_destroyed?: number;
          /**
           * quantity_dropped integer
           */
          quantity_dropped?: number;
          /**
           * singleton integer
           */
          singleton: number;
        }>;
        /**
         * How many of the item were destroyed if any
         *
         */
        quantity_destroyed?: number;
        /**
         * How many of the item were dropped if any
         *
         */
        quantity_dropped?: number;
        /**
         * singleton integer
         */
        singleton: number;
      }>;
      /**
       * Coordinates of the victim in Cartesian space relative to the Sun
       *
       */
      position?: {
        /**
         * x number
         */
        x: number;
        /**
         * y number
         */
        y: number;
        /**
         * z number
         */
        z: number;
      };
      /**
       * The ship that the victim was piloting and was destroyed
       *
       */
      ship_type_id: number;
    };
    /**
     * War if the killmail is generated in relation to an official war
     *
     */
    war_id?: number;
  };
};

export type GetKillmailsKillmailIdKillmailHashResponse =
  GetKillmailsKillmailIdKillmailHashResponses[keyof GetKillmailsKillmailIdKillmailHashResponses];

export type GetLoyaltyStoresCorporationIdOffersData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An EVE corporation ID
     */
    corporation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/loyalty/stores/{corporation_id}/offers/';
};

export type GetLoyaltyStoresCorporationIdOffersErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetLoyaltyStoresCorporationIdOffersError =
  GetLoyaltyStoresCorporationIdOffersErrors[keyof GetLoyaltyStoresCorporationIdOffersErrors];

export type GetLoyaltyStoresCorporationIdOffersResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * Analysis kredit cost
     */
    ak_cost?: number;
    /**
     * isk_cost integer
     */
    isk_cost: number;
    /**
     * lp_cost integer
     */
    lp_cost: number;
    /**
     * offer_id integer
     */
    offer_id: number;
    /**
     * quantity integer
     */
    quantity: number;
    /**
     * required_items array
     */
    required_items: Array<{
      /**
       * quantity integer
       */
      quantity: number;
      /**
       * type_id integer
       */
      type_id: number;
    }>;
    /**
     * type_id integer
     */
    type_id: number;
  }>;
};

export type GetLoyaltyStoresCorporationIdOffersResponse =
  GetLoyaltyStoresCorporationIdOffersResponses[keyof GetLoyaltyStoresCorporationIdOffersResponses];

export type GetMarketsGroupsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/markets/groups/';
};

export type GetMarketsGroupsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetMarketsGroupsError =
  GetMarketsGroupsErrors[keyof GetMarketsGroupsErrors];

export type GetMarketsGroupsResponses = {
  /**
   * 200 ok array
   */
  200: Array<number>;
};

export type GetMarketsGroupsResponse =
  GetMarketsGroupsResponses[keyof GetMarketsGroupsResponses];

export type GetMarketsGroupsMarketGroupIdData = {
  body?: never;
  headers?: {
    /**
     * Language to use in the response
     */
    'Accept-Language'?:
      | 'en'
      | 'en-us'
      | 'de'
      | 'fr'
      | 'ja'
      | 'ru'
      | 'zh'
      | 'ko'
      | 'es';
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An Eve item group ID
     */
    market_group_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Language to use in the response, takes precedence over Accept-Language
     */
    language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
  };
  url: '/markets/groups/{market_group_id}/';
};

export type GetMarketsGroupsMarketGroupIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetMarketsGroupsMarketGroupIdError =
  GetMarketsGroupsMarketGroupIdErrors[keyof GetMarketsGroupsMarketGroupIdErrors];

export type GetMarketsGroupsMarketGroupIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * description string
     */
    description: string;
    /**
     * market_group_id integer
     */
    market_group_id: number;
    /**
     * name string
     */
    name: string;
    /**
     * parent_group_id integer
     */
    parent_group_id?: number;
    /**
     * types array
     */
    types: Array<number>;
  };
};

export type GetMarketsGroupsMarketGroupIdResponse =
  GetMarketsGroupsMarketGroupIdResponses[keyof GetMarketsGroupsMarketGroupIdResponses];

export type GetMarketsPricesData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/markets/prices/';
};

export type GetMarketsPricesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetMarketsPricesError =
  GetMarketsPricesErrors[keyof GetMarketsPricesErrors];

export type GetMarketsPricesResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * adjusted_price number
     */
    adjusted_price?: number;
    /**
     * average_price number
     */
    average_price?: number;
    /**
     * type_id integer
     */
    type_id: number;
  }>;
};

export type GetMarketsPricesResponse =
  GetMarketsPricesResponses[keyof GetMarketsPricesResponses];

export type GetMarketsStructuresStructureIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * Return orders in this structure
     */
    structure_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/markets/structures/{structure_id}/';
};

export type GetMarketsStructuresStructureIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetMarketsStructuresStructureIdError =
  GetMarketsStructuresStructureIdErrors[keyof GetMarketsStructuresStructureIdErrors];

export type GetMarketsStructuresStructureIdResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * duration integer
     */
    duration: number;
    /**
     * is_buy_order boolean
     */
    is_buy_order: boolean;
    /**
     * issued string
     */
    issued: string;
    /**
     * location_id integer
     */
    location_id: number;
    /**
     * min_volume integer
     */
    min_volume: number;
    /**
     * order_id integer
     */
    order_id: number;
    /**
     * price number
     */
    price: number;
    /**
     * range string
     */
    range:
      | 'station'
      | 'region'
      | 'solarsystem'
      | '1'
      | '2'
      | '3'
      | '4'
      | '5'
      | '10'
      | '20'
      | '30'
      | '40';
    /**
     * type_id integer
     */
    type_id: number;
    /**
     * volume_remain integer
     */
    volume_remain: number;
    /**
     * volume_total integer
     */
    volume_total: number;
  }>;
};

export type GetMarketsStructuresStructureIdResponse =
  GetMarketsStructuresStructureIdResponses[keyof GetMarketsStructuresStructureIdResponses];

export type GetMarketsRegionIdHistoryData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * Return statistics in this region
     */
    region_id: number;
  };
  query: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Return statistics for this type
     */
    type_id: number;
  };
  url: '/markets/{region_id}/history/';
};

export type GetMarketsRegionIdHistoryErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Unprocessable entity
   */
  422: {
    /**
     * Unprocessable entity message
     */
    error?: string;
  };
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
  /**
   * Error 520
   */
  520: {
    /**
     * Error 520 message
     */
    error?: string;
  };
};

export type GetMarketsRegionIdHistoryError =
  GetMarketsRegionIdHistoryErrors[keyof GetMarketsRegionIdHistoryErrors];

export type GetMarketsRegionIdHistoryResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * average number
     */
    average: number;
    /**
     * The date of this historical statistic entry
     */
    date: string;
    /**
     * highest number
     */
    highest: number;
    /**
     * lowest number
     */
    lowest: number;
    /**
     * Total number of orders happened that day
     */
    order_count: number;
    /**
     * Total
     */
    volume: number;
  }>;
};

export type GetMarketsRegionIdHistoryResponse =
  GetMarketsRegionIdHistoryResponses[keyof GetMarketsRegionIdHistoryResponses];

export type GetMarketsRegionIdOrdersData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * Return orders in this region
     */
    region_id: number;
  };
  query: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders
     */
    order_type: 'buy' | 'sell' | 'all';
    /**
     * Which page of results to return
     */
    page?: number;
    /**
     * Return orders only for this type
     */
    type_id?: number;
  };
  url: '/markets/{region_id}/orders/';
};

export type GetMarketsRegionIdOrdersErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Unprocessable entity
   */
  422: {
    /**
     * Unprocessable entity message
     */
    error?: string;
  };
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetMarketsRegionIdOrdersError =
  GetMarketsRegionIdOrdersErrors[keyof GetMarketsRegionIdOrdersErrors];

export type GetMarketsRegionIdOrdersResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * duration integer
     */
    duration: number;
    /**
     * is_buy_order boolean
     */
    is_buy_order: boolean;
    /**
     * issued string
     */
    issued: string;
    /**
     * location_id integer
     */
    location_id: number;
    /**
     * min_volume integer
     */
    min_volume: number;
    /**
     * order_id integer
     */
    order_id: number;
    /**
     * price number
     */
    price: number;
    /**
     * range string
     */
    range:
      | 'station'
      | 'region'
      | 'solarsystem'
      | '1'
      | '2'
      | '3'
      | '4'
      | '5'
      | '10'
      | '20'
      | '30'
      | '40';
    /**
     * The solar system this order was placed
     */
    system_id: number;
    /**
     * type_id integer
     */
    type_id: number;
    /**
     * volume_remain integer
     */
    volume_remain: number;
    /**
     * volume_total integer
     */
    volume_total: number;
  }>;
};

export type GetMarketsRegionIdOrdersResponse =
  GetMarketsRegionIdOrdersResponses[keyof GetMarketsRegionIdOrdersResponses];

export type GetMarketsRegionIdTypesData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * Return statistics in this region
     */
    region_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
  };
  url: '/markets/{region_id}/types/';
};

export type GetMarketsRegionIdTypesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetMarketsRegionIdTypesError =
  GetMarketsRegionIdTypesErrors[keyof GetMarketsRegionIdTypesErrors];

export type GetMarketsRegionIdTypesResponses = {
  /**
   * 200 ok array
   */
  200: Array<number>;
};

export type GetMarketsRegionIdTypesResponse =
  GetMarketsRegionIdTypesResponses[keyof GetMarketsRegionIdTypesResponses];

export type GetRouteOriginDestinationData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * destination solar system ID
     */
    destination: number;
    /**
     * origin solar system ID
     */
    origin: number;
  };
  query?: {
    /**
     * avoid solar system ID(s)
     */
    avoid?: Array<number>;
    /**
     * connected solar system pairs
     */
    connections?: Array<[number, number]>;
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * route security preference
     */
    flag?: 'shortest' | 'secure' | 'insecure';
  };
  url: '/route/{origin}/{destination}/';
};

export type GetRouteOriginDestinationErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetRouteOriginDestinationError =
  GetRouteOriginDestinationErrors[keyof GetRouteOriginDestinationErrors];

export type GetRouteOriginDestinationResponses = {
  /**
   * Solar systems in route
   */
  200: Array<number>;
};

export type GetRouteOriginDestinationResponse =
  GetRouteOriginDestinationResponses[keyof GetRouteOriginDestinationResponses];

export type GetSovereigntyCampaignsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/sovereignty/campaigns/';
};

export type GetSovereigntyCampaignsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetSovereigntyCampaignsError =
  GetSovereigntyCampaignsErrors[keyof GetSovereigntyCampaignsErrors];

export type GetSovereigntyCampaignsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * Score for all attacking parties, only present in Defense Events.
     *
     */
    attackers_score?: number;
    /**
     * Unique ID for this campaign.
     */
    campaign_id: number;
    /**
     * The constellation in which the campaign will take place.
     *
     */
    constellation_id: number;
    /**
     * Defending alliance, only present in Defense Events
     *
     */
    defender_id?: number;
    /**
     * Score for the defending alliance, only present in Defense Events.
     *
     */
    defender_score?: number;
    /**
     * Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as "Defense Events", station_freeport as "Freeport Events".
     *
     */
    event_type:
      | 'tcu_defense'
      | 'ihub_defense'
      | 'station_defense'
      | 'station_freeport';
    /**
     * Alliance participating and their respective scores, only present in Freeport Events.
     *
     */
    participants?: Array<{
      /**
       * alliance_id integer
       */
      alliance_id: number;
      /**
       * score number
       */
      score: number;
    }>;
    /**
     * The solar system the structure is located in.
     *
     */
    solar_system_id: number;
    /**
     * Time the event is scheduled to start.
     *
     */
    start_time: string;
    /**
     * The structure item ID that is related to this campaign.
     *
     */
    structure_id: number;
  }>;
};

export type GetSovereigntyCampaignsResponse =
  GetSovereigntyCampaignsResponses[keyof GetSovereigntyCampaignsResponses];

export type GetSovereigntyMapData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/sovereignty/map/';
};

export type GetSovereigntyMapErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetSovereigntyMapError =
  GetSovereigntyMapErrors[keyof GetSovereigntyMapErrors];

export type GetSovereigntyMapResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * alliance_id integer
     */
    alliance_id?: number;
    /**
     * corporation_id integer
     */
    corporation_id?: number;
    /**
     * faction_id integer
     */
    faction_id?: number;
    /**
     * system_id integer
     */
    system_id: number;
  }>;
};

export type GetSovereigntyMapResponse =
  GetSovereigntyMapResponses[keyof GetSovereigntyMapResponses];

export type GetSovereigntyStructuresData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/sovereignty/structures/';
};

export type GetSovereigntyStructuresErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetSovereigntyStructuresError =
  GetSovereigntyStructuresErrors[keyof GetSovereigntyStructuresErrors];

export type GetSovereigntyStructuresResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * The alliance that owns the structure.
     *
     */
    alliance_id: number;
    /**
     * Solar system in which the structure is located.
     *
     */
    solar_system_id: number;
    /**
     * Unique item ID for this structure.
     */
    structure_id: number;
    /**
     * A reference to the type of structure this is.
     *
     */
    structure_type_id: number;
    /**
     * The occupancy level for the next or current vulnerability window. This takes into account all development indexes and capital system bonuses. Also known as Activity Defense Multiplier from in the client. It increases the time that attackers must spend using their entosis links on the structure.
     *
     */
    vulnerability_occupancy_level?: number;
    /**
     * The time at which the next or current vulnerability window ends. At the end of a vulnerability window the next window is recalculated and locked in along with the vulnerabilityOccupancyLevel. If the structure is not in 100% entosis control of the defender, it will go in to 'overtime' and stay vulnerable for as long as that situation persists. Only once the defenders have 100% entosis control and has the vulnerableEndTime passed does the vulnerability interval expire and a new one is calculated.
     *
     */
    vulnerable_end_time?: string;
    /**
     * The next time at which the structure will become vulnerable. Or the start time of the current window if current time is between this and vulnerableEndTime.
     *
     */
    vulnerable_start_time?: string;
  }>;
};

export type GetSovereigntyStructuresResponse =
  GetSovereigntyStructuresResponses[keyof GetSovereigntyStructuresResponses];

export type GetStatusData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/status/';
};

export type GetStatusErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetStatusError = GetStatusErrors[keyof GetStatusErrors];

export type GetStatusResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * Current online player count
     */
    players: number;
    /**
     * Running version as string
     */
    server_version: string;
    /**
     * Server start timestamp
     */
    start_time: string;
    /**
     * If the server is in VIP mode
     */
    vip?: boolean;
  };
};

export type GetStatusResponse = GetStatusResponses[keyof GetStatusResponses];

export type PostUiAutopilotWaypointData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Whether this solar system should be added to the beginning of all waypoints
     */
    add_to_beginning: boolean;
    /**
     * Whether clean other waypoints beforing adding this one
     */
    clear_other_waypoints: boolean;
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * The destination to travel to, can be solar system, station or structure's id
     */
    destination_id: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/ui/autopilot/waypoint/';
};

export type PostUiAutopilotWaypointErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PostUiAutopilotWaypointError =
  PostUiAutopilotWaypointErrors[keyof PostUiAutopilotWaypointErrors];

export type PostUiAutopilotWaypointResponses = {
  /**
   * Open window request received
   */
  204: unknown;
};

export type PostUiOpenwindowContractData = {
  body?: never;
  path?: never;
  query: {
    /**
     * The contract to open
     */
    contract_id: number;
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/ui/openwindow/contract/';
};

export type PostUiOpenwindowContractErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PostUiOpenwindowContractError =
  PostUiOpenwindowContractErrors[keyof PostUiOpenwindowContractErrors];

export type PostUiOpenwindowContractResponses = {
  /**
   * Open window request received
   */
  204: unknown;
};

export type PostUiOpenwindowInformationData = {
  body?: never;
  path?: never;
  query: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * The target to open
     */
    target_id: number;
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/ui/openwindow/information/';
};

export type PostUiOpenwindowInformationErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PostUiOpenwindowInformationError =
  PostUiOpenwindowInformationErrors[keyof PostUiOpenwindowInformationErrors];

export type PostUiOpenwindowInformationResponses = {
  /**
   * Open window request received
   */
  204: unknown;
};

export type PostUiOpenwindowMarketdetailsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
    /**
     * The item type to open in market window
     */
    type_id: number;
  };
  url: '/ui/openwindow/marketdetails/';
};

export type PostUiOpenwindowMarketdetailsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PostUiOpenwindowMarketdetailsError =
  PostUiOpenwindowMarketdetailsErrors[keyof PostUiOpenwindowMarketdetailsErrors];

export type PostUiOpenwindowMarketdetailsResponses = {
  /**
   * Open window request received
   */
  204: unknown;
};

export type PostUiOpenwindowNewmailData = {
  /**
   * new_mail object
   */
  body: {
    /**
     * body string
     */
    body: string;
    /**
     * recipients array
     */
    recipients: Array<number>;
    /**
     * subject string
     */
    subject: string;
    /**
     * to_corp_or_alliance_id integer
     */
    to_corp_or_alliance_id?: number;
    /**
     * Corporations, alliances and mailing lists are all types of mailing groups. You may only send to one mailing group, at a time, so you may fill out either this field or the to_corp_or_alliance_ids field
     */
    to_mailing_list_id?: number;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/ui/openwindow/newmail/';
};

export type PostUiOpenwindowNewmailErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Unprocessable entity
   */
  422: {
    /**
     * Unprocessable entity message
     */
    error?: string;
  };
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PostUiOpenwindowNewmailError =
  PostUiOpenwindowNewmailErrors[keyof PostUiOpenwindowNewmailErrors];

export type PostUiOpenwindowNewmailResponses = {
  /**
   * Open window request received
   */
  204: unknown;
};

export type GetUniverseAncestriesData = {
  body?: never;
  headers?: {
    /**
     * Language to use in the response
     */
    'Accept-Language'?:
      | 'en'
      | 'en-us'
      | 'de'
      | 'fr'
      | 'ja'
      | 'ru'
      | 'zh'
      | 'ko'
      | 'es';
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Language to use in the response, takes precedence over Accept-Language
     */
    language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
  };
  url: '/universe/ancestries/';
};

export type GetUniverseAncestriesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseAncestriesError =
  GetUniverseAncestriesErrors[keyof GetUniverseAncestriesErrors];

export type GetUniverseAncestriesResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * The bloodline associated with this ancestry
     */
    bloodline_id: number;
    /**
     * description string
     */
    description: string;
    /**
     * icon_id integer
     */
    icon_id?: number;
    /**
     * id integer
     */
    id: number;
    /**
     * name string
     */
    name: string;
    /**
     * short_description string
     */
    short_description?: string;
  }>;
};

export type GetUniverseAncestriesResponse =
  GetUniverseAncestriesResponses[keyof GetUniverseAncestriesResponses];

export type GetUniverseAsteroidBeltsAsteroidBeltIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * asteroid_belt_id integer
     */
    asteroid_belt_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/universe/asteroid_belts/{asteroid_belt_id}/';
};

export type GetUniverseAsteroidBeltsAsteroidBeltIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseAsteroidBeltsAsteroidBeltIdError =
  GetUniverseAsteroidBeltsAsteroidBeltIdErrors[keyof GetUniverseAsteroidBeltsAsteroidBeltIdErrors];

export type GetUniverseAsteroidBeltsAsteroidBeltIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * name string
     */
    name: string;
    /**
     * position object
     */
    position: {
      /**
       * x number
       */
      x: number;
      /**
       * y number
       */
      y: number;
      /**
       * z number
       */
      z: number;
    };
    /**
     * The solar system this asteroid belt is in
     */
    system_id: number;
  };
};

export type GetUniverseAsteroidBeltsAsteroidBeltIdResponse =
  GetUniverseAsteroidBeltsAsteroidBeltIdResponses[keyof GetUniverseAsteroidBeltsAsteroidBeltIdResponses];

export type GetUniverseBloodlinesData = {
  body?: never;
  headers?: {
    /**
     * Language to use in the response
     */
    'Accept-Language'?:
      | 'en'
      | 'en-us'
      | 'de'
      | 'fr'
      | 'ja'
      | 'ru'
      | 'zh'
      | 'ko'
      | 'es';
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Language to use in the response, takes precedence over Accept-Language
     */
    language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
  };
  url: '/universe/bloodlines/';
};

export type GetUniverseBloodlinesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseBloodlinesError =
  GetUniverseBloodlinesErrors[keyof GetUniverseBloodlinesErrors];

export type GetUniverseBloodlinesResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * bloodline_id integer
     */
    bloodline_id: number;
    /**
     * charisma integer
     */
    charisma: number;
    /**
     * corporation_id integer
     */
    corporation_id: number;
    /**
     * description string
     */
    description: string;
    /**
     * intelligence integer
     */
    intelligence: number;
    /**
     * memory integer
     */
    memory: number;
    /**
     * name string
     */
    name: string;
    /**
     * perception integer
     */
    perception: number;
    /**
     * race_id integer
     */
    race_id: number;
    /**
     * ship_type_id integer
     */
    ship_type_id: number | null;
    /**
     * willpower integer
     */
    willpower: number;
  }>;
};

export type GetUniverseBloodlinesResponse =
  GetUniverseBloodlinesResponses[keyof GetUniverseBloodlinesResponses];

export type GetUniverseCategoriesData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/universe/categories/';
};

export type GetUniverseCategoriesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseCategoriesError =
  GetUniverseCategoriesErrors[keyof GetUniverseCategoriesErrors];

export type GetUniverseCategoriesResponses = {
  /**
   * 200 ok array
   */
  200: Array<number>;
};

export type GetUniverseCategoriesResponse =
  GetUniverseCategoriesResponses[keyof GetUniverseCategoriesResponses];

export type GetUniverseCategoriesCategoryIdData = {
  body?: never;
  headers?: {
    /**
     * Language to use in the response
     */
    'Accept-Language'?:
      | 'en'
      | 'en-us'
      | 'de'
      | 'fr'
      | 'ja'
      | 'ru'
      | 'zh'
      | 'ko'
      | 'es';
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An Eve item category ID
     */
    category_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Language to use in the response, takes precedence over Accept-Language
     */
    language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
  };
  url: '/universe/categories/{category_id}/';
};

export type GetUniverseCategoriesCategoryIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseCategoriesCategoryIdError =
  GetUniverseCategoriesCategoryIdErrors[keyof GetUniverseCategoriesCategoryIdErrors];

export type GetUniverseCategoriesCategoryIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * category_id integer
     */
    category_id: number;
    /**
     * groups array
     */
    groups: Array<number>;
    /**
     * name string
     */
    name: string;
    /**
     * published boolean
     */
    published: boolean;
  };
};

export type GetUniverseCategoriesCategoryIdResponse =
  GetUniverseCategoriesCategoryIdResponses[keyof GetUniverseCategoriesCategoryIdResponses];

export type GetUniverseConstellationsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/universe/constellations/';
};

export type GetUniverseConstellationsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseConstellationsError =
  GetUniverseConstellationsErrors[keyof GetUniverseConstellationsErrors];

export type GetUniverseConstellationsResponses = {
  /**
   * 200 ok array
   */
  200: Array<number>;
};

export type GetUniverseConstellationsResponse =
  GetUniverseConstellationsResponses[keyof GetUniverseConstellationsResponses];

export type GetUniverseConstellationsConstellationIdData = {
  body?: never;
  headers?: {
    /**
     * Language to use in the response
     */
    'Accept-Language'?:
      | 'en'
      | 'en-us'
      | 'de'
      | 'fr'
      | 'ja'
      | 'ru'
      | 'zh'
      | 'ko'
      | 'es';
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * constellation_id integer
     */
    constellation_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Language to use in the response, takes precedence over Accept-Language
     */
    language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
  };
  url: '/universe/constellations/{constellation_id}/';
};

export type GetUniverseConstellationsConstellationIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseConstellationsConstellationIdError =
  GetUniverseConstellationsConstellationIdErrors[keyof GetUniverseConstellationsConstellationIdErrors];

export type GetUniverseConstellationsConstellationIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * constellation_id integer
     */
    constellation_id: number;
    /**
     * name string
     */
    name: string;
    /**
     * position object
     */
    position: {
      /**
       * x number
       */
      x: number;
      /**
       * y number
       */
      y: number;
      /**
       * z number
       */
      z: number;
    };
    /**
     * The region this constellation is in
     */
    region_id: number;
    /**
     * systems array
     */
    systems: Array<number>;
  };
};

export type GetUniverseConstellationsConstellationIdResponse =
  GetUniverseConstellationsConstellationIdResponses[keyof GetUniverseConstellationsConstellationIdResponses];

export type GetUniverseFactionsData = {
  body?: never;
  headers?: {
    /**
     * Language to use in the response
     */
    'Accept-Language'?:
      | 'en'
      | 'en-us'
      | 'de'
      | 'fr'
      | 'ja'
      | 'ru'
      | 'zh'
      | 'ko'
      | 'es';
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Language to use in the response, takes precedence over Accept-Language
     */
    language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
  };
  url: '/universe/factions/';
};

export type GetUniverseFactionsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseFactionsError =
  GetUniverseFactionsErrors[keyof GetUniverseFactionsErrors];

export type GetUniverseFactionsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * corporation_id integer
     */
    corporation_id?: number;
    /**
     * description string
     */
    description: string;
    /**
     * faction_id integer
     */
    faction_id: number;
    /**
     * is_unique boolean
     */
    is_unique: boolean;
    /**
     * militia_corporation_id integer
     */
    militia_corporation_id?: number;
    /**
     * name string
     */
    name: string;
    /**
     * size_factor number
     */
    size_factor: number;
    /**
     * solar_system_id integer
     */
    solar_system_id?: number;
    /**
     * station_count integer
     */
    station_count: number;
    /**
     * station_system_count integer
     */
    station_system_count: number;
  }>;
};

export type GetUniverseFactionsResponse =
  GetUniverseFactionsResponses[keyof GetUniverseFactionsResponses];

export type GetUniverseGraphicsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/universe/graphics/';
};

export type GetUniverseGraphicsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseGraphicsError =
  GetUniverseGraphicsErrors[keyof GetUniverseGraphicsErrors];

export type GetUniverseGraphicsResponses = {
  /**
   * 200 ok array
   */
  200: Array<number>;
};

export type GetUniverseGraphicsResponse =
  GetUniverseGraphicsResponses[keyof GetUniverseGraphicsResponses];

export type GetUniverseGraphicsGraphicIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * graphic_id integer
     */
    graphic_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/universe/graphics/{graphic_id}/';
};

export type GetUniverseGraphicsGraphicIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseGraphicsGraphicIdError =
  GetUniverseGraphicsGraphicIdErrors[keyof GetUniverseGraphicsGraphicIdErrors];

export type GetUniverseGraphicsGraphicIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * collision_file string
     */
    collision_file?: string;
    /**
     * graphic_file string
     */
    graphic_file?: string;
    /**
     * graphic_id integer
     */
    graphic_id: number;
    /**
     * icon_folder string
     */
    icon_folder?: string;
    /**
     * sof_dna string
     */
    sof_dna?: string;
    /**
     * sof_fation_name string
     */
    sof_fation_name?: string;
    /**
     * sof_hull_name string
     */
    sof_hull_name?: string;
    /**
     * sof_race_name string
     */
    sof_race_name?: string;
  };
};

export type GetUniverseGraphicsGraphicIdResponse =
  GetUniverseGraphicsGraphicIdResponses[keyof GetUniverseGraphicsGraphicIdResponses];

export type GetUniverseGroupsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
  };
  url: '/universe/groups/';
};

export type GetUniverseGroupsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseGroupsError =
  GetUniverseGroupsErrors[keyof GetUniverseGroupsErrors];

export type GetUniverseGroupsResponses = {
  /**
   * 200 ok array
   */
  200: Array<number>;
};

export type GetUniverseGroupsResponse =
  GetUniverseGroupsResponses[keyof GetUniverseGroupsResponses];

export type GetUniverseGroupsGroupIdData = {
  body?: never;
  headers?: {
    /**
     * Language to use in the response
     */
    'Accept-Language'?:
      | 'en'
      | 'en-us'
      | 'de'
      | 'fr'
      | 'ja'
      | 'ru'
      | 'zh'
      | 'ko'
      | 'es';
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An Eve item group ID
     */
    group_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Language to use in the response, takes precedence over Accept-Language
     */
    language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
  };
  url: '/universe/groups/{group_id}/';
};

export type GetUniverseGroupsGroupIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseGroupsGroupIdError =
  GetUniverseGroupsGroupIdErrors[keyof GetUniverseGroupsGroupIdErrors];

export type GetUniverseGroupsGroupIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * category_id integer
     */
    category_id: number;
    /**
     * group_id integer
     */
    group_id: number;
    /**
     * name string
     */
    name: string;
    /**
     * published boolean
     */
    published: boolean;
    /**
     * types array
     */
    types: Array<number>;
  };
};

export type GetUniverseGroupsGroupIdResponse =
  GetUniverseGroupsGroupIdResponses[keyof GetUniverseGroupsGroupIdResponses];

export type PostUniverseIdsData = {
  /**
   * names array
   */
  body: Array<string>;
  headers?: {
    /**
     * Language to use in the response
     */
    'Accept-Language'?:
      | 'en'
      | 'en-us'
      | 'de'
      | 'fr'
      | 'ja'
      | 'ru'
      | 'zh'
      | 'ko'
      | 'es';
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Language to use in the response, takes precedence over Accept-Language
     */
    language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
  };
  url: '/universe/ids/';
};

export type PostUniverseIdsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PostUniverseIdsError =
  PostUniverseIdsErrors[keyof PostUniverseIdsErrors];

export type PostUniverseIdsResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * agents array
     */
    agents?: Array<{
      /**
       * id integer
       */
      id?: number;
      /**
       * name string
       */
      name?: string;
    }>;
    /**
     * alliances array
     */
    alliances?: Array<{
      /**
       * id integer
       */
      id?: number;
      /**
       * name string
       */
      name?: string;
    }>;
    /**
     * characters array
     */
    characters?: Array<{
      /**
       * id integer
       */
      id?: number;
      /**
       * name string
       */
      name?: string;
    }>;
    /**
     * constellations array
     */
    constellations?: Array<{
      /**
       * id integer
       */
      id?: number;
      /**
       * name string
       */
      name?: string;
    }>;
    /**
     * corporations array
     */
    corporations?: Array<{
      /**
       * id integer
       */
      id?: number;
      /**
       * name string
       */
      name?: string;
    }>;
    /**
     * factions array
     */
    factions?: Array<{
      /**
       * id integer
       */
      id?: number;
      /**
       * name string
       */
      name?: string;
    }>;
    /**
     * inventory_types array
     */
    inventory_types?: Array<{
      /**
       * id integer
       */
      id?: number;
      /**
       * name string
       */
      name?: string;
    }>;
    /**
     * regions array
     */
    regions?: Array<{
      /**
       * id integer
       */
      id?: number;
      /**
       * name string
       */
      name?: string;
    }>;
    /**
     * stations array
     */
    stations?: Array<{
      /**
       * id integer
       */
      id?: number;
      /**
       * name string
       */
      name?: string;
    }>;
    /**
     * systems array
     */
    systems?: Array<{
      /**
       * id integer
       */
      id?: number;
      /**
       * name string
       */
      name?: string;
    }>;
  };
};

export type PostUniverseIdsResponse =
  PostUniverseIdsResponses[keyof PostUniverseIdsResponses];

export type GetUniverseMoonsMoonIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * moon_id integer
     */
    moon_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/universe/moons/{moon_id}/';
};

export type GetUniverseMoonsMoonIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseMoonsMoonIdError =
  GetUniverseMoonsMoonIdErrors[keyof GetUniverseMoonsMoonIdErrors];

export type GetUniverseMoonsMoonIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * moon_id integer
     */
    moon_id: number;
    /**
     * name string
     */
    name: string;
    /**
     * position object
     */
    position: {
      /**
       * x number
       */
      x: number;
      /**
       * y number
       */
      y: number;
      /**
       * z number
       */
      z: number;
    };
    /**
     * The solar system this moon is in
     */
    system_id: number;
  };
};

export type GetUniverseMoonsMoonIdResponse =
  GetUniverseMoonsMoonIdResponses[keyof GetUniverseMoonsMoonIdResponses];

export type PostUniverseNamesData = {
  /**
   * ids array
   */
  body: Array<number>;
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/universe/names/';
};

export type PostUniverseNamesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type PostUniverseNamesError =
  PostUniverseNamesErrors[keyof PostUniverseNamesErrors];

export type PostUniverseNamesResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * category string
     */
    category:
      | 'alliance'
      | 'character'
      | 'constellation'
      | 'corporation'
      | 'inventory_type'
      | 'region'
      | 'solar_system'
      | 'station'
      | 'faction';
    /**
     * id integer
     */
    id: number;
    /**
     * name string
     */
    name: string;
  }>;
};

export type PostUniverseNamesResponse =
  PostUniverseNamesResponses[keyof PostUniverseNamesResponses];

export type GetUniversePlanetsPlanetIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * planet_id integer
     */
    planet_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/universe/planets/{planet_id}/';
};

export type GetUniversePlanetsPlanetIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniversePlanetsPlanetIdError =
  GetUniversePlanetsPlanetIdErrors[keyof GetUniversePlanetsPlanetIdErrors];

export type GetUniversePlanetsPlanetIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * name string
     */
    name: string;
    /**
     * planet_id integer
     */
    planet_id: number;
    /**
     * position object
     */
    position: {
      /**
       * x number
       */
      x: number;
      /**
       * y number
       */
      y: number;
      /**
       * z number
       */
      z: number;
    };
    /**
     * The solar system this planet is in
     */
    system_id: number;
    /**
     * type_id integer
     */
    type_id: number;
  };
};

export type GetUniversePlanetsPlanetIdResponse =
  GetUniversePlanetsPlanetIdResponses[keyof GetUniversePlanetsPlanetIdResponses];

export type GetUniverseRacesData = {
  body?: never;
  headers?: {
    /**
     * Language to use in the response
     */
    'Accept-Language'?:
      | 'en'
      | 'en-us'
      | 'de'
      | 'fr'
      | 'ja'
      | 'ru'
      | 'zh'
      | 'ko'
      | 'es';
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Language to use in the response, takes precedence over Accept-Language
     */
    language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
  };
  url: '/universe/races/';
};

export type GetUniverseRacesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseRacesError =
  GetUniverseRacesErrors[keyof GetUniverseRacesErrors];

export type GetUniverseRacesResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * The alliance generally associated with this race
     */
    alliance_id: number;
    /**
     * description string
     */
    description: string;
    /**
     * name string
     */
    name: string;
    /**
     * race_id integer
     */
    race_id: number;
  }>;
};

export type GetUniverseRacesResponse =
  GetUniverseRacesResponses[keyof GetUniverseRacesResponses];

export type GetUniverseRegionsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/universe/regions/';
};

export type GetUniverseRegionsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseRegionsError =
  GetUniverseRegionsErrors[keyof GetUniverseRegionsErrors];

export type GetUniverseRegionsResponses = {
  /**
   * 200 ok array
   */
  200: Array<number>;
};

export type GetUniverseRegionsResponse =
  GetUniverseRegionsResponses[keyof GetUniverseRegionsResponses];

export type GetUniverseRegionsRegionIdData = {
  body?: never;
  headers?: {
    /**
     * Language to use in the response
     */
    'Accept-Language'?:
      | 'en'
      | 'en-us'
      | 'de'
      | 'fr'
      | 'ja'
      | 'ru'
      | 'zh'
      | 'ko'
      | 'es';
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * region_id integer
     */
    region_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Language to use in the response, takes precedence over Accept-Language
     */
    language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
  };
  url: '/universe/regions/{region_id}/';
};

export type GetUniverseRegionsRegionIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseRegionsRegionIdError =
  GetUniverseRegionsRegionIdErrors[keyof GetUniverseRegionsRegionIdErrors];

export type GetUniverseRegionsRegionIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * constellations array
     */
    constellations: Array<number>;
    /**
     * description string
     */
    description?: string;
    /**
     * name string
     */
    name: string;
    /**
     * region_id integer
     */
    region_id: number;
  };
};

export type GetUniverseRegionsRegionIdResponse =
  GetUniverseRegionsRegionIdResponses[keyof GetUniverseRegionsRegionIdResponses];

export type GetUniverseSchematicsSchematicIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * A PI schematic ID
     */
    schematic_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/universe/schematics/{schematic_id}/';
};

export type GetUniverseSchematicsSchematicIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Schematic not found
   */
  404: {
    /**
     * error message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseSchematicsSchematicIdError =
  GetUniverseSchematicsSchematicIdErrors[keyof GetUniverseSchematicsSchematicIdErrors];

export type GetUniverseSchematicsSchematicIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * Time in seconds to process a run
     */
    cycle_time: number;
    /**
     * schematic_name string
     */
    schematic_name: string;
  };
};

export type GetUniverseSchematicsSchematicIdResponse =
  GetUniverseSchematicsSchematicIdResponses[keyof GetUniverseSchematicsSchematicIdResponses];

export type GetUniverseStargatesStargateIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * stargate_id integer
     */
    stargate_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/universe/stargates/{stargate_id}/';
};

export type GetUniverseStargatesStargateIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseStargatesStargateIdError =
  GetUniverseStargatesStargateIdErrors[keyof GetUniverseStargatesStargateIdErrors];

export type GetUniverseStargatesStargateIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * destination object
     */
    destination: {
      /**
       * The stargate this stargate connects to
       */
      stargate_id: number;
      /**
       * The solar system this stargate connects to
       */
      system_id: number;
    };
    /**
     * name string
     */
    name: string;
    /**
     * position object
     */
    position: {
      /**
       * x number
       */
      x: number;
      /**
       * y number
       */
      y: number;
      /**
       * z number
       */
      z: number;
    };
    /**
     * stargate_id integer
     */
    stargate_id: number;
    /**
     * The solar system this stargate is in
     */
    system_id: number;
    /**
     * type_id integer
     */
    type_id: number;
  };
};

export type GetUniverseStargatesStargateIdResponse =
  GetUniverseStargatesStargateIdResponses[keyof GetUniverseStargatesStargateIdResponses];

export type GetUniverseStarsStarIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * star_id integer
     */
    star_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/universe/stars/{star_id}/';
};

export type GetUniverseStarsStarIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseStarsStarIdError =
  GetUniverseStarsStarIdErrors[keyof GetUniverseStarsStarIdErrors];

export type GetUniverseStarsStarIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * Age of star in years
     */
    age: number;
    /**
     * luminosity number
     */
    luminosity: number;
    /**
     * name string
     */
    name: string;
    /**
     * radius integer
     */
    radius: number;
    /**
     * solar_system_id integer
     */
    solar_system_id: number;
    /**
     * spectral_class string
     */
    spectral_class:
      | 'K2 V'
      | 'K4 V'
      | 'G2 V'
      | 'G8 V'
      | 'M7 V'
      | 'K7 V'
      | 'M2 V'
      | 'K5 V'
      | 'M3 V'
      | 'G0 V'
      | 'G7 V'
      | 'G3 V'
      | 'F9 V'
      | 'G5 V'
      | 'F6 V'
      | 'K8 V'
      | 'K9 V'
      | 'K6 V'
      | 'G9 V'
      | 'G6 V'
      | 'G4 VI'
      | 'G4 V'
      | 'F8 V'
      | 'F2 V'
      | 'F1 V'
      | 'K3 V'
      | 'F0 VI'
      | 'G1 VI'
      | 'G0 VI'
      | 'K1 V'
      | 'M4 V'
      | 'M1 V'
      | 'M6 V'
      | 'M0 V'
      | 'K2 IV'
      | 'G2 VI'
      | 'K0 V'
      | 'K5 IV'
      | 'F5 VI'
      | 'G6 VI'
      | 'F6 VI'
      | 'F2 IV'
      | 'G3 VI'
      | 'M8 V'
      | 'F1 VI'
      | 'K1 IV'
      | 'F7 V'
      | 'G5 VI'
      | 'M5 V'
      | 'G7 VI'
      | 'F5 V'
      | 'F4 VI'
      | 'F8 VI'
      | 'K3 IV'
      | 'F4 IV'
      | 'F0 V'
      | 'G7 IV'
      | 'G8 VI'
      | 'F2 VI'
      | 'F4 V'
      | 'F7 VI'
      | 'F3 V'
      | 'G1 V'
      | 'G9 VI'
      | 'F3 IV'
      | 'F9 VI'
      | 'M9 V'
      | 'K0 IV'
      | 'F1 IV'
      | 'G4 IV'
      | 'F3 VI'
      | 'K4 IV'
      | 'G5 IV'
      | 'G3 IV'
      | 'G1 IV'
      | 'K7 IV'
      | 'G0 IV'
      | 'K6 IV'
      | 'K9 IV'
      | 'G2 IV'
      | 'F9 IV'
      | 'F0 IV'
      | 'K8 IV'
      | 'G8 IV'
      | 'F6 IV'
      | 'F5 IV'
      | 'A0'
      | 'A0IV'
      | 'A0IV2';
    /**
     * temperature integer
     */
    temperature: number;
    /**
     * type_id integer
     */
    type_id: number;
  };
};

export type GetUniverseStarsStarIdResponse =
  GetUniverseStarsStarIdResponses[keyof GetUniverseStarsStarIdResponses];

export type GetUniverseStationsStationIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * station_id integer
     */
    station_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/universe/stations/{station_id}/';
};

export type GetUniverseStationsStationIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseStationsStationIdError =
  GetUniverseStationsStationIdErrors[keyof GetUniverseStationsStationIdErrors];

export type GetUniverseStationsStationIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * max_dockable_ship_volume number
     */
    max_dockable_ship_volume: number;
    /**
     * name string
     */
    name: string;
    /**
     * office_rental_cost number
     */
    office_rental_cost: number;
    /**
     * ID of the corporation that controls this station
     */
    owner?: number;
    /**
     * position object
     */
    position: {
      /**
       * x number
       */
      x: number;
      /**
       * y number
       */
      y: number;
      /**
       * z number
       */
      z: number;
    };
    /**
     * race_id integer
     */
    race_id?: number;
    /**
     * reprocessing_efficiency number
     */
    reprocessing_efficiency: number;
    /**
     * reprocessing_stations_take number
     */
    reprocessing_stations_take: number;
    /**
     * services array
     */
    services: Array<
      | 'bounty-missions'
      | 'assasination-missions'
      | 'courier-missions'
      | 'interbus'
      | 'reprocessing-plant'
      | 'refinery'
      | 'market'
      | 'black-market'
      | 'stock-exchange'
      | 'cloning'
      | 'surgery'
      | 'dna-therapy'
      | 'repair-facilities'
      | 'factory'
      | 'labratory'
      | 'gambling'
      | 'fitting'
      | 'paintshop'
      | 'news'
      | 'storage'
      | 'insurance'
      | 'docking'
      | 'office-rental'
      | 'jump-clone-facility'
      | 'loyalty-point-store'
      | 'navy-offices'
      | 'security-offices'
    >;
    /**
     * station_id integer
     */
    station_id: number;
    /**
     * The solar system this station is in
     */
    system_id: number;
    /**
     * type_id integer
     */
    type_id: number;
  };
};

export type GetUniverseStationsStationIdResponse =
  GetUniverseStationsStationIdResponses[keyof GetUniverseStationsStationIdResponses];

export type GetUniverseStructuresData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Only list public structures that have this service online
     */
    filter?: 'market' | 'manufacturing_basic';
  };
  url: '/universe/structures/';
};

export type GetUniverseStructuresErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseStructuresError =
  GetUniverseStructuresErrors[keyof GetUniverseStructuresErrors];

export type GetUniverseStructuresResponses = {
  /**
   * 200 ok array
   */
  200: Array<number>;
};

export type GetUniverseStructuresResponse =
  GetUniverseStructuresResponses[keyof GetUniverseStructuresResponses];

export type GetUniverseStructuresStructureIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An Eve structure ID
     */
    structure_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Access token to use if unable to set a header
     */
    token?: string;
  };
  url: '/universe/structures/{structure_id}/';
};

export type GetUniverseStructuresStructureIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Unauthorized
   */
  401: Unauthorized;
  /**
   * Forbidden
   */
  403: Forbidden;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseStructuresStructureIdError =
  GetUniverseStructuresStructureIdErrors[keyof GetUniverseStructuresStructureIdErrors];

export type GetUniverseStructuresStructureIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * The full name of the structure
     */
    name: string;
    /**
     * The ID of the corporation who owns this particular structure
     */
    owner_id: number;
    /**
     * Coordinates of the structure in Cartesian space relative to the Sun, in metres.
     *
     */
    position?: {
      /**
       * x number
       */
      x: number;
      /**
       * y number
       */
      y: number;
      /**
       * z number
       */
      z: number;
    };
    /**
     * solar_system_id integer
     */
    solar_system_id: number;
    /**
     * type_id integer
     */
    type_id?: number;
  };
};

export type GetUniverseStructuresStructureIdResponse =
  GetUniverseStructuresStructureIdResponses[keyof GetUniverseStructuresStructureIdResponses];

export type GetUniverseSystemJumpsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/universe/system_jumps/';
};

export type GetUniverseSystemJumpsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseSystemJumpsError =
  GetUniverseSystemJumpsErrors[keyof GetUniverseSystemJumpsErrors];

export type GetUniverseSystemJumpsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * ship_jumps integer
     */
    ship_jumps: number;
    /**
     * system_id integer
     */
    system_id: number;
  }>;
};

export type GetUniverseSystemJumpsResponse =
  GetUniverseSystemJumpsResponses[keyof GetUniverseSystemJumpsResponses];

export type GetUniverseSystemKillsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/universe/system_kills/';
};

export type GetUniverseSystemKillsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseSystemKillsError =
  GetUniverseSystemKillsErrors[keyof GetUniverseSystemKillsErrors];

export type GetUniverseSystemKillsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * Number of NPC ships killed in this system
     */
    npc_kills: number;
    /**
     * Number of pods killed in this system
     */
    pod_kills: number;
    /**
     * Number of player ships killed in this system
     */
    ship_kills: number;
    /**
     * system_id integer
     */
    system_id: number;
  }>;
};

export type GetUniverseSystemKillsResponse =
  GetUniverseSystemKillsResponses[keyof GetUniverseSystemKillsResponses];

export type GetUniverseSystemsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/universe/systems/';
};

export type GetUniverseSystemsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseSystemsError =
  GetUniverseSystemsErrors[keyof GetUniverseSystemsErrors];

export type GetUniverseSystemsResponses = {
  /**
   * 200 ok array
   */
  200: Array<number>;
};

export type GetUniverseSystemsResponse =
  GetUniverseSystemsResponses[keyof GetUniverseSystemsResponses];

export type GetUniverseSystemsSystemIdData = {
  body?: never;
  headers?: {
    /**
     * Language to use in the response
     */
    'Accept-Language'?:
      | 'en'
      | 'en-us'
      | 'de'
      | 'fr'
      | 'ja'
      | 'ru'
      | 'zh'
      | 'ko'
      | 'es';
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * system_id integer
     */
    system_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Language to use in the response, takes precedence over Accept-Language
     */
    language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
  };
  url: '/universe/systems/{system_id}/';
};

export type GetUniverseSystemsSystemIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseSystemsSystemIdError =
  GetUniverseSystemsSystemIdErrors[keyof GetUniverseSystemsSystemIdErrors];

export type GetUniverseSystemsSystemIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * The constellation this solar system is in
     */
    constellation_id: number;
    /**
     * name string
     */
    name: string;
    /**
     * planets array
     */
    planets?: Array<{
      /**
       * asteroid_belts array
       */
      asteroid_belts?: Array<number>;
      /**
       * moons array
       */
      moons?: Array<number>;
      /**
       * planet_id integer
       */
      planet_id: number;
    }>;
    /**
     * position object
     */
    position: {
      /**
       * x number
       */
      x: number;
      /**
       * y number
       */
      y: number;
      /**
       * z number
       */
      z: number;
    };
    /**
     * security_class string
     */
    security_class?: string;
    /**
     * security_status number
     */
    security_status: number;
    /**
     * star_id integer
     */
    star_id?: number;
    /**
     * stargates array
     */
    stargates?: Array<number>;
    /**
     * stations array
     */
    stations?: Array<number>;
    /**
     * system_id integer
     */
    system_id: number;
  };
};

export type GetUniverseSystemsSystemIdResponse =
  GetUniverseSystemsSystemIdResponses[keyof GetUniverseSystemsSystemIdResponses];

export type GetUniverseTypesData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
  };
  url: '/universe/types/';
};

export type GetUniverseTypesErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseTypesError =
  GetUniverseTypesErrors[keyof GetUniverseTypesErrors];

export type GetUniverseTypesResponses = {
  /**
   * 200 ok array
   */
  200: Array<number>;
};

export type GetUniverseTypesResponse =
  GetUniverseTypesResponses[keyof GetUniverseTypesResponses];

export type GetUniverseTypesTypeIdData = {
  body?: never;
  headers?: {
    /**
     * Language to use in the response
     */
    'Accept-Language'?:
      | 'en'
      | 'en-us'
      | 'de'
      | 'fr'
      | 'ja'
      | 'ru'
      | 'zh'
      | 'ko'
      | 'es';
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * An Eve item type ID
     */
    type_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Language to use in the response, takes precedence over Accept-Language
     */
    language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
  };
  url: '/universe/types/{type_id}/';
};

export type GetUniverseTypesTypeIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Not found
   */
  404: {
    /**
     * Not found message
     */
    error?: string;
  };
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetUniverseTypesTypeIdError =
  GetUniverseTypesTypeIdErrors[keyof GetUniverseTypesTypeIdErrors];

export type GetUniverseTypesTypeIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * capacity number
     */
    capacity?: number;
    /**
     * description string
     */
    description: string;
    /**
     * dogma_attributes array
     */
    dogma_attributes?: Array<{
      /**
       * attribute_id integer
       */
      attribute_id: number;
      /**
       * value number
       */
      value: number;
    }>;
    /**
     * dogma_effects array
     */
    dogma_effects?: Array<{
      /**
       * effect_id integer
       */
      effect_id: number;
      /**
       * is_default boolean
       */
      is_default: boolean;
    }>;
    /**
     * graphic_id integer
     */
    graphic_id?: number;
    /**
     * group_id integer
     */
    group_id: number;
    /**
     * icon_id integer
     */
    icon_id?: number;
    /**
     * This only exists for types that can be put on the market
     */
    market_group_id?: number;
    /**
     * mass number
     */
    mass?: number;
    /**
     * name string
     */
    name: string;
    /**
     * packaged_volume number
     */
    packaged_volume?: number;
    /**
     * portion_size integer
     */
    portion_size?: number;
    /**
     * published boolean
     */
    published: boolean;
    /**
     * radius number
     */
    radius?: number;
    /**
     * type_id integer
     */
    type_id: number;
    /**
     * volume number
     */
    volume?: number;
  };
};

export type GetUniverseTypesTypeIdResponse =
  GetUniverseTypesTypeIdResponses[keyof GetUniverseTypesTypeIdResponses];

export type GetWarsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path?: never;
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Only return wars with ID smaller than this
     */
    max_war_id?: number;
  };
  url: '/wars/';
};

export type GetWarsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetWarsError = GetWarsErrors[keyof GetWarsErrors];

export type GetWarsResponses = {
  /**
   * 200 ok array
   */
  200: Array<number>;
};

export type GetWarsResponse = GetWarsResponses[keyof GetWarsResponses];

export type GetWarsWarIdData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * ID for a war
     */
    war_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
  };
  url: '/wars/{war_id}/';
};

export type GetWarsWarIdErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Unprocessable entity
   */
  422: {
    /**
     * Unprocessable entity message
     */
    error?: string;
  };
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetWarsWarIdError = GetWarsWarIdErrors[keyof GetWarsWarIdErrors];

export type GetWarsWarIdResponses = {
  /**
   * 200 ok object
   */
  200: {
    /**
     * The aggressor corporation or alliance that declared this war, only contains either corporation_id or alliance_id
     */
    aggressor: {
      /**
       * Alliance ID if and only if the aggressor is an alliance
       */
      alliance_id?: number;
      /**
       * Corporation ID if and only if the aggressor is a corporation
       */
      corporation_id?: number;
      /**
       * ISK value of ships the aggressor has destroyed
       */
      isk_destroyed: number;
      /**
       * The number of ships the aggressor has killed
       */
      ships_killed: number;
    };
    /**
     * allied corporations or alliances, each object contains either corporation_id or alliance_id
     */
    allies?: Array<{
      /**
       * Alliance ID if and only if this ally is an alliance
       */
      alliance_id?: number;
      /**
       * Corporation ID if and only if this ally is a corporation
       */
      corporation_id?: number;
    }>;
    /**
     * Time that the war was declared
     */
    declared: string;
    /**
     * The defending corporation or alliance that declared this war, only contains either corporation_id or alliance_id
     */
    defender: {
      /**
       * Alliance ID if and only if the defender is an alliance
       */
      alliance_id?: number;
      /**
       * Corporation ID if and only if the defender is a corporation
       */
      corporation_id?: number;
      /**
       * ISK value of ships the defender has killed
       */
      isk_destroyed: number;
      /**
       * The number of ships the defender has killed
       */
      ships_killed: number;
    };
    /**
     * Time the war ended and shooting was no longer allowed
     */
    finished?: string;
    /**
     * ID of the specified war
     */
    id: number;
    /**
     * Was the war declared mutual by both parties
     */
    mutual: boolean;
    /**
     * Is the war currently open for allies or not
     */
    open_for_allies: boolean;
    /**
     * Time the war was retracted but both sides could still shoot each other
     */
    retracted?: string;
    /**
     * Time when the war started and both sides could shoot each other
     */
    started?: string;
  };
};

export type GetWarsWarIdResponse =
  GetWarsWarIdResponses[keyof GetWarsWarIdResponses];

export type GetWarsWarIdKillmailsData = {
  body?: never;
  headers?: {
    /**
     * ETag from a previous request. A 304 will be returned if this matches the current ETag
     */
    'If-None-Match'?: string;
  };
  path: {
    /**
     * A valid war ID
     */
    war_id: number;
  };
  query?: {
    /**
     * The server name you would like data from
     */
    datasource?: 'tranquility';
    /**
     * Which page of results to return
     */
    page?: number;
  };
  url: '/wars/{war_id}/killmails/';
};

export type GetWarsWarIdKillmailsErrors = {
  /**
   * Bad request
   */
  400: BadRequest;
  /**
   * Error limited
   */
  420: ErrorLimited;
  /**
   * Unprocessable entity
   */
  422: {
    /**
     * Unprocessable entity message
     */
    error?: string;
  };
  /**
   * Internal server error
   */
  500: InternalServerError;
  /**
   * Service unavailable
   */
  503: ServiceUnavailable;
  /**
   * Gateway timeout
   */
  504: GatewayTimeout;
};

export type GetWarsWarIdKillmailsError =
  GetWarsWarIdKillmailsErrors[keyof GetWarsWarIdKillmailsErrors];

export type GetWarsWarIdKillmailsResponses = {
  /**
   * 200 ok array
   */
  200: Array<{
    /**
     * A hash of this killmail
     */
    killmail_hash: string;
    /**
     * ID of this killmail
     */
    killmail_id: number;
  }>;
};

export type GetWarsWarIdKillmailsResponse =
  GetWarsWarIdKillmailsResponses[keyof GetWarsWarIdKillmailsResponses];

export type ClientOptions = {
  baseURL: 'https://esi.evetech.net/latest' | (string & {});
};
