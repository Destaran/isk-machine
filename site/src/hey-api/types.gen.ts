// This file is auto-generated by @hey-api/openapi-ts

/**
 * Bad request model
 */
export type bad_request = {
    /**
     * Bad request message
     */
    error: string;
};

/**
 * Error limited model
 */
export type error_limited = {
    /**
     * Error limited message
     */
    error: string;
};

/**
 * Forbidden model
 */
export type forbidden = {
    /**
     * Forbidden message
     */
    error: string;
    /**
     * status code received from SSO
     */
    sso_status?: number;
};

/**
 * Gateway timeout model
 */
export type gateway_timeout = {
    /**
     * Gateway timeout message
     */
    error: string;
    /**
     * number of seconds the request was given
     */
    timeout?: number;
};

/**
 * Internal server error model
 */
export type internal_server_error = {
    /**
     * Internal server error message
     */
    error: string;
};

/**
 * Service unavailable model
 */
export type service_unavailable = {
    /**
     * Service unavailable message
     */
    error: string;
};

/**
 * Unauthorized model
 */
export type unauthorized = {
    /**
     * Unauthorized message
     */
    error: string;
};

export type GetAlliancesData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetAlliancesResponse = Array<(number)>;

export type GetAlliancesError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetAlliancesAllianceIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE alliance ID
         */
        alliance_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetAlliancesAllianceIdResponse = {
    /**
     * ID of the corporation that created the alliance
     */
    creator_corporation_id: number;
    /**
     * ID of the character that created the alliance
     */
    creator_id: number;
    /**
     * date_founded string
     */
    date_founded: string;
    /**
     * the executor corporation ID, if this alliance is not closed
     */
    executor_corporation_id?: number;
    /**
     * Faction ID this alliance is fighting for, if this alliance is enlisted in factional warfare
     */
    faction_id?: number;
    /**
     * the full name of the alliance
     */
    name: string;
    /**
     * the short name of the alliance
     */
    ticker: string;
};

export type GetAlliancesAllianceIdError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetAlliancesAllianceIdContactsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE alliance ID
         */
        alliance_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetAlliancesAllianceIdContactsResponse = Array<{
    /**
     * contact_id integer
     */
    contact_id: number;
    /**
     * contact_type string
     */
    contact_type: 'character' | 'corporation' | 'alliance' | 'faction';
    /**
     * label_ids array
     */
    label_ids?: Array<(number)>;
    /**
     * Standing of the contact
     */
    standing: number;
}>;

export type GetAlliancesAllianceIdContactsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetAlliancesAllianceIdContactsLabelsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE alliance ID
         */
        alliance_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetAlliancesAllianceIdContactsLabelsResponse = Array<{
    /**
     * label_id integer
     */
    label_id: number;
    /**
     * label_name string
     */
    label_name: string;
}>;

export type GetAlliancesAllianceIdContactsLabelsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetAlliancesAllianceIdCorporationsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE alliance ID
         */
        alliance_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetAlliancesAllianceIdCorporationsResponse = Array<(number)>;

export type GetAlliancesAllianceIdCorporationsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetAlliancesAllianceIdIconsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE alliance ID
         */
        alliance_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetAlliancesAllianceIdIconsResponse = {
    /**
     * px128x128 string
     */
    px128x128?: string;
    /**
     * px64x64 string
     */
    px64x64?: string;
};

export type GetAlliancesAllianceIdIconsError = string | bad_request | {
    /**
     * error message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PostCharactersAffiliationData = {
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type PostCharactersAffiliationResponse = Array<{
    /**
     * The character's alliance ID, if their corporation is in an alliance
     */
    alliance_id?: number;
    /**
     * The character's ID
     */
    character_id: number;
    /**
     * The character's corporation ID
     */
    corporation_id: number;
    /**
     * The character's faction ID, if their corporation is in a faction
     */
    faction_id?: number;
}>;

export type PostCharactersAffiliationError = bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetCharactersCharacterIdResponse = {
    /**
     * The character's alliance ID
     */
    alliance_id?: number;
    /**
     * Creation date of the character
     */
    birthday: string;
    /**
     * bloodline_id integer
     */
    bloodline_id: number;
    /**
     * The character's corporation ID
     */
    corporation_id: number;
    /**
     * description string
     */
    description?: string;
    /**
     * ID of the faction the character is fighting for, if the character is enlisted in Factional Warfare
     */
    faction_id?: number;
    /**
     * gender string
     */
    gender: 'female' | 'male';
    /**
     * name string
     */
    name: string;
    /**
     * race_id integer
     */
    race_id: number;
    /**
     * security_status number
     */
    security_status?: number;
    /**
     * The individual title of the character
     */
    title?: string;
};

export type GetCharactersCharacterIdError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdAgentsResearchData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdAgentsResearchResponse = Array<{
    /**
     * agent_id integer
     */
    agent_id: number;
    /**
     * points_per_day number
     */
    points_per_day: number;
    /**
     * remainder_points number
     */
    remainder_points: number;
    /**
     * skill_type_id integer
     */
    skill_type_id: number;
    /**
     * started_at string
     */
    started_at: string;
}>;

export type GetCharactersCharacterIdAgentsResearchError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdAssetsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdAssetsResponse = Array<{
    /**
     * is_blueprint_copy boolean
     */
    is_blueprint_copy?: boolean;
    /**
     * is_singleton boolean
     */
    is_singleton: boolean;
    /**
     * item_id integer
     */
    item_id: number;
    /**
     * location_flag string
     */
    location_flag: 'AssetSafety' | 'AutoFit' | 'BoosterBay' | 'Cargo' | 'CorporationGoalDeliveries' | 'CorpseBay' | 'Deliveries' | 'DroneBay' | 'FighterBay' | 'FighterTube0' | 'FighterTube1' | 'FighterTube2' | 'FighterTube3' | 'FighterTube4' | 'FleetHangar' | 'FrigateEscapeBay' | 'Hangar' | 'HangarAll' | 'HiSlot0' | 'HiSlot1' | 'HiSlot2' | 'HiSlot3' | 'HiSlot4' | 'HiSlot5' | 'HiSlot6' | 'HiSlot7' | 'HiddenModifiers' | 'Implant' | 'InfrastructureHangar' | 'LoSlot0' | 'LoSlot1' | 'LoSlot2' | 'LoSlot3' | 'LoSlot4' | 'LoSlot5' | 'LoSlot6' | 'LoSlot7' | 'Locked' | 'MedSlot0' | 'MedSlot1' | 'MedSlot2' | 'MedSlot3' | 'MedSlot4' | 'MedSlot5' | 'MedSlot6' | 'MedSlot7' | 'MobileDepotHold' | 'MoonMaterialBay' | 'QuafeBay' | 'RigSlot0' | 'RigSlot1' | 'RigSlot2' | 'RigSlot3' | 'RigSlot4' | 'RigSlot5' | 'RigSlot6' | 'RigSlot7' | 'ShipHangar' | 'Skill' | 'SpecializedAmmoHold' | 'SpecializedAsteroidHold' | 'SpecializedCommandCenterHold' | 'SpecializedFuelBay' | 'SpecializedGasHold' | 'SpecializedIceHold' | 'SpecializedIndustrialShipHold' | 'SpecializedLargeShipHold' | 'SpecializedMaterialBay' | 'SpecializedMediumShipHold' | 'SpecializedMineralHold' | 'SpecializedOreHold' | 'SpecializedPlanetaryCommoditiesHold' | 'SpecializedSalvageHold' | 'SpecializedShipHold' | 'SpecializedSmallShipHold' | 'StructureDeedBay' | 'SubSystemBay' | 'SubSystemSlot0' | 'SubSystemSlot1' | 'SubSystemSlot2' | 'SubSystemSlot3' | 'SubSystemSlot4' | 'SubSystemSlot5' | 'SubSystemSlot6' | 'SubSystemSlot7' | 'Unlocked' | 'Wardrobe';
    /**
     * location_id integer
     */
    location_id: number;
    /**
     * location_type string
     */
    location_type: 'station' | 'solar_system' | 'item' | 'other';
    /**
     * quantity integer
     */
    quantity: number;
    /**
     * type_id integer
     */
    type_id: number;
}>;

export type GetCharactersCharacterIdAssetsError = string | bad_request | unauthorized | forbidden | {
    /**
     * error message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PostCharactersCharacterIdAssetsLocationsData = {
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PostCharactersCharacterIdAssetsLocationsResponse = Array<{
    /**
     * item_id integer
     */
    item_id: number;
    /**
     * position object
     */
    position: {
        /**
         * x number
         */
        x: number;
        /**
         * y number
         */
        y: number;
        /**
         * z number
         */
        z: number;
    };
}>;

export type PostCharactersCharacterIdAssetsLocationsError = bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PostCharactersCharacterIdAssetsNamesData = {
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PostCharactersCharacterIdAssetsNamesResponse = Array<{
    /**
     * item_id integer
     */
    item_id: number;
    /**
     * name string
     */
    name: string;
}>;

export type PostCharactersCharacterIdAssetsNamesError = bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdAttributesData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdAttributesResponse = {
    /**
     * Neural remapping cooldown after a character uses remap accrued over time
     */
    accrued_remap_cooldown_date?: string;
    /**
     * Number of available bonus character neural remaps
     */
    bonus_remaps?: number;
    /**
     * charisma integer
     */
    charisma: number;
    /**
     * intelligence integer
     */
    intelligence: number;
    /**
     * Datetime of last neural remap, including usage of bonus remaps
     */
    last_remap_date?: string;
    /**
     * memory integer
     */
    memory: number;
    /**
     * perception integer
     */
    perception: number;
    /**
     * willpower integer
     */
    willpower: number;
};

export type GetCharactersCharacterIdAttributesError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdBlueprintsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdBlueprintsResponse = Array<{
    /**
     * Unique ID for this item.
     */
    item_id: number;
    /**
     * Type of the location_id
     */
    location_flag: 'AutoFit' | 'Cargo' | 'CorpseBay' | 'DroneBay' | 'FleetHangar' | 'Deliveries' | 'HiddenModifiers' | 'Hangar' | 'HangarAll' | 'LoSlot0' | 'LoSlot1' | 'LoSlot2' | 'LoSlot3' | 'LoSlot4' | 'LoSlot5' | 'LoSlot6' | 'LoSlot7' | 'MedSlot0' | 'MedSlot1' | 'MedSlot2' | 'MedSlot3' | 'MedSlot4' | 'MedSlot5' | 'MedSlot6' | 'MedSlot7' | 'HiSlot0' | 'HiSlot1' | 'HiSlot2' | 'HiSlot3' | 'HiSlot4' | 'HiSlot5' | 'HiSlot6' | 'HiSlot7' | 'AssetSafety' | 'Locked' | 'Unlocked' | 'Implant' | 'QuafeBay' | 'RigSlot0' | 'RigSlot1' | 'RigSlot2' | 'RigSlot3' | 'RigSlot4' | 'RigSlot5' | 'RigSlot6' | 'RigSlot7' | 'ShipHangar' | 'SpecializedFuelBay' | 'SpecializedOreHold' | 'SpecializedGasHold' | 'SpecializedMineralHold' | 'SpecializedSalvageHold' | 'SpecializedShipHold' | 'SpecializedSmallShipHold' | 'SpecializedMediumShipHold' | 'SpecializedLargeShipHold' | 'SpecializedIndustrialShipHold' | 'SpecializedAmmoHold' | 'SpecializedCommandCenterHold' | 'SpecializedPlanetaryCommoditiesHold' | 'SpecializedMaterialBay' | 'SubSystemSlot0' | 'SubSystemSlot1' | 'SubSystemSlot2' | 'SubSystemSlot3' | 'SubSystemSlot4' | 'SubSystemSlot5' | 'SubSystemSlot6' | 'SubSystemSlot7' | 'FighterBay' | 'FighterTube0' | 'FighterTube1' | 'FighterTube2' | 'FighterTube3' | 'FighterTube4' | 'Module';
    /**
     * References a station, a ship or an item_id if this blueprint is located within a container. If the return value is an item_id, then the Character AssetList API must be queried to find the container using the given item_id to determine the correct location of the Blueprint.
     */
    location_id: number;
    /**
     * Material Efficiency Level of the blueprint.
     */
    material_efficiency: number;
    /**
     * A range of numbers with a minimum of -2 and no maximum value where -1 is an original and -2 is a copy. It can be a positive integer if it is a stack of blueprint originals fresh from the market (e.g. no activities performed on them yet).
     */
    quantity: number;
    /**
     * Number of runs remaining if the blueprint is a copy, -1 if it is an original.
     */
    runs: number;
    /**
     * Time Efficiency Level of the blueprint.
     */
    time_efficiency: number;
    /**
     * type_id integer
     */
    type_id: number;
}>;

export type GetCharactersCharacterIdBlueprintsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdBookmarksData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdBookmarksResponse = Array<{
    /**
     * bookmark_id integer
     */
    bookmark_id: number;
    /**
     * Optional object that is returned if a bookmark was made on a planet or a random location in space.
     */
    coordinates?: {
        /**
         * x number
         */
        x: number;
        /**
         * y number
         */
        y: number;
        /**
         * z number
         */
        z: number;
    };
    /**
     * created string
     */
    created: string;
    /**
     * creator_id integer
     */
    creator_id: number;
    /**
     * folder_id integer
     */
    folder_id?: number;
    /**
     * Optional object that is returned if a bookmark was made on a particular item.
     */
    item?: {
        /**
         * item_id integer
         */
        item_id: number;
        /**
         * type_id integer
         */
        type_id: number;
    };
    /**
     * label string
     */
    label: string;
    /**
     * location_id integer
     */
    location_id: number;
    /**
     * notes string
     */
    notes: string;
}>;

export type GetCharactersCharacterIdBookmarksError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdBookmarksFoldersData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdBookmarksFoldersResponse = Array<{
    /**
     * folder_id integer
     */
    folder_id: number;
    /**
     * name string
     */
    name: string;
}>;

export type GetCharactersCharacterIdBookmarksFoldersError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdCalendarData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * The event ID to retrieve events from
         */
        from_event?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdCalendarResponse = Array<{
    /**
     * event_date string
     */
    event_date?: string;
    /**
     * event_id integer
     */
    event_id?: number;
    /**
     * event_response string
     */
    event_response?: 'declined' | 'not_responded' | 'accepted' | 'tentative';
    /**
     * importance integer
     */
    importance?: number;
    /**
     * title string
     */
    title?: string;
}>;

export type GetCharactersCharacterIdCalendarError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdCalendarEventIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
        /**
         * The id of the event requested
         */
        event_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdCalendarEventIdResponse = {
    /**
     * date string
     */
    date: string;
    /**
     * Length in minutes
     */
    duration: number;
    /**
     * event_id integer
     */
    event_id: number;
    /**
     * importance integer
     */
    importance: number;
    /**
     * owner_id integer
     */
    owner_id: number;
    /**
     * owner_name string
     */
    owner_name: string;
    /**
     * owner_type string
     */
    owner_type: 'eve_server' | 'corporation' | 'faction' | 'character' | 'alliance';
    /**
     * response string
     */
    response: string;
    /**
     * text string
     */
    text: string;
    /**
     * title string
     */
    title: string;
};

export type GetCharactersCharacterIdCalendarEventIdError = string | bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PutCharactersCharacterIdCalendarEventIdData = {
    /**
     * The response value to set, overriding current value
     */
    body: {
        /**
         * response string
         */
        response: 'accepted' | 'declined' | 'tentative';
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
        /**
         * The ID of the event requested
         */
        event_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PutCharactersCharacterIdCalendarEventIdResponse = void;

export type PutCharactersCharacterIdCalendarEventIdError = bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdCalendarEventIdAttendeesData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
        /**
         * The id of the event requested
         */
        event_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdCalendarEventIdAttendeesResponse = Array<{
    /**
     * character_id integer
     */
    character_id?: number;
    /**
     * event_response string
     */
    event_response?: 'declined' | 'not_responded' | 'accepted' | 'tentative';
}>;

export type GetCharactersCharacterIdCalendarEventIdAttendeesError = string | bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdClonesData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdClonesResponse = {
    /**
     * home_location object
     */
    home_location?: {
        /**
         * location_id integer
         */
        location_id?: number;
        /**
         * location_type string
         */
        location_type?: 'station' | 'structure';
    };
    /**
     * jump_clones array
     */
    jump_clones: Array<{
        /**
         * implants array
         */
        implants: Array<(number)>;
        /**
         * jump_clone_id integer
         */
        jump_clone_id: number;
        /**
         * location_id integer
         */
        location_id: number;
        /**
         * location_type string
         */
        location_type: 'station' | 'structure';
        /**
         * name string
         */
        name?: string;
    }>;
    /**
     * last_clone_jump_date string
     */
    last_clone_jump_date?: string;
    /**
     * last_station_change_date string
     */
    last_station_change_date?: string;
};

export type GetCharactersCharacterIdClonesError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type DeleteCharactersCharacterIdContactsData = {
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query: {
        /**
         * A list of contacts to delete
         */
        contact_ids: Array<number>;
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type DeleteCharactersCharacterIdContactsResponse = void;

export type DeleteCharactersCharacterIdContactsError = bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdContactsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdContactsResponse = Array<{
    /**
     * contact_id integer
     */
    contact_id: number;
    /**
     * contact_type string
     */
    contact_type: 'character' | 'corporation' | 'alliance' | 'faction';
    /**
     * Whether this contact is in the blocked list. Note a missing value denotes unknown, not true or false
     */
    is_blocked?: boolean;
    /**
     * Whether this contact is being watched
     */
    is_watched?: boolean;
    /**
     * label_ids array
     */
    label_ids?: Array<(number)>;
    /**
     * Standing of the contact
     */
    standing: number;
}>;

export type GetCharactersCharacterIdContactsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PostCharactersCharacterIdContactsData = {
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Add custom labels to the new contact
         */
        label_ids?: Array<number>;
        /**
         * Standing for the contact
         */
        standing: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
        /**
         * Whether the contact should be watched, note this is only effective on characters
         */
        watched?: boolean;
    };
};

export type PostCharactersCharacterIdContactsResponse = Array<(number)>;

export type PostCharactersCharacterIdContactsError = bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout | {
    /**
     * Error 520 message
     */
    error?: string;
};

export type PutCharactersCharacterIdContactsData = {
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Add custom labels to the contact
         */
        label_ids?: Array<number>;
        /**
         * Standing for the contact
         */
        standing: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
        /**
         * Whether the contact should be watched, note this is only effective on characters
         */
        watched?: boolean;
    };
};

export type PutCharactersCharacterIdContactsResponse = void;

export type PutCharactersCharacterIdContactsError = bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdContactsLabelsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdContactsLabelsResponse = Array<{
    /**
     * label_id integer
     */
    label_id: number;
    /**
     * label_name string
     */
    label_name: string;
}>;

export type GetCharactersCharacterIdContactsLabelsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdContractsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdContractsResponse = Array<{
    /**
     * Who will accept the contract
     */
    acceptor_id: number;
    /**
     * ID to whom the contract is assigned, can be alliance, corporation or character ID
     */
    assignee_id: number;
    /**
     * To whom the contract is available
     */
    availability: 'public' | 'personal' | 'corporation' | 'alliance';
    /**
     * Buyout price (for Auctions only)
     */
    buyout?: number;
    /**
     * Collateral price (for Couriers only)
     */
    collateral?: number;
    /**
     * contract_id integer
     */
    contract_id: number;
    /**
     * Date of confirmation of contract
     */
    date_accepted?: string;
    /**
     * Date of completed of contract
     */
    date_completed?: string;
    /**
     * Expiration date of the contract
     */
    date_expired: string;
    /**
     * Сreation date of the contract
     */
    date_issued: string;
    /**
     * Number of days to perform the contract
     */
    days_to_complete?: number;
    /**
     * End location ID (for Couriers contract)
     */
    end_location_id?: number;
    /**
     * true if the contract was issued on behalf of the issuer's corporation
     */
    for_corporation: boolean;
    /**
     * Character's corporation ID for the issuer
     */
    issuer_corporation_id: number;
    /**
     * Character ID for the issuer
     */
    issuer_id: number;
    /**
     * Price of contract (for ItemsExchange and Auctions)
     */
    price?: number;
    /**
     * Remuneration for contract (for Couriers only)
     */
    reward?: number;
    /**
     * Start location ID (for Couriers contract)
     */
    start_location_id?: number;
    /**
     * Status of the the contract
     */
    status: 'outstanding' | 'in_progress' | 'finished_issuer' | 'finished_contractor' | 'finished' | 'cancelled' | 'rejected' | 'failed' | 'deleted' | 'reversed';
    /**
     * Title of the contract
     */
    title?: string;
    /**
     * Type of the contract
     */
    type: 'unknown' | 'item_exchange' | 'auction' | 'courier' | 'loan';
    /**
     * Volume of items in the contract
     */
    volume?: number;
}>;

export type GetCharactersCharacterIdContractsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdContractsContractIdBidsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
        /**
         * ID of a contract
         */
        contract_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdContractsContractIdBidsResponse = Array<{
    /**
     * The amount bid, in ISK
     */
    amount: number;
    /**
     * Unique ID for the bid
     */
    bid_id: number;
    /**
     * Character ID of the bidder
     */
    bidder_id: number;
    /**
     * Datetime when the bid was placed
     */
    date_bid: string;
}>;

export type GetCharactersCharacterIdContractsContractIdBidsError = string | bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdContractsContractIdItemsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
        /**
         * ID of a contract
         */
        contract_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdContractsContractIdItemsResponse = Array<{
    /**
     * true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract
     */
    is_included: boolean;
    /**
     * is_singleton boolean
     */
    is_singleton: boolean;
    /**
     * Number of items in the stack
     */
    quantity: number;
    /**
     * -1 indicates that the item is a singleton (non-stackable). If the item happens to be a Blueprint, -1 is an Original and -2 is a Blueprint Copy
     */
    raw_quantity?: number;
    /**
     * Unique ID for the item
     */
    record_id: number;
    /**
     * Type ID for item
     */
    type_id: number;
}>;

export type GetCharactersCharacterIdContractsContractIdItemsError = string | bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdCorporationhistoryData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetCharactersCharacterIdCorporationhistoryResponse = Array<{
    /**
     * corporation_id integer
     */
    corporation_id: number;
    /**
     * True if the corporation has been deleted
     */
    is_deleted?: boolean;
    /**
     * An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous
     */
    record_id: number;
    /**
     * start_date string
     */
    start_date: string;
}>;

export type GetCharactersCharacterIdCorporationhistoryError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PostCharactersCharacterIdCspaData = {
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PostCharactersCharacterIdCspaResponse = number;

export type PostCharactersCharacterIdCspaError = bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdFatigueData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdFatigueResponse = {
    /**
     * Character's jump fatigue expiry
     */
    jump_fatigue_expire_date?: string;
    /**
     * Character's last jump activation
     */
    last_jump_date?: string;
    /**
     * Character's last jump update
     */
    last_update_date?: string;
};

export type GetCharactersCharacterIdFatigueError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdFittingsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdFittingsResponse = Array<{
    /**
     * description string
     */
    description: string;
    /**
     * fitting_id integer
     */
    fitting_id: number;
    /**
     * items array
     */
    items: Array<{
        /**
         * flag string
         */
        flag: 'Cargo' | 'DroneBay' | 'FighterBay' | 'HiSlot0' | 'HiSlot1' | 'HiSlot2' | 'HiSlot3' | 'HiSlot4' | 'HiSlot5' | 'HiSlot6' | 'HiSlot7' | 'Invalid' | 'LoSlot0' | 'LoSlot1' | 'LoSlot2' | 'LoSlot3' | 'LoSlot4' | 'LoSlot5' | 'LoSlot6' | 'LoSlot7' | 'MedSlot0' | 'MedSlot1' | 'MedSlot2' | 'MedSlot3' | 'MedSlot4' | 'MedSlot5' | 'MedSlot6' | 'MedSlot7' | 'RigSlot0' | 'RigSlot1' | 'RigSlot2' | 'ServiceSlot0' | 'ServiceSlot1' | 'ServiceSlot2' | 'ServiceSlot3' | 'ServiceSlot4' | 'ServiceSlot5' | 'ServiceSlot6' | 'ServiceSlot7' | 'SubSystemSlot0' | 'SubSystemSlot1' | 'SubSystemSlot2' | 'SubSystemSlot3';
        /**
         * quantity integer
         */
        quantity: number;
        /**
         * type_id integer
         */
        type_id: number;
    }>;
    /**
     * name string
     */
    name: string;
    /**
     * ship_type_id integer
     */
    ship_type_id: number;
}>;

export type GetCharactersCharacterIdFittingsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PostCharactersCharacterIdFittingsData = {
    /**
     * Details about the new fitting
     */
    body: {
        /**
         * description string
         */
        description: string;
        /**
         * items array
         */
        items: Array<{
            /**
             * Fitting location for the item. Entries placed in 'Invalid' will be discarded. If this leaves the fitting with nothing, it will cause an error.
             */
            flag: 'Cargo' | 'DroneBay' | 'FighterBay' | 'HiSlot0' | 'HiSlot1' | 'HiSlot2' | 'HiSlot3' | 'HiSlot4' | 'HiSlot5' | 'HiSlot6' | 'HiSlot7' | 'Invalid' | 'LoSlot0' | 'LoSlot1' | 'LoSlot2' | 'LoSlot3' | 'LoSlot4' | 'LoSlot5' | 'LoSlot6' | 'LoSlot7' | 'MedSlot0' | 'MedSlot1' | 'MedSlot2' | 'MedSlot3' | 'MedSlot4' | 'MedSlot5' | 'MedSlot6' | 'MedSlot7' | 'RigSlot0' | 'RigSlot1' | 'RigSlot2' | 'ServiceSlot0' | 'ServiceSlot1' | 'ServiceSlot2' | 'ServiceSlot3' | 'ServiceSlot4' | 'ServiceSlot5' | 'ServiceSlot6' | 'ServiceSlot7' | 'SubSystemSlot0' | 'SubSystemSlot1' | 'SubSystemSlot2' | 'SubSystemSlot3';
            /**
             * quantity integer
             */
            quantity: number;
            /**
             * type_id integer
             */
            type_id: number;
        }>;
        /**
         * name string
         */
        name: string;
        /**
         * ship_type_id integer
         */
        ship_type_id: number;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PostCharactersCharacterIdFittingsResponse = {
    /**
     * fitting_id integer
     */
    fitting_id: number;
};

export type PostCharactersCharacterIdFittingsError = bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type DeleteCharactersCharacterIdFittingsFittingIdData = {
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
        /**
         * ID for a fitting of this character
         */
        fitting_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type DeleteCharactersCharacterIdFittingsFittingIdResponse = void;

export type DeleteCharactersCharacterIdFittingsFittingIdError = bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdFleetData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdFleetResponse = {
    /**
     * The character's current fleet ID
     */
    fleet_id: number;
    /**
     * Member’s role in fleet
     */
    role: 'fleet_commander' | 'squad_commander' | 'squad_member' | 'wing_commander';
    /**
     * ID of the squad the member is in. If not applicable, will be set to -1
     */
    squad_id: number;
    /**
     * ID of the wing the member is in. If not applicable, will be set to -1
     */
    wing_id: number;
};

export type GetCharactersCharacterIdFleetError = string | bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdFwStatsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdFwStatsResponse = {
    /**
     * The given character's current faction rank
     */
    current_rank?: number;
    /**
     * The enlistment date of the given character into faction warfare. Will not be included if character is not enlisted in faction warfare
     */
    enlisted_on?: string;
    /**
     * The faction the given character is enlisted to fight for. Will not be included if character is not enlisted in faction warfare
     */
    faction_id?: number;
    /**
     * The given character's highest faction rank achieved
     */
    highest_rank?: number;
    /**
     * Summary of kills done by the given character against enemy factions
     */
    kills: {
        /**
         * Last week's total number of kills by a given character against enemy factions
         */
        last_week: number;
        /**
         * Total number of kills by a given character against enemy factions since the character enlisted
         */
        total: number;
        /**
         * Yesterday's total number of kills by a given character against enemy factions
         */
        yesterday: number;
    };
    /**
     * Summary of victory points gained by the given character for the enlisted faction
     */
    victory_points: {
        /**
         * Last week's victory points gained by the given character
         */
        last_week: number;
        /**
         * Total victory points gained since the given character enlisted
         */
        total: number;
        /**
         * Yesterday's victory points gained by the given character
         */
        yesterday: number;
    };
};

export type GetCharactersCharacterIdFwStatsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdImplantsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdImplantsResponse = Array<(number)>;

export type GetCharactersCharacterIdImplantsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdIndustryJobsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Whether to retrieve completed character industry jobs. Only includes jobs from the past 90 days
         */
        include_completed?: boolean;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdIndustryJobsResponse = Array<{
    /**
     * Job activity ID
     */
    activity_id: number;
    /**
     * blueprint_id integer
     */
    blueprint_id: number;
    /**
     * Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility
     */
    blueprint_location_id: number;
    /**
     * blueprint_type_id integer
     */
    blueprint_type_id: number;
    /**
     * ID of the character which completed this job
     */
    completed_character_id?: number;
    /**
     * Date and time when this job was completed
     */
    completed_date?: string;
    /**
     * The sume of job installation fee and industry facility tax
     */
    cost?: number;
    /**
     * Job duration in seconds
     */
    duration: number;
    /**
     * Date and time when this job finished
     */
    end_date: string;
    /**
     * ID of the facility where this job is running
     */
    facility_id: number;
    /**
     * ID of the character which installed this job
     */
    installer_id: number;
    /**
     * Unique job ID
     */
    job_id: number;
    /**
     * Number of runs blueprint is licensed for
     */
    licensed_runs?: number;
    /**
     * Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility
     */
    output_location_id: number;
    /**
     * Date and time when this job was paused (i.e. time when the facility where this job was installed went offline)
     */
    pause_date?: string;
    /**
     * Chance of success for invention
     */
    probability?: number;
    /**
     * Type ID of product (manufactured, copied or invented)
     */
    product_type_id?: number;
    /**
     * Number of runs for a manufacturing job, or number of copies to make for a blueprint copy
     */
    runs: number;
    /**
     * Date and time when this job started
     */
    start_date: string;
    /**
     * ID of the station where industry facility is located
     */
    station_id: number;
    /**
     * status string
     */
    status: 'active' | 'cancelled' | 'delivered' | 'paused' | 'ready' | 'reverted';
    /**
     * Number of successful runs for this job. Equal to runs unless this is an invention job
     */
    successful_runs?: number;
}>;

export type GetCharactersCharacterIdIndustryJobsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdKillmailsRecentData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdKillmailsRecentResponse = Array<{
    /**
     * A hash of this killmail
     */
    killmail_hash: string;
    /**
     * ID of this killmail
     */
    killmail_id: number;
}>;

export type GetCharactersCharacterIdKillmailsRecentError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdLocationData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdLocationResponse = {
    /**
     * solar_system_id integer
     */
    solar_system_id: number;
    /**
     * station_id integer
     */
    station_id?: number;
    /**
     * structure_id integer
     */
    structure_id?: number;
};

export type GetCharactersCharacterIdLocationError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdLoyaltyPointsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdLoyaltyPointsResponse = Array<{
    /**
     * corporation_id integer
     */
    corporation_id: number;
    /**
     * loyalty_points integer
     */
    loyalty_points: number;
}>;

export type GetCharactersCharacterIdLoyaltyPointsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdMailData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Fetch only mails that match one or more of the given labels
         */
        labels?: Array<number>;
        /**
         * List only mail with an ID lower than the given ID, if present
         */
        last_mail_id?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdMailResponse = Array<{
    /**
     * From whom the mail was sent
     */
    from?: number;
    /**
     * is_read boolean
     */
    is_read?: boolean;
    /**
     * labels array
     */
    labels?: Array<(number)>;
    /**
     * mail_id integer
     */
    mail_id?: number;
    /**
     * Recipients of the mail
     */
    recipients?: Array<{
        /**
         * recipient_id integer
         */
        recipient_id: number;
        /**
         * recipient_type string
         */
        recipient_type: 'alliance' | 'character' | 'corporation' | 'mailing_list';
    }>;
    /**
     * Mail subject
     */
    subject?: string;
    /**
     * When the mail was sent
     */
    timestamp?: string;
}>;

export type GetCharactersCharacterIdMailError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PostCharactersCharacterIdMailData = {
    /**
     * The mail to send
     */
    body: {
        /**
         * approved_cost integer
         */
        approved_cost?: number;
        /**
         * body string
         */
        body: string;
        /**
         * recipients array
         */
        recipients: Array<{
            /**
             * recipient_id integer
             */
            recipient_id: number;
            /**
             * recipient_type string
             */
            recipient_type: 'alliance' | 'character' | 'corporation' | 'mailing_list';
        }>;
        /**
         * subject string
         */
        subject: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PostCharactersCharacterIdMailResponse = number;

export type PostCharactersCharacterIdMailError = bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout | {
    /**
     * Error 520 message
     */
    error?: string;
};

export type GetCharactersCharacterIdMailLabelsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdMailLabelsResponse = {
    /**
     * labels array
     */
    labels?: Array<{
        /**
         * color string
         */
        color?: '#0000fe' | '#006634' | '#0099ff' | '#00ff33' | '#01ffff' | '#349800' | '#660066' | '#666666' | '#999999' | '#99ffff' | '#9a0000' | '#ccff9a' | '#e6e6e6' | '#fe0000' | '#ff6600' | '#ffff01' | '#ffffcd' | '#ffffff';
        /**
         * label_id integer
         */
        label_id?: number;
        /**
         * name string
         */
        name?: string;
        /**
         * unread_count integer
         */
        unread_count?: number;
    }>;
    /**
     * total_unread_count integer
     */
    total_unread_count?: number;
};

export type GetCharactersCharacterIdMailLabelsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PostCharactersCharacterIdMailLabelsData = {
    /**
     * Label to create
     */
    body: {
        /**
         * Hexadecimal string representing label color, in RGB format
         */
        color?: '#0000fe' | '#006634' | '#0099ff' | '#00ff33' | '#01ffff' | '#349800' | '#660066' | '#666666' | '#999999' | '#99ffff' | '#9a0000' | '#ccff9a' | '#e6e6e6' | '#fe0000' | '#ff6600' | '#ffff01' | '#ffffcd' | '#ffffff';
        /**
         * name string
         */
        name: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PostCharactersCharacterIdMailLabelsResponse = number;

export type PostCharactersCharacterIdMailLabelsError = bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type DeleteCharactersCharacterIdMailLabelsLabelIdData = {
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
        /**
         * An EVE label id
         */
        label_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type DeleteCharactersCharacterIdMailLabelsLabelIdResponse = void;

export type DeleteCharactersCharacterIdMailLabelsLabelIdError = bad_request | unauthorized | forbidden | error_limited | {
    /**
     * Unprocessable entity message
     */
    error?: string;
} | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdMailListsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdMailListsResponse = Array<{
    /**
     * Mailing list ID
     */
    mailing_list_id: number;
    /**
     * name string
     */
    name: string;
}>;

export type GetCharactersCharacterIdMailListsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type DeleteCharactersCharacterIdMailMailIdData = {
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
        /**
         * An EVE mail ID
         */
        mail_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type DeleteCharactersCharacterIdMailMailIdResponse = void;

export type DeleteCharactersCharacterIdMailMailIdError = bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdMailMailIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
        /**
         * An EVE mail ID
         */
        mail_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdMailMailIdResponse = {
    /**
     * Mail's body
     */
    body?: string;
    /**
     * From whom the mail was sent
     */
    from?: number;
    /**
     * Labels attached to the mail
     */
    labels?: Array<(number)>;
    /**
     * Whether the mail is flagged as read
     */
    read?: boolean;
    /**
     * Recipients of the mail
     */
    recipients?: Array<{
        /**
         * recipient_id integer
         */
        recipient_id: number;
        /**
         * recipient_type string
         */
        recipient_type: 'alliance' | 'character' | 'corporation' | 'mailing_list';
    }>;
    /**
     * Mail subject
     */
    subject?: string;
    /**
     * When the mail was sent
     */
    timestamp?: string;
};

export type GetCharactersCharacterIdMailMailIdError = string | bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PutCharactersCharacterIdMailMailIdData = {
    /**
     * Data used to update the mail
     */
    body: {
        /**
         * Labels to assign to the mail. Pre-existing labels are unassigned.
         */
        labels?: Array<(number)>;
        /**
         * Whether the mail is flagged as read
         */
        read?: boolean;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
        /**
         * An EVE mail ID
         */
        mail_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PutCharactersCharacterIdMailMailIdResponse = void;

export type PutCharactersCharacterIdMailMailIdError = bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdMedalsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdMedalsResponse = Array<{
    /**
     * corporation_id integer
     */
    corporation_id: number;
    /**
     * date string
     */
    date: string;
    /**
     * description string
     */
    description: string;
    /**
     * graphics array
     */
    graphics: Array<{
        /**
         * color integer
         */
        color?: number;
        /**
         * graphic string
         */
        graphic: string;
        /**
         * layer integer
         */
        layer: number;
        /**
         * part integer
         */
        part: number;
    }>;
    /**
     * issuer_id integer
     */
    issuer_id: number;
    /**
     * medal_id integer
     */
    medal_id: number;
    /**
     * reason string
     */
    reason: string;
    /**
     * status string
     */
    status: 'public' | 'private';
    /**
     * title string
     */
    title: string;
}>;

export type GetCharactersCharacterIdMedalsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdMiningData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdMiningResponse = Array<{
    /**
     * date string
     */
    date: string;
    /**
     * quantity integer
     */
    quantity: number;
    /**
     * solar_system_id integer
     */
    solar_system_id: number;
    /**
     * type_id integer
     */
    type_id: number;
}>;

export type GetCharactersCharacterIdMiningError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdNotificationsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdNotificationsResponse = Array<{
    /**
     * is_read boolean
     */
    is_read?: boolean;
    /**
     * notification_id integer
     */
    notification_id: number;
    /**
     * sender_id integer
     */
    sender_id: number;
    /**
     * sender_type string
     */
    sender_type: 'character' | 'corporation' | 'alliance' | 'faction' | 'other';
    /**
     * text string
     */
    text?: string;
    /**
     * timestamp string
     */
    timestamp: string;
    /**
     * type string
     */
    type: 'AcceptedAlly' | 'AcceptedSurrender' | 'AgentRetiredTrigravian' | 'AllAnchoringMsg' | 'AllMaintenanceBillMsg' | 'AllStrucInvulnerableMsg' | 'AllStructVulnerableMsg' | 'AllWarCorpJoinedAllianceMsg' | 'AllWarDeclaredMsg' | 'AllWarInvalidatedMsg' | 'AllWarRetractedMsg' | 'AllWarSurrenderMsg' | 'AllianceCapitalChanged' | 'AllianceWarDeclaredV2' | 'AllyContractCancelled' | 'AllyJoinedWarAggressorMsg' | 'AllyJoinedWarAllyMsg' | 'AllyJoinedWarDefenderMsg' | 'BattlePunishFriendlyFire' | 'BillOutOfMoneyMsg' | 'BillPaidCorpAllMsg' | 'BountyClaimMsg' | 'BountyESSShared' | 'BountyESSTaken' | 'BountyPlacedAlliance' | 'BountyPlacedChar' | 'BountyPlacedCorp' | 'BountyYourBountyClaimed' | 'BuddyConnectContactAdd' | 'CharAppAcceptMsg' | 'CharAppRejectMsg' | 'CharAppWithdrawMsg' | 'CharLeftCorpMsg' | 'CharMedalMsg' | 'CharTerminationMsg' | 'CloneActivationMsg' | 'CloneActivationMsg2' | 'CloneMovedMsg' | 'CloneRevokedMsg1' | 'CloneRevokedMsg2' | 'CombatOperationFinished' | 'ContactAdd' | 'ContactEdit' | 'ContainerPasswordMsg' | 'ContractRegionChangedToPochven' | 'CorpAllBillMsg' | 'CorpAppAcceptMsg' | 'CorpAppInvitedMsg' | 'CorpAppNewMsg' | 'CorpAppRejectCustomMsg' | 'CorpAppRejectMsg' | 'CorpBecameWarEligible' | 'CorpDividendMsg' | 'CorpFriendlyFireDisableTimerCompleted' | 'CorpFriendlyFireDisableTimerStarted' | 'CorpFriendlyFireEnableTimerCompleted' | 'CorpFriendlyFireEnableTimerStarted' | 'CorpKicked' | 'CorpLiquidationMsg' | 'CorpNewCEOMsg' | 'CorpNewsMsg' | 'CorpNoLongerWarEligible' | 'CorpOfficeExpirationMsg' | 'CorpStructLostMsg' | 'CorpTaxChangeMsg' | 'CorpVoteCEORevokedMsg' | 'CorpVoteMsg' | 'CorpWarDeclaredMsg' | 'CorpWarDeclaredV2' | 'CorpWarFightingLegalMsg' | 'CorpWarInvalidatedMsg' | 'CorpWarRetractedMsg' | 'CorpWarSurrenderMsg' | 'CorporationGoalClosed' | 'CorporationGoalCompleted' | 'CorporationGoalCreated' | 'CorporationGoalNameChange' | 'CorporationLeft' | 'CustomsMsg' | 'DeclareWar' | 'DistrictAttacked' | 'DustAppAcceptedMsg' | 'ESSMainBankLink' | 'EntosisCaptureStarted' | 'ExpertSystemExpired' | 'ExpertSystemExpiryImminent' | 'FWAllianceKickMsg' | 'FWAllianceWarningMsg' | 'FWCharKickMsg' | 'FWCharRankGainMsg' | 'FWCharRankLossMsg' | 'FWCharWarningMsg' | 'FWCorpJoinMsg' | 'FWCorpKickMsg' | 'FWCorpLeaveMsg' | 'FWCorpWarningMsg' | 'FacWarCorpJoinRequestMsg' | 'FacWarCorpJoinWithdrawMsg' | 'FacWarCorpLeaveRequestMsg' | 'FacWarCorpLeaveWithdrawMsg' | 'FacWarLPDisqualifiedEvent' | 'FacWarLPDisqualifiedKill' | 'FacWarLPPayoutEvent' | 'FacWarLPPayoutKill' | 'GameTimeAdded' | 'GameTimeReceived' | 'GameTimeSent' | 'GiftReceived' | 'IHubDestroyedByBillFailure' | 'IncursionCompletedMsg' | 'IndustryOperationFinished' | 'IndustryTeamAuctionLost' | 'IndustryTeamAuctionWon' | 'InfrastructureHubBillAboutToExpire' | 'InsuranceExpirationMsg' | 'InsuranceFirstShipMsg' | 'InsuranceInvalidatedMsg' | 'InsuranceIssuedMsg' | 'InsurancePayoutMsg' | 'InvasionCompletedMsg' | 'InvasionSystemLogin' | 'InvasionSystemStart' | 'JumpCloneDeletedMsg1' | 'JumpCloneDeletedMsg2' | 'KillReportFinalBlow' | 'KillReportVictim' | 'KillRightAvailable' | 'KillRightAvailableOpen' | 'KillRightEarned' | 'KillRightUnavailable' | 'KillRightUnavailableOpen' | 'KillRightUsed' | 'LPAutoRedeemed' | 'LocateCharMsg' | 'MadeWarMutual' | 'MercOfferRetractedMsg' | 'MercOfferedNegotiationMsg' | 'MissionCanceledTriglavian' | 'MissionOfferExpirationMsg' | 'MissionTimeoutMsg' | 'MoonminingAutomaticFracture' | 'MoonminingExtractionCancelled' | 'MoonminingExtractionFinished' | 'MoonminingExtractionStarted' | 'MoonminingLaserFired' | 'MutualWarExpired' | 'MutualWarInviteAccepted' | 'MutualWarInviteRejected' | 'MutualWarInviteSent' | 'NPCStandingsGained' | 'NPCStandingsLost' | 'OfferToAllyRetracted' | 'OfferedSurrender' | 'OfferedToAlly' | 'OfficeLeaseCanceledInsufficientStandings' | 'OldLscMessages' | 'OperationFinished' | 'OrbitalAttacked' | 'OrbitalReinforced' | 'OwnershipTransferred' | 'RaffleCreated' | 'RaffleExpired' | 'RaffleFinished' | 'ReimbursementMsg' | 'ResearchMissionAvailableMsg' | 'RetractsWar' | 'SPAutoRedeemed' | 'SeasonalChallengeCompleted' | 'SkinSequencingCompleted' | 'SkyhookDeployed' | 'SkyhookDestroyed' | 'SkyhookLostShields' | 'SkyhookOnline' | 'SkyhookUnderAttack' | 'SovAllClaimAquiredMsg' | 'SovAllClaimLostMsg' | 'SovCommandNodeEventStarted' | 'SovCorpBillLateMsg' | 'SovCorpClaimFailMsg' | 'SovDisruptorMsg' | 'SovStationEnteredFreeport' | 'SovStructureDestroyed' | 'SovStructureReinforced' | 'SovStructureSelfDestructCancel' | 'SovStructureSelfDestructFinished' | 'SovStructureSelfDestructRequested' | 'SovereigntyIHDamageMsg' | 'SovereigntySBUDamageMsg' | 'SovereigntyTCUDamageMsg' | 'StationAggressionMsg1' | 'StationAggressionMsg2' | 'StationConquerMsg' | 'StationServiceDisabled' | 'StationServiceEnabled' | 'StationStateChangeMsg' | 'StoryLineMissionAvailableMsg' | 'StructureAnchoring' | 'StructureCourierContractChanged' | 'StructureDestroyed' | 'StructureFuelAlert' | 'StructureImpendingAbandonmentAssetsAtRisk' | 'StructureItemsDelivered' | 'StructureItemsMovedToSafety' | 'StructureLostArmor' | 'StructureLostShields' | 'StructureLowReagentsAlert' | 'StructureNoReagentsAlert' | 'StructureOnline' | 'StructurePaintPurchased' | 'StructureServicesOffline' | 'StructureUnanchoring' | 'StructureUnderAttack' | 'StructureWentHighPower' | 'StructureWentLowPower' | 'StructuresJobsCancelled' | 'StructuresJobsPaused' | 'StructuresReinforcementChanged' | 'TowerAlertMsg' | 'TowerResourceAlertMsg' | 'TransactionReversalMsg' | 'TutorialMsg' | 'WarAdopted ' | 'WarAllyInherited' | 'WarAllyOfferDeclinedMsg' | 'WarConcordInvalidates' | 'WarDeclared' | 'WarEndedHqSecurityDrop' | 'WarHQRemovedFromSpace' | 'WarInherited' | 'WarInvalid' | 'WarRetracted' | 'WarRetractedByConcord' | 'WarSurrenderDeclinedMsg' | 'WarSurrenderOfferMsg';
}>;

export type GetCharactersCharacterIdNotificationsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdNotificationsContactsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdNotificationsContactsResponse = Array<{
    /**
     * message string
     */
    message: string;
    /**
     * notification_id integer
     */
    notification_id: number;
    /**
     * send_date string
     */
    send_date: string;
    /**
     * sender_character_id integer
     */
    sender_character_id: number;
    /**
     * A number representing the standing level the receiver has been added at by the sender. The standing levels are as follows: -10 -> Terrible | -5 -> Bad |  0 -> Neutral |  5 -> Good |  10 -> Excellent
     */
    standing_level: number;
}>;

export type GetCharactersCharacterIdNotificationsContactsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdOnlineData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdOnlineResponse = {
    /**
     * Timestamp of the last login
     */
    last_login?: string;
    /**
     * Timestamp of the last logout
     */
    last_logout?: string;
    /**
     * Total number of times the character has logged in
     */
    logins?: number;
    /**
     * If the character is online
     */
    online: boolean;
};

export type GetCharactersCharacterIdOnlineError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdOpportunitiesData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdOpportunitiesResponse = Array<{
    /**
     * completed_at string
     */
    completed_at: string;
    /**
     * task_id integer
     */
    task_id: number;
}>;

export type GetCharactersCharacterIdOpportunitiesError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdOrdersData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdOrdersResponse = Array<{
    /**
     * Number of days for which order is valid (starting from the issued date). An order expires at time issued + duration
     */
    duration: number;
    /**
     * For buy orders, the amount of ISK in escrow
     */
    escrow?: number;
    /**
     * True if the order is a bid (buy) order
     */
    is_buy_order?: boolean;
    /**
     * Signifies whether the buy/sell order was placed on behalf of a corporation.
     */
    is_corporation: boolean;
    /**
     * Date and time when this order was issued
     */
    issued: string;
    /**
     * ID of the location where order was placed
     */
    location_id: number;
    /**
     * For buy orders, the minimum quantity that will be accepted in a matching sell order
     */
    min_volume?: number;
    /**
     * Unique order ID
     */
    order_id: number;
    /**
     * Cost per unit for this order
     */
    price: number;
    /**
     * Valid order range, numbers are ranges in jumps
     */
    range: '1' | '10' | '2' | '20' | '3' | '30' | '4' | '40' | '5' | 'region' | 'solarsystem' | 'station';
    /**
     * ID of the region where order was placed
     */
    region_id: number;
    /**
     * The type ID of the item transacted in this order
     */
    type_id: number;
    /**
     * Quantity of items still required or offered
     */
    volume_remain: number;
    /**
     * Quantity of items required or offered at time order was placed
     */
    volume_total: number;
}>;

export type GetCharactersCharacterIdOrdersError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdOrdersHistoryData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdOrdersHistoryResponse = Array<{
    /**
     * Number of days the order was valid for (starting from the issued date). An order expires at time issued + duration
     */
    duration: number;
    /**
     * For buy orders, the amount of ISK in escrow
     */
    escrow?: number;
    /**
     * True if the order is a bid (buy) order
     */
    is_buy_order?: boolean;
    /**
     * Signifies whether the buy/sell order was placed on behalf of a corporation.
     */
    is_corporation: boolean;
    /**
     * Date and time when this order was issued
     */
    issued: string;
    /**
     * ID of the location where order was placed
     */
    location_id: number;
    /**
     * For buy orders, the minimum quantity that will be accepted in a matching sell order
     */
    min_volume?: number;
    /**
     * Unique order ID
     */
    order_id: number;
    /**
     * Cost per unit for this order
     */
    price: number;
    /**
     * Valid order range, numbers are ranges in jumps
     */
    range: '1' | '10' | '2' | '20' | '3' | '30' | '4' | '40' | '5' | 'region' | 'solarsystem' | 'station';
    /**
     * ID of the region where order was placed
     */
    region_id: number;
    /**
     * Current order state
     */
    state: 'cancelled' | 'expired';
    /**
     * The type ID of the item transacted in this order
     */
    type_id: number;
    /**
     * Quantity of items still required or offered
     */
    volume_remain: number;
    /**
     * Quantity of items required or offered at time order was placed
     */
    volume_total: number;
}>;

export type GetCharactersCharacterIdOrdersHistoryError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdPlanetsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdPlanetsResponse = Array<{
    /**
     * last_update string
     */
    last_update: string;
    /**
     * num_pins integer
     */
    num_pins: number;
    /**
     * owner_id integer
     */
    owner_id: number;
    /**
     * planet_id integer
     */
    planet_id: number;
    /**
     * planet_type string
     */
    planet_type: 'temperate' | 'barren' | 'oceanic' | 'ice' | 'gas' | 'lava' | 'storm' | 'plasma';
    /**
     * solar_system_id integer
     */
    solar_system_id: number;
    /**
     * upgrade_level integer
     */
    upgrade_level: number;
}>;

export type GetCharactersCharacterIdPlanetsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdPlanetsPlanetIdData = {
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
        /**
         * Planet id of the target planet
         */
        planet_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdPlanetsPlanetIdResponse = {
    /**
     * links array
     */
    links: Array<{
        /**
         * destination_pin_id integer
         */
        destination_pin_id: number;
        /**
         * link_level integer
         */
        link_level: number;
        /**
         * source_pin_id integer
         */
        source_pin_id: number;
    }>;
    /**
     * pins array
     */
    pins: Array<{
        /**
         * contents array
         */
        contents?: Array<{
            /**
             * amount integer
             */
            amount: number;
            /**
             * type_id integer
             */
            type_id: number;
        }>;
        /**
         * expiry_time string
         */
        expiry_time?: string;
        /**
         * extractor_details object
         */
        extractor_details?: {
            /**
             * in seconds
             */
            cycle_time?: number;
            /**
             * head_radius number
             */
            head_radius?: number;
            /**
             * heads array
             */
            heads: Array<{
                /**
                 * head_id integer
                 */
                head_id: number;
                /**
                 * latitude number
                 */
                latitude: number;
                /**
                 * longitude number
                 */
                longitude: number;
            }>;
            /**
             * product_type_id integer
             */
            product_type_id?: number;
            /**
             * qty_per_cycle integer
             */
            qty_per_cycle?: number;
        };
        /**
         * factory_details object
         */
        factory_details?: {
            /**
             * schematic_id integer
             */
            schematic_id: number;
        };
        /**
         * install_time string
         */
        install_time?: string;
        /**
         * last_cycle_start string
         */
        last_cycle_start?: string;
        /**
         * latitude number
         */
        latitude: number;
        /**
         * longitude number
         */
        longitude: number;
        /**
         * pin_id integer
         */
        pin_id: number;
        /**
         * schematic_id integer
         */
        schematic_id?: number;
        /**
         * type_id integer
         */
        type_id: number;
    }>;
    /**
     * routes array
     */
    routes: Array<{
        /**
         * content_type_id integer
         */
        content_type_id: number;
        /**
         * destination_pin_id integer
         */
        destination_pin_id: number;
        /**
         * quantity number
         */
        quantity: number;
        /**
         * route_id integer
         */
        route_id: number;
        /**
         * source_pin_id integer
         */
        source_pin_id: number;
        /**
         * list of pin ID waypoints
         */
        waypoints?: Array<(number)>;
    }>;
};

export type GetCharactersCharacterIdPlanetsPlanetIdError = bad_request | unauthorized | forbidden | {
    /**
     * error message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdPortraitData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetCharactersCharacterIdPortraitResponse = {
    /**
     * px128x128 string
     */
    px128x128?: string;
    /**
     * px256x256 string
     */
    px256x256?: string;
    /**
     * px512x512 string
     */
    px512x512?: string;
    /**
     * px64x64 string
     */
    px64x64?: string;
};

export type GetCharactersCharacterIdPortraitError = string | bad_request | {
    /**
     * error message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdRolesData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdRolesResponse = {
    /**
     * roles array
     */
    roles?: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
    /**
     * roles_at_base array
     */
    roles_at_base?: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
    /**
     * roles_at_hq array
     */
    roles_at_hq?: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
    /**
     * roles_at_other array
     */
    roles_at_other?: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
};

export type GetCharactersCharacterIdRolesError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdSearchData = {
    headers?: {
        /**
         * Language to use in the response
         */
        'Accept-Language'?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query: {
        /**
         * Type of entities to search for
         */
        categories: Array<string>;
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Language to use in the response, takes precedence over Accept-Language
         */
        language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * The string to search on
         */
        search: string;
        /**
         * Whether the search should be a strict match
         */
        strict?: boolean;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdSearchResponse = {
    /**
     * agent array
     */
    agent?: Array<(number)>;
    /**
     * alliance array
     */
    alliance?: Array<(number)>;
    /**
     * character array
     */
    character?: Array<(number)>;
    /**
     * constellation array
     */
    constellation?: Array<(number)>;
    /**
     * corporation array
     */
    corporation?: Array<(number)>;
    /**
     * faction array
     */
    faction?: Array<(number)>;
    /**
     * inventory_type array
     */
    inventory_type?: Array<(number)>;
    /**
     * region array
     */
    region?: Array<(number)>;
    /**
     * solar_system array
     */
    solar_system?: Array<(number)>;
    /**
     * station array
     */
    station?: Array<(number)>;
    /**
     * structure array
     */
    structure?: Array<(number)>;
};

export type GetCharactersCharacterIdSearchError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdShipData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdShipResponse = {
    /**
     * Item id's are unique to a ship and persist until it is repackaged. This value can be used to track repeated uses of a ship, or detect when a pilot changes into a different instance of the same ship type.
     */
    ship_item_id: number;
    /**
     * ship_name string
     */
    ship_name: string;
    /**
     * ship_type_id integer
     */
    ship_type_id: number;
};

export type GetCharactersCharacterIdShipError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdSkillqueueData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdSkillqueueResponse = Array<{
    /**
     * Date on which training of the skill will complete. Omitted if the skill queue is paused.
     */
    finish_date?: string;
    /**
     * finished_level integer
     */
    finished_level: number;
    /**
     * level_end_sp integer
     */
    level_end_sp?: number;
    /**
     * Amount of SP that was in the skill when it started training it's current level. Used to calculate % of current level complete.
     */
    level_start_sp?: number;
    /**
     * queue_position integer
     */
    queue_position: number;
    /**
     * skill_id integer
     */
    skill_id: number;
    /**
     * start_date string
     */
    start_date?: string;
    /**
     * training_start_sp integer
     */
    training_start_sp?: number;
}>;

export type GetCharactersCharacterIdSkillqueueError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdSkillsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdSkillsResponse = {
    /**
     * skills array
     */
    skills: Array<{
        /**
         * active_skill_level integer
         */
        active_skill_level: number;
        /**
         * skill_id integer
         */
        skill_id: number;
        /**
         * skillpoints_in_skill integer
         */
        skillpoints_in_skill: number;
        /**
         * trained_skill_level integer
         */
        trained_skill_level: number;
    }>;
    /**
     * total_sp integer
     */
    total_sp: number;
    /**
     * Skill points available to be assigned
     */
    unallocated_sp?: number;
};

export type GetCharactersCharacterIdSkillsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdStandingsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdStandingsResponse = Array<{
    /**
     * from_id integer
     */
    from_id: number;
    /**
     * from_type string
     */
    from_type: 'agent' | 'npc_corp' | 'faction';
    /**
     * standing number
     */
    standing: number;
}>;

export type GetCharactersCharacterIdStandingsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdTitlesData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdTitlesResponse = Array<{
    /**
     * name string
     */
    name?: string;
    /**
     * title_id integer
     */
    title_id?: number;
}>;

export type GetCharactersCharacterIdTitlesError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdWalletData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdWalletResponse = number;

export type GetCharactersCharacterIdWalletError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdWalletJournalData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdWalletJournalResponse = Array<{
    /**
     * The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet and negative when ISK is withdrawn
     */
    amount?: number;
    /**
     * Wallet balance after transaction occurred
     */
    balance?: number;
    /**
     * An ID that gives extra context to the particular transaction. Because of legacy reasons the context is completely different per ref_type and means different things. It is also possible to not have a context_id
     */
    context_id?: number;
    /**
     * The type of the given context_id if present
     */
    context_id_type?: 'structure_id' | 'station_id' | 'market_transaction_id' | 'character_id' | 'corporation_id' | 'alliance_id' | 'eve_system' | 'industry_job_id' | 'contract_id' | 'planet_id' | 'system_id' | 'type_id';
    /**
     * Date and time of transaction
     */
    date: string;
    /**
     * The reason for the transaction, mirrors what is seen in the client
     */
    description: string;
    /**
     * The id of the first party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
     */
    first_party_id?: number;
    /**
     * Unique journal reference ID
     */
    id: number;
    /**
     * The user stated reason for the transaction. Only applies to some ref_types
     */
    reason?: string;
    /**
     * "The transaction type for the given. transaction. Different transaction types will populate different attributes."
     */
    ref_type: 'acceleration_gate_fee' | 'advertisement_listing_fee' | 'agent_donation' | 'agent_location_services' | 'agent_miscellaneous' | 'agent_mission_collateral_paid' | 'agent_mission_collateral_refunded' | 'agent_mission_reward' | 'agent_mission_reward_corporation_tax' | 'agent_mission_time_bonus_reward' | 'agent_mission_time_bonus_reward_corporation_tax' | 'agent_security_services' | 'agent_services_rendered' | 'agents_preward' | 'alliance_maintainance_fee' | 'alliance_registration_fee' | 'allignment_based_gate_toll' | 'asset_safety_recovery_tax' | 'bounty' | 'bounty_prize' | 'bounty_prize_corporation_tax' | 'bounty_prizes' | 'bounty_reimbursement' | 'bounty_surcharge' | 'brokers_fee' | 'clone_activation' | 'clone_transfer' | 'contraband_fine' | 'contract_auction_bid' | 'contract_auction_bid_corp' | 'contract_auction_bid_refund' | 'contract_auction_sold' | 'contract_brokers_fee' | 'contract_brokers_fee_corp' | 'contract_collateral' | 'contract_collateral_deposited_corp' | 'contract_collateral_payout' | 'contract_collateral_refund' | 'contract_deposit' | 'contract_deposit_corp' | 'contract_deposit_refund' | 'contract_deposit_sales_tax' | 'contract_price' | 'contract_price_payment_corp' | 'contract_reversal' | 'contract_reward' | 'contract_reward_deposited' | 'contract_reward_deposited_corp' | 'contract_reward_refund' | 'contract_sales_tax' | 'copying' | 'corporate_reward_payout' | 'corporate_reward_tax' | 'corporation_account_withdrawal' | 'corporation_bulk_payment' | 'corporation_dividend_payment' | 'corporation_liquidation' | 'corporation_logo_change_cost' | 'corporation_payment' | 'corporation_registration_fee' | 'cosmetic_market_component_item_purchase' | 'cosmetic_market_skin_purchase' | 'cosmetic_market_skin_sale' | 'cosmetic_market_skin_sale_broker_fee' | 'cosmetic_market_skin_sale_tax' | 'cosmetic_market_skin_transaction' | 'courier_mission_escrow' | 'cspa' | 'cspaofflinerefund' | 'daily_challenge_reward' | 'daily_goal_payouts' | 'daily_goal_payouts_tax' | 'datacore_fee' | 'dna_modification_fee' | 'docking_fee' | 'duel_wager_escrow' | 'duel_wager_payment' | 'duel_wager_refund' | 'ess_escrow_transfer' | 'external_trade_delivery' | 'external_trade_freeze' | 'external_trade_thaw' | 'factory_slot_rental_fee' | 'flux_payout' | 'flux_tax' | 'flux_ticket_repayment' | 'flux_ticket_sale' | 'gm_cash_transfer' | 'industry_job_tax' | 'infrastructure_hub_maintenance' | 'inheritance' | 'insurance' | 'insurgency_corruption_contribution_reward' | 'insurgency_suppression_contribution_reward' | 'item_trader_payment' | 'jump_clone_activation_fee' | 'jump_clone_installation_fee' | 'kill_right_fee' | 'lp_store' | 'manufacturing' | 'market_escrow' | 'market_fine_paid' | 'market_provider_tax' | 'market_transaction' | 'medal_creation' | 'medal_issued' | 'milestone_reward_payment' | 'mission_completion' | 'mission_cost' | 'mission_expiration' | 'mission_reward' | 'office_rental_fee' | 'operation_bonus' | 'opportunity_reward' | 'planetary_construction' | 'planetary_export_tax' | 'planetary_import_tax' | 'player_donation' | 'player_trading' | 'project_discovery_reward' | 'project_discovery_tax' | 'project_payouts' | 'reaction' | 'redeemed_isk_token' | 'release_of_impounded_property' | 'repair_bill' | 'reprocessing_tax' | 'researching_material_productivity' | 'researching_technology' | 'researching_time_productivity' | 'resource_wars_reward' | 'reverse_engineering' | 'season_challenge_reward' | 'security_processing_fee' | 'shares' | 'skill_purchase' | 'sovereignity_bill' | 'store_purchase' | 'store_purchase_refund' | 'structure_gate_jump' | 'transaction_tax' | 'under_construction' | 'upkeep_adjustment_fee' | 'war_ally_contract' | 'war_fee' | 'war_fee_surrender';
    /**
     * The id of the second party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
     */
    second_party_id?: number;
    /**
     * Tax amount received. Only applies to tax related transactions
     */
    tax?: number;
    /**
     * The corporation ID receiving any tax paid. Only applies to tax related transactions
     */
    tax_receiver_id?: number;
}>;

export type GetCharactersCharacterIdWalletJournalError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCharactersCharacterIdWalletTransactionsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE character ID
         */
        character_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Only show transactions happened before the one referenced by this id
         */
        from_id?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCharactersCharacterIdWalletTransactionsResponse = Array<{
    /**
     * client_id integer
     */
    client_id: number;
    /**
     * Date and time of transaction
     */
    date: string;
    /**
     * is_buy boolean
     */
    is_buy: boolean;
    /**
     * is_personal boolean
     */
    is_personal: boolean;
    /**
     * journal_ref_id integer
     */
    journal_ref_id: number;
    /**
     * location_id integer
     */
    location_id: number;
    /**
     * quantity integer
     */
    quantity: number;
    /**
     * Unique transaction ID
     */
    transaction_id: number;
    /**
     * type_id integer
     */
    type_id: number;
    /**
     * Amount paid per unit
     */
    unit_price: number;
}>;

export type GetCharactersCharacterIdWalletTransactionsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetContractsPublicBidsContractIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * ID of a contract
         */
        contract_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
    };
};

export type GetContractsPublicBidsContractIdResponse = Array<{
    /**
     * The amount bid, in ISK
     */
    amount: number;
    /**
     * Unique ID for the bid
     */
    bid_id: number;
    /**
     * Datetime when the bid was placed
     */
    date_bid: string;
}> | string;

export type GetContractsPublicBidsContractIdError = string | bad_request | {
    /**
     * Forbidden message
     */
    error?: string;
} | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetContractsPublicItemsContractIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * ID of a contract
         */
        contract_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
    };
};

export type GetContractsPublicItemsContractIdResponse = Array<{
    /**
     * is_blueprint_copy boolean
     */
    is_blueprint_copy?: boolean;
    /**
     * true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract
     */
    is_included: boolean;
    /**
     * Unique ID for the item being sold. Not present if item is being requested by contract rather than sold with contract
     */
    item_id?: number;
    /**
     * Material Efficiency Level of the blueprint
     */
    material_efficiency?: number;
    /**
     * Number of items in the stack
     */
    quantity: number;
    /**
     * Unique ID for the item, used by the contract system
     */
    record_id: number;
    /**
     * Number of runs remaining if the blueprint is a copy, -1 if it is an original
     */
    runs?: number;
    /**
     * Time Efficiency Level of the blueprint
     */
    time_efficiency?: number;
    /**
     * Type ID for item
     */
    type_id: number;
}> | string;

export type GetContractsPublicItemsContractIdError = string | bad_request | {
    /**
     * Forbidden message
     */
    error?: string;
} | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetContractsPublicRegionIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE region id
         */
        region_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
    };
};

export type GetContractsPublicRegionIdResponse = Array<{
    /**
     * Buyout price (for Auctions only)
     */
    buyout?: number;
    /**
     * Collateral price (for Couriers only)
     */
    collateral?: number;
    /**
     * contract_id integer
     */
    contract_id: number;
    /**
     * Expiration date of the contract
     */
    date_expired: string;
    /**
     * Сreation date of the contract
     */
    date_issued: string;
    /**
     * Number of days to perform the contract
     */
    days_to_complete?: number;
    /**
     * End location ID (for Couriers contract)
     */
    end_location_id?: number;
    /**
     * true if the contract was issued on behalf of the issuer's corporation
     */
    for_corporation?: boolean;
    /**
     * Character's corporation ID for the issuer
     */
    issuer_corporation_id: number;
    /**
     * Character ID for the issuer
     */
    issuer_id: number;
    /**
     * Price of contract (for ItemsExchange and Auctions)
     */
    price?: number;
    /**
     * Remuneration for contract (for Couriers only)
     */
    reward?: number;
    /**
     * Start location ID (for Couriers contract)
     */
    start_location_id?: number;
    /**
     * Title of the contract
     */
    title?: string;
    /**
     * Type of the contract
     */
    type: 'unknown' | 'item_exchange' | 'auction' | 'courier' | 'loan';
    /**
     * Volume of items in the contract
     */
    volume?: number;
}>;

export type GetContractsPublicRegionIdError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationCorporationIdMiningExtractionsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationCorporationIdMiningExtractionsResponse = Array<{
    /**
     * The time at which the chunk being extracted will arrive and can be fractured by the moon mining drill.
     *
     */
    chunk_arrival_time: string;
    /**
     * The time at which the current extraction was initiated.
     *
     */
    extraction_start_time: string;
    /**
     * moon_id integer
     */
    moon_id: number;
    /**
     * The time at which the chunk being extracted will naturally fracture if it is not first fractured by the moon mining drill.
     *
     */
    natural_decay_time: string;
    /**
     * structure_id integer
     */
    structure_id: number;
}>;

export type GetCorporationCorporationIdMiningExtractionsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationCorporationIdMiningObserversData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationCorporationIdMiningObserversResponse = Array<{
    /**
     * last_updated string
     */
    last_updated: string;
    /**
     * The entity that was observing the asteroid field when it was mined.
     *
     */
    observer_id: number;
    /**
     * The category of the observing entity
     */
    observer_type: 'structure';
}>;

export type GetCorporationCorporationIdMiningObserversError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationCorporationIdMiningObserversObserverIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
        /**
         * A mining observer id
         */
        observer_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationCorporationIdMiningObserversObserverIdResponse = Array<{
    /**
     * The character that did the mining
     *
     */
    character_id: number;
    /**
     * last_updated string
     */
    last_updated: string;
    /**
     * quantity integer
     */
    quantity: number;
    /**
     * The corporation id of the character at the time data was recorded.
     *
     */
    recorded_corporation_id: number;
    /**
     * type_id integer
     */
    type_id: number;
}>;

export type GetCorporationCorporationIdMiningObserversObserverIdError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsNpccorpsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetCorporationsNpccorpsResponse = Array<(number)>;

export type GetCorporationsNpccorpsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetCorporationsCorporationIdResponse = {
    /**
     * ID of the alliance that corporation is a member of, if any
     */
    alliance_id?: number;
    /**
     * ceo_id integer
     */
    ceo_id: number;
    /**
     * creator_id integer
     */
    creator_id: number;
    /**
     * date_founded string
     */
    date_founded?: string;
    /**
     * description string
     */
    description?: string;
    /**
     * faction_id integer
     */
    faction_id?: number;
    /**
     * home_station_id integer
     */
    home_station_id?: number;
    /**
     * member_count integer
     */
    member_count: number;
    /**
     * the full name of the corporation
     */
    name: string;
    /**
     * shares integer
     */
    shares?: number;
    /**
     * tax_rate number
     */
    tax_rate: number;
    /**
     * the short name of the corporation
     */
    ticker: string;
    /**
     * url string
     */
    url?: string;
    /**
     * war_eligible boolean
     */
    war_eligible?: boolean;
};

export type GetCorporationsCorporationIdError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdAlliancehistoryData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetCorporationsCorporationIdAlliancehistoryResponse = Array<{
    /**
     * alliance_id integer
     */
    alliance_id?: number;
    /**
     * True if the alliance has been closed
     */
    is_deleted?: boolean;
    /**
     * An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous
     */
    record_id: number;
    /**
     * start_date string
     */
    start_date: string;
}>;

export type GetCorporationsCorporationIdAlliancehistoryError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdAssetsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdAssetsResponse = Array<{
    /**
     * is_blueprint_copy boolean
     */
    is_blueprint_copy?: boolean;
    /**
     * is_singleton boolean
     */
    is_singleton: boolean;
    /**
     * item_id integer
     */
    item_id: number;
    /**
     * location_flag string
     */
    location_flag: 'AssetSafety' | 'AutoFit' | 'Bonus' | 'Booster' | 'BoosterBay' | 'Capsule' | 'Cargo' | 'CorpDeliveries' | 'CorpSAG1' | 'CorpSAG2' | 'CorpSAG3' | 'CorpSAG4' | 'CorpSAG5' | 'CorpSAG6' | 'CorpSAG7' | 'CorporationGoalDeliveries' | 'CrateLoot' | 'Deliveries' | 'DroneBay' | 'DustBattle' | 'DustDatabank' | 'FighterBay' | 'FighterTube0' | 'FighterTube1' | 'FighterTube2' | 'FighterTube3' | 'FighterTube4' | 'FleetHangar' | 'FrigateEscapeBay' | 'Hangar' | 'HangarAll' | 'HiSlot0' | 'HiSlot1' | 'HiSlot2' | 'HiSlot3' | 'HiSlot4' | 'HiSlot5' | 'HiSlot6' | 'HiSlot7' | 'HiddenModifiers' | 'Implant' | 'Impounded' | 'InfrastructureHangar' | 'JunkyardReprocessed' | 'JunkyardTrashed' | 'LoSlot0' | 'LoSlot1' | 'LoSlot2' | 'LoSlot3' | 'LoSlot4' | 'LoSlot5' | 'LoSlot6' | 'LoSlot7' | 'Locked' | 'MedSlot0' | 'MedSlot1' | 'MedSlot2' | 'MedSlot3' | 'MedSlot4' | 'MedSlot5' | 'MedSlot6' | 'MedSlot7' | 'MobileDepotHold' | 'MoonMaterialBay' | 'OfficeFolder' | 'Pilot' | 'PlanetSurface' | 'QuafeBay' | 'QuantumCoreRoom' | 'Reward' | 'RigSlot0' | 'RigSlot1' | 'RigSlot2' | 'RigSlot3' | 'RigSlot4' | 'RigSlot5' | 'RigSlot6' | 'RigSlot7' | 'SecondaryStorage' | 'ServiceSlot0' | 'ServiceSlot1' | 'ServiceSlot2' | 'ServiceSlot3' | 'ServiceSlot4' | 'ServiceSlot5' | 'ServiceSlot6' | 'ServiceSlot7' | 'ShipHangar' | 'ShipOffline' | 'Skill' | 'SkillInTraining' | 'SpecializedAmmoHold' | 'SpecializedAsteroidHold' | 'SpecializedCommandCenterHold' | 'SpecializedFuelBay' | 'SpecializedGasHold' | 'SpecializedIceHold' | 'SpecializedIndustrialShipHold' | 'SpecializedLargeShipHold' | 'SpecializedMaterialBay' | 'SpecializedMediumShipHold' | 'SpecializedMineralHold' | 'SpecializedOreHold' | 'SpecializedPlanetaryCommoditiesHold' | 'SpecializedSalvageHold' | 'SpecializedShipHold' | 'SpecializedSmallShipHold' | 'StructureActive' | 'StructureFuel' | 'StructureInactive' | 'StructureOffline' | 'SubSystemBay' | 'SubSystemSlot0' | 'SubSystemSlot1' | 'SubSystemSlot2' | 'SubSystemSlot3' | 'SubSystemSlot4' | 'SubSystemSlot5' | 'SubSystemSlot6' | 'SubSystemSlot7' | 'Unlocked' | 'Wallet' | 'Wardrobe';
    /**
     * location_id integer
     */
    location_id: number;
    /**
     * location_type string
     */
    location_type: 'station' | 'solar_system' | 'item' | 'other';
    /**
     * quantity integer
     */
    quantity: number;
    /**
     * type_id integer
     */
    type_id: number;
}>;

export type GetCorporationsCorporationIdAssetsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PostCorporationsCorporationIdAssetsLocationsData = {
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PostCorporationsCorporationIdAssetsLocationsResponse = Array<{
    /**
     * item_id integer
     */
    item_id: number;
    /**
     * position object
     */
    position: {
        /**
         * x number
         */
        x: number;
        /**
         * y number
         */
        y: number;
        /**
         * z number
         */
        z: number;
    };
}>;

export type PostCorporationsCorporationIdAssetsLocationsError = bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PostCorporationsCorporationIdAssetsNamesData = {
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PostCorporationsCorporationIdAssetsNamesResponse = Array<{
    /**
     * item_id integer
     */
    item_id: number;
    /**
     * name string
     */
    name: string;
}>;

export type PostCorporationsCorporationIdAssetsNamesError = bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdBlueprintsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdBlueprintsResponse = Array<{
    /**
     * Unique ID for this item.
     */
    item_id: number;
    /**
     * Type of the location_id
     */
    location_flag: 'AssetSafety' | 'AutoFit' | 'Bonus' | 'Booster' | 'BoosterBay' | 'Capsule' | 'Cargo' | 'CorpDeliveries' | 'CorpSAG1' | 'CorpSAG2' | 'CorpSAG3' | 'CorpSAG4' | 'CorpSAG5' | 'CorpSAG6' | 'CorpSAG7' | 'CrateLoot' | 'Deliveries' | 'DroneBay' | 'DustBattle' | 'DustDatabank' | 'FighterBay' | 'FighterTube0' | 'FighterTube1' | 'FighterTube2' | 'FighterTube3' | 'FighterTube4' | 'FleetHangar' | 'FrigateEscapeBay' | 'Hangar' | 'HangarAll' | 'HiSlot0' | 'HiSlot1' | 'HiSlot2' | 'HiSlot3' | 'HiSlot4' | 'HiSlot5' | 'HiSlot6' | 'HiSlot7' | 'HiddenModifiers' | 'Implant' | 'Impounded' | 'JunkyardReprocessed' | 'JunkyardTrashed' | 'LoSlot0' | 'LoSlot1' | 'LoSlot2' | 'LoSlot3' | 'LoSlot4' | 'LoSlot5' | 'LoSlot6' | 'LoSlot7' | 'Locked' | 'MedSlot0' | 'MedSlot1' | 'MedSlot2' | 'MedSlot3' | 'MedSlot4' | 'MedSlot5' | 'MedSlot6' | 'MedSlot7' | 'OfficeFolder' | 'Pilot' | 'PlanetSurface' | 'QuafeBay' | 'QuantumCoreRoom' | 'Reward' | 'RigSlot0' | 'RigSlot1' | 'RigSlot2' | 'RigSlot3' | 'RigSlot4' | 'RigSlot5' | 'RigSlot6' | 'RigSlot7' | 'SecondaryStorage' | 'ServiceSlot0' | 'ServiceSlot1' | 'ServiceSlot2' | 'ServiceSlot3' | 'ServiceSlot4' | 'ServiceSlot5' | 'ServiceSlot6' | 'ServiceSlot7' | 'ShipHangar' | 'ShipOffline' | 'Skill' | 'SkillInTraining' | 'SpecializedAmmoHold' | 'SpecializedCommandCenterHold' | 'SpecializedFuelBay' | 'SpecializedGasHold' | 'SpecializedIndustrialShipHold' | 'SpecializedLargeShipHold' | 'SpecializedMaterialBay' | 'SpecializedMediumShipHold' | 'SpecializedMineralHold' | 'SpecializedOreHold' | 'SpecializedPlanetaryCommoditiesHold' | 'SpecializedSalvageHold' | 'SpecializedShipHold' | 'SpecializedSmallShipHold' | 'StructureActive' | 'StructureFuel' | 'StructureInactive' | 'StructureOffline' | 'SubSystemBay' | 'SubSystemSlot0' | 'SubSystemSlot1' | 'SubSystemSlot2' | 'SubSystemSlot3' | 'SubSystemSlot4' | 'SubSystemSlot5' | 'SubSystemSlot6' | 'SubSystemSlot7' | 'Unlocked' | 'Wallet' | 'Wardrobe';
    /**
     * References a station, a ship or an item_id if this blueprint is located within a container.
     */
    location_id: number;
    /**
     * Material Efficiency Level of the blueprint.
     */
    material_efficiency: number;
    /**
     * A range of numbers with a minimum of -2 and no maximum value where -1 is an original and -2 is a copy. It can be a positive integer if it is a stack of blueprint originals fresh from the market (e.g. no activities performed on them yet).
     */
    quantity: number;
    /**
     * Number of runs remaining if the blueprint is a copy, -1 if it is an original.
     */
    runs: number;
    /**
     * Time Efficiency Level of the blueprint.
     */
    time_efficiency: number;
    /**
     * type_id integer
     */
    type_id: number;
}>;

export type GetCorporationsCorporationIdBlueprintsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdBookmarksData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdBookmarksResponse = Array<{
    /**
     * bookmark_id integer
     */
    bookmark_id: number;
    /**
     * Optional object that is returned if a bookmark was made on a planet or a random location in space.
     */
    coordinates?: {
        /**
         * x number
         */
        x: number;
        /**
         * y number
         */
        y: number;
        /**
         * z number
         */
        z: number;
    };
    /**
     * created string
     */
    created: string;
    /**
     * creator_id integer
     */
    creator_id: number;
    /**
     * folder_id integer
     */
    folder_id?: number;
    /**
     * Optional object that is returned if a bookmark was made on a particular item.
     */
    item?: {
        /**
         * item_id integer
         */
        item_id: number;
        /**
         * type_id integer
         */
        type_id: number;
    };
    /**
     * label string
     */
    label: string;
    /**
     * location_id integer
     */
    location_id: number;
    /**
     * notes string
     */
    notes: string;
}>;

export type GetCorporationsCorporationIdBookmarksError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdBookmarksFoldersData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdBookmarksFoldersResponse = Array<{
    /**
     * creator_id integer
     */
    creator_id?: number;
    /**
     * folder_id integer
     */
    folder_id: number;
    /**
     * name string
     */
    name: string;
}>;

export type GetCorporationsCorporationIdBookmarksFoldersError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdContactsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdContactsResponse = Array<{
    /**
     * contact_id integer
     */
    contact_id: number;
    /**
     * contact_type string
     */
    contact_type: 'character' | 'corporation' | 'alliance' | 'faction';
    /**
     * Whether this contact is being watched
     */
    is_watched?: boolean;
    /**
     * label_ids array
     */
    label_ids?: Array<(number)>;
    /**
     * Standing of the contact
     */
    standing: number;
}>;

export type GetCorporationsCorporationIdContactsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdContactsLabelsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdContactsLabelsResponse = Array<{
    /**
     * label_id integer
     */
    label_id: number;
    /**
     * label_name string
     */
    label_name: string;
}>;

export type GetCorporationsCorporationIdContactsLabelsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdContainersLogsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdContainersLogsResponse = Array<{
    /**
     * action string
     */
    action: 'add' | 'assemble' | 'configure' | 'enter_password' | 'lock' | 'move' | 'repackage' | 'set_name' | 'set_password' | 'unlock';
    /**
     * ID of the character who performed the action.
     */
    character_id: number;
    /**
     * ID of the container
     */
    container_id: number;
    /**
     * Type ID of the container
     */
    container_type_id: number;
    /**
     * location_flag string
     */
    location_flag: 'AssetSafety' | 'AutoFit' | 'Bonus' | 'Booster' | 'BoosterBay' | 'Capsule' | 'Cargo' | 'CorpDeliveries' | 'CorpSAG1' | 'CorpSAG2' | 'CorpSAG3' | 'CorpSAG4' | 'CorpSAG5' | 'CorpSAG6' | 'CorpSAG7' | 'CrateLoot' | 'Deliveries' | 'DroneBay' | 'DustBattle' | 'DustDatabank' | 'FighterBay' | 'FighterTube0' | 'FighterTube1' | 'FighterTube2' | 'FighterTube3' | 'FighterTube4' | 'FleetHangar' | 'FrigateEscapeBay' | 'Hangar' | 'HangarAll' | 'HiSlot0' | 'HiSlot1' | 'HiSlot2' | 'HiSlot3' | 'HiSlot4' | 'HiSlot5' | 'HiSlot6' | 'HiSlot7' | 'HiddenModifiers' | 'Implant' | 'Impounded' | 'JunkyardReprocessed' | 'JunkyardTrashed' | 'LoSlot0' | 'LoSlot1' | 'LoSlot2' | 'LoSlot3' | 'LoSlot4' | 'LoSlot5' | 'LoSlot6' | 'LoSlot7' | 'Locked' | 'MedSlot0' | 'MedSlot1' | 'MedSlot2' | 'MedSlot3' | 'MedSlot4' | 'MedSlot5' | 'MedSlot6' | 'MedSlot7' | 'OfficeFolder' | 'Pilot' | 'PlanetSurface' | 'QuafeBay' | 'QuantumCoreRoom' | 'Reward' | 'RigSlot0' | 'RigSlot1' | 'RigSlot2' | 'RigSlot3' | 'RigSlot4' | 'RigSlot5' | 'RigSlot6' | 'RigSlot7' | 'SecondaryStorage' | 'ServiceSlot0' | 'ServiceSlot1' | 'ServiceSlot2' | 'ServiceSlot3' | 'ServiceSlot4' | 'ServiceSlot5' | 'ServiceSlot6' | 'ServiceSlot7' | 'ShipHangar' | 'ShipOffline' | 'Skill' | 'SkillInTraining' | 'SpecializedAmmoHold' | 'SpecializedCommandCenterHold' | 'SpecializedFuelBay' | 'SpecializedGasHold' | 'SpecializedIndustrialShipHold' | 'SpecializedLargeShipHold' | 'SpecializedMaterialBay' | 'SpecializedMediumShipHold' | 'SpecializedMineralHold' | 'SpecializedOreHold' | 'SpecializedPlanetaryCommoditiesHold' | 'SpecializedSalvageHold' | 'SpecializedShipHold' | 'SpecializedSmallShipHold' | 'StructureActive' | 'StructureFuel' | 'StructureInactive' | 'StructureOffline' | 'SubSystemBay' | 'SubSystemSlot0' | 'SubSystemSlot1' | 'SubSystemSlot2' | 'SubSystemSlot3' | 'SubSystemSlot4' | 'SubSystemSlot5' | 'SubSystemSlot6' | 'SubSystemSlot7' | 'Unlocked' | 'Wallet' | 'Wardrobe';
    /**
     * location_id integer
     */
    location_id: number;
    /**
     * Timestamp when this log was created
     */
    logged_at: string;
    /**
     * new_config_bitmask integer
     */
    new_config_bitmask?: number;
    /**
     * old_config_bitmask integer
     */
    old_config_bitmask?: number;
    /**
     * Type of password set if action is of type SetPassword or EnterPassword
     */
    password_type?: 'config' | 'general';
    /**
     * Quantity of the item being acted upon
     */
    quantity?: number;
    /**
     * Type ID of the item being acted upon
     */
    type_id?: number;
}>;

export type GetCorporationsCorporationIdContainersLogsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdContractsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdContractsResponse = Array<{
    /**
     * Who will accept the contract
     */
    acceptor_id: number;
    /**
     * ID to whom the contract is assigned, can be corporation or character ID
     */
    assignee_id: number;
    /**
     * To whom the contract is available
     */
    availability: 'public' | 'personal' | 'corporation' | 'alliance';
    /**
     * Buyout price (for Auctions only)
     */
    buyout?: number;
    /**
     * Collateral price (for Couriers only)
     */
    collateral?: number;
    /**
     * contract_id integer
     */
    contract_id: number;
    /**
     * Date of confirmation of contract
     */
    date_accepted?: string;
    /**
     * Date of completed of contract
     */
    date_completed?: string;
    /**
     * Expiration date of the contract
     */
    date_expired: string;
    /**
     * Сreation date of the contract
     */
    date_issued: string;
    /**
     * Number of days to perform the contract
     */
    days_to_complete?: number;
    /**
     * End location ID (for Couriers contract)
     */
    end_location_id?: number;
    /**
     * true if the contract was issued on behalf of the issuer's corporation
     */
    for_corporation: boolean;
    /**
     * Character's corporation ID for the issuer
     */
    issuer_corporation_id: number;
    /**
     * Character ID for the issuer
     */
    issuer_id: number;
    /**
     * Price of contract (for ItemsExchange and Auctions)
     */
    price?: number;
    /**
     * Remuneration for contract (for Couriers only)
     */
    reward?: number;
    /**
     * Start location ID (for Couriers contract)
     */
    start_location_id?: number;
    /**
     * Status of the the contract
     */
    status: 'outstanding' | 'in_progress' | 'finished_issuer' | 'finished_contractor' | 'finished' | 'cancelled' | 'rejected' | 'failed' | 'deleted' | 'reversed';
    /**
     * Title of the contract
     */
    title?: string;
    /**
     * Type of the contract
     */
    type: 'unknown' | 'item_exchange' | 'auction' | 'courier' | 'loan';
    /**
     * Volume of items in the contract
     */
    volume?: number;
}>;

export type GetCorporationsCorporationIdContractsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdContractsContractIdBidsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * ID of a contract
         */
        contract_id: number;
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdContractsContractIdBidsResponse = Array<{
    /**
     * The amount bid, in ISK
     */
    amount: number;
    /**
     * Unique ID for the bid
     */
    bid_id: number;
    /**
     * Character ID of the bidder
     */
    bidder_id: number;
    /**
     * Datetime when the bid was placed
     */
    date_bid: string;
}>;

export type GetCorporationsCorporationIdContractsContractIdBidsError = string | bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdContractsContractIdItemsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * ID of a contract
         */
        contract_id: number;
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdContractsContractIdItemsResponse = Array<{
    /**
     * true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract
     */
    is_included: boolean;
    /**
     * is_singleton boolean
     */
    is_singleton: boolean;
    /**
     * Number of items in the stack
     */
    quantity: number;
    /**
     * -1 indicates that the item is a singleton (non-stackable). If the item happens to be a Blueprint, -1 is an Original and -2 is a Blueprint Copy
     */
    raw_quantity?: number;
    /**
     * Unique ID for the item
     */
    record_id: number;
    /**
     * Type ID for item
     */
    type_id: number;
}>;

export type GetCorporationsCorporationIdContractsContractIdItemsError = string | bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout | {
    /**
     * Error 520 message
     */
    error?: string;
};

export type GetCorporationsCorporationIdCustomsOfficesData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdCustomsOfficesResponse = Array<{
    /**
     * Only present if alliance access is allowed
     */
    alliance_tax_rate?: number;
    /**
     * standing_level and any standing related tax rate only present when this is true
     */
    allow_access_with_standings: boolean;
    /**
     * allow_alliance_access boolean
     */
    allow_alliance_access: boolean;
    /**
     * bad_standing_tax_rate number
     */
    bad_standing_tax_rate?: number;
    /**
     * corporation_tax_rate number
     */
    corporation_tax_rate?: number;
    /**
     * Tax rate for entities with excellent level of standing, only present if this level is allowed, same for all other standing related tax rates
     */
    excellent_standing_tax_rate?: number;
    /**
     * good_standing_tax_rate number
     */
    good_standing_tax_rate?: number;
    /**
     * neutral_standing_tax_rate number
     */
    neutral_standing_tax_rate?: number;
    /**
     * unique ID of this customs office
     */
    office_id: number;
    /**
     * reinforce_exit_end integer
     */
    reinforce_exit_end: number;
    /**
     * Together with reinforce_exit_end, marks a 2-hour period where this customs office could exit reinforcement mode during the day after initial attack
     */
    reinforce_exit_start: number;
    /**
     * Access is allowed only for entities with this level of standing or better
     */
    standing_level?: 'bad' | 'excellent' | 'good' | 'neutral' | 'terrible';
    /**
     * ID of the solar system this customs office is located in
     */
    system_id: number;
    /**
     * terrible_standing_tax_rate number
     */
    terrible_standing_tax_rate?: number;
}>;

export type GetCorporationsCorporationIdCustomsOfficesError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdDivisionsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdDivisionsResponse = {
    /**
     * hangar array
     */
    hangar?: Array<{
        /**
         * division integer
         */
        division?: number;
        /**
         * name string
         */
        name?: string;
    }>;
    /**
     * wallet array
     */
    wallet?: Array<{
        /**
         * division integer
         */
        division?: number;
        /**
         * name string
         */
        name?: string;
    }>;
};

export type GetCorporationsCorporationIdDivisionsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdFacilitiesData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdFacilitiesResponse = Array<{
    /**
     * facility_id integer
     */
    facility_id: number;
    /**
     * system_id integer
     */
    system_id: number;
    /**
     * type_id integer
     */
    type_id: number;
}>;

export type GetCorporationsCorporationIdFacilitiesError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdFwStatsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdFwStatsResponse = {
    /**
     * The enlistment date of the given corporation into faction warfare. Will not be included if corporation is not enlisted in faction warfare
     */
    enlisted_on?: string;
    /**
     * The faction the given corporation is enlisted to fight for. Will not be included if corporation is not enlisted in faction warfare
     */
    faction_id?: number;
    /**
     * Summary of kills done by the given corporation against enemy factions
     */
    kills: {
        /**
         * Last week's total number of kills by members of the given corporation against enemy factions
         */
        last_week: number;
        /**
         * Total number of kills by members of the given corporation against enemy factions since the corporation enlisted
         */
        total: number;
        /**
         * Yesterday's total number of kills by members of the given corporation against enemy factions
         */
        yesterday: number;
    };
    /**
     * How many pilots the enlisted corporation has. Will not be included if corporation is not enlisted in faction warfare
     */
    pilots?: number;
    /**
     * Summary of victory points gained by the given corporation for the enlisted faction
     */
    victory_points: {
        /**
         * Last week's victory points gained by members of the given corporation
         */
        last_week: number;
        /**
         * Total victory points gained since the given corporation enlisted
         */
        total: number;
        /**
         * Yesterday's victory points gained by members of the given corporation
         */
        yesterday: number;
    };
};

export type GetCorporationsCorporationIdFwStatsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdIconsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetCorporationsCorporationIdIconsResponse = {
    /**
     * px128x128 string
     */
    px128x128?: string;
    /**
     * px256x256 string
     */
    px256x256?: string;
    /**
     * px64x64 string
     */
    px64x64?: string;
};

export type GetCorporationsCorporationIdIconsError = string | bad_request | {
    /**
     * error message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdIndustryJobsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Whether to retrieve completed corporation industry jobs. Only includes jobs from the past 90 days
         */
        include_completed?: boolean;
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdIndustryJobsResponse = Array<{
    /**
     * Job activity ID
     */
    activity_id: number;
    /**
     * blueprint_id integer
     */
    blueprint_id: number;
    /**
     * Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility
     */
    blueprint_location_id: number;
    /**
     * blueprint_type_id integer
     */
    blueprint_type_id: number;
    /**
     * ID of the character which completed this job
     */
    completed_character_id?: number;
    /**
     * Date and time when this job was completed
     */
    completed_date?: string;
    /**
     * The sume of job installation fee and industry facility tax
     */
    cost?: number;
    /**
     * Job duration in seconds
     */
    duration: number;
    /**
     * Date and time when this job finished
     */
    end_date: string;
    /**
     * ID of the facility where this job is running
     */
    facility_id: number;
    /**
     * ID of the character which installed this job
     */
    installer_id: number;
    /**
     * Unique job ID
     */
    job_id: number;
    /**
     * Number of runs blueprint is licensed for
     */
    licensed_runs?: number;
    /**
     * ID of the location for the industry facility
     */
    location_id: number;
    /**
     * Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility
     */
    output_location_id: number;
    /**
     * Date and time when this job was paused (i.e. time when the facility where this job was installed went offline)
     */
    pause_date?: string;
    /**
     * Chance of success for invention
     */
    probability?: number;
    /**
     * Type ID of product (manufactured, copied or invented)
     */
    product_type_id?: number;
    /**
     * Number of runs for a manufacturing job, or number of copies to make for a blueprint copy
     */
    runs: number;
    /**
     * Date and time when this job started
     */
    start_date: string;
    /**
     * status string
     */
    status: 'active' | 'cancelled' | 'delivered' | 'paused' | 'ready' | 'reverted';
    /**
     * Number of successful runs for this job. Equal to runs unless this is an invention job
     */
    successful_runs?: number;
}>;

export type GetCorporationsCorporationIdIndustryJobsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdKillmailsRecentData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdKillmailsRecentResponse = Array<{
    /**
     * A hash of this killmail
     */
    killmail_hash: string;
    /**
     * ID of this killmail
     */
    killmail_id: number;
}>;

export type GetCorporationsCorporationIdKillmailsRecentError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdMedalsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdMedalsResponse = Array<{
    /**
     * created_at string
     */
    created_at: string;
    /**
     * ID of the character who created this medal
     */
    creator_id: number;
    /**
     * description string
     */
    description: string;
    /**
     * medal_id integer
     */
    medal_id: number;
    /**
     * title string
     */
    title: string;
}>;

export type GetCorporationsCorporationIdMedalsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdMedalsIssuedData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdMedalsIssuedResponse = Array<{
    /**
     * ID of the character who was rewarded this medal
     */
    character_id: number;
    /**
     * issued_at string
     */
    issued_at: string;
    /**
     * ID of the character who issued the medal
     */
    issuer_id: number;
    /**
     * medal_id integer
     */
    medal_id: number;
    /**
     * reason string
     */
    reason: string;
    /**
     * status string
     */
    status: 'private' | 'public';
}>;

export type GetCorporationsCorporationIdMedalsIssuedError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdMembersData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdMembersResponse = Array<(number)>;

export type GetCorporationsCorporationIdMembersError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdMembersLimitData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdMembersLimitResponse = number;

export type GetCorporationsCorporationIdMembersLimitError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdMembersTitlesData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdMembersTitlesResponse = Array<{
    /**
     * character_id integer
     */
    character_id: number;
    /**
     * A list of title_id
     */
    titles: Array<(number)>;
}>;

export type GetCorporationsCorporationIdMembersTitlesError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdMembertrackingData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdMembertrackingResponse = Array<{
    /**
     * base_id integer
     */
    base_id?: number;
    /**
     * character_id integer
     */
    character_id: number;
    /**
     * location_id integer
     */
    location_id?: number;
    /**
     * logoff_date string
     */
    logoff_date?: string;
    /**
     * logon_date string
     */
    logon_date?: string;
    /**
     * ship_type_id integer
     */
    ship_type_id?: number;
    /**
     * start_date string
     */
    start_date?: string;
}>;

export type GetCorporationsCorporationIdMembertrackingError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdOrdersData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdOrdersResponse = Array<{
    /**
     * Number of days for which order is valid (starting from the issued date). An order expires at time issued + duration
     */
    duration: number;
    /**
     * For buy orders, the amount of ISK in escrow
     */
    escrow?: number;
    /**
     * True if the order is a bid (buy) order
     */
    is_buy_order?: boolean;
    /**
     * Date and time when this order was issued
     */
    issued: string;
    /**
     * The character who issued this order
     */
    issued_by: number;
    /**
     * ID of the location where order was placed
     */
    location_id: number;
    /**
     * For buy orders, the minimum quantity that will be accepted in a matching sell order
     */
    min_volume?: number;
    /**
     * Unique order ID
     */
    order_id: number;
    /**
     * Cost per unit for this order
     */
    price: number;
    /**
     * Valid order range, numbers are ranges in jumps
     */
    range: '1' | '10' | '2' | '20' | '3' | '30' | '4' | '40' | '5' | 'region' | 'solarsystem' | 'station';
    /**
     * ID of the region where order was placed
     */
    region_id: number;
    /**
     * The type ID of the item transacted in this order
     */
    type_id: number;
    /**
     * Quantity of items still required or offered
     */
    volume_remain: number;
    /**
     * Quantity of items required or offered at time order was placed
     */
    volume_total: number;
    /**
     * The corporation wallet division used for this order.
     */
    wallet_division: number;
}>;

export type GetCorporationsCorporationIdOrdersError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdOrdersHistoryData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdOrdersHistoryResponse = Array<{
    /**
     * Number of days the order was valid for (starting from the issued date). An order expires at time issued + duration
     */
    duration: number;
    /**
     * For buy orders, the amount of ISK in escrow
     */
    escrow?: number;
    /**
     * True if the order is a bid (buy) order
     */
    is_buy_order?: boolean;
    /**
     * Date and time when this order was issued
     */
    issued: string;
    /**
     * The character who issued this order
     */
    issued_by?: number;
    /**
     * ID of the location where order was placed
     */
    location_id: number;
    /**
     * For buy orders, the minimum quantity that will be accepted in a matching sell order
     */
    min_volume?: number;
    /**
     * Unique order ID
     */
    order_id: number;
    /**
     * Cost per unit for this order
     */
    price: number;
    /**
     * Valid order range, numbers are ranges in jumps
     */
    range: '1' | '10' | '2' | '20' | '3' | '30' | '4' | '40' | '5' | 'region' | 'solarsystem' | 'station';
    /**
     * ID of the region where order was placed
     */
    region_id: number;
    /**
     * Current order state
     */
    state: 'cancelled' | 'expired';
    /**
     * The type ID of the item transacted in this order
     */
    type_id: number;
    /**
     * Quantity of items still required or offered
     */
    volume_remain: number;
    /**
     * Quantity of items required or offered at time order was placed
     */
    volume_total: number;
    /**
     * The corporation wallet division used for this order
     */
    wallet_division: number;
}>;

export type GetCorporationsCorporationIdOrdersHistoryError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdRolesData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdRolesResponse = Array<{
    /**
     * character_id integer
     */
    character_id: number;
    /**
     * grantable_roles array
     */
    grantable_roles?: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
    /**
     * grantable_roles_at_base array
     */
    grantable_roles_at_base?: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
    /**
     * grantable_roles_at_hq array
     */
    grantable_roles_at_hq?: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
    /**
     * grantable_roles_at_other array
     */
    grantable_roles_at_other?: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
    /**
     * roles array
     */
    roles?: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
    /**
     * roles_at_base array
     */
    roles_at_base?: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
    /**
     * roles_at_hq array
     */
    roles_at_hq?: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
    /**
     * roles_at_other array
     */
    roles_at_other?: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
}>;

export type GetCorporationsCorporationIdRolesError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdRolesHistoryData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdRolesHistoryResponse = Array<{
    /**
     * changed_at string
     */
    changed_at: string;
    /**
     * The character whose roles are changed
     */
    character_id: number;
    /**
     * ID of the character who issued this change
     */
    issuer_id: number;
    /**
     * new_roles array
     */
    new_roles: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
    /**
     * old_roles array
     */
    old_roles: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
    /**
     * role_type string
     */
    role_type: 'grantable_roles' | 'grantable_roles_at_base' | 'grantable_roles_at_hq' | 'grantable_roles_at_other' | 'roles' | 'roles_at_base' | 'roles_at_hq' | 'roles_at_other';
}>;

export type GetCorporationsCorporationIdRolesHistoryError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdShareholdersData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdShareholdersResponse = Array<{
    /**
     * share_count integer
     */
    share_count: number;
    /**
     * shareholder_id integer
     */
    shareholder_id: number;
    /**
     * shareholder_type string
     */
    shareholder_type: 'character' | 'corporation';
}>;

export type GetCorporationsCorporationIdShareholdersError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdStandingsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdStandingsResponse = Array<{
    /**
     * from_id integer
     */
    from_id: number;
    /**
     * from_type string
     */
    from_type: 'agent' | 'npc_corp' | 'faction';
    /**
     * standing number
     */
    standing: number;
}>;

export type GetCorporationsCorporationIdStandingsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdStarbasesData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdStarbasesResponse = Array<{
    /**
     * The moon this starbase (POS) is anchored on, unanchored POSes do not have this information
     */
    moon_id?: number;
    /**
     * When the POS onlined, for starbases (POSes) in online state
     */
    onlined_since?: string;
    /**
     * When the POS will be out of reinforcement, for starbases (POSes) in reinforced state
     */
    reinforced_until?: string;
    /**
     * Unique ID for this starbase (POS)
     */
    starbase_id: number;
    /**
     * state string
     */
    state?: 'offline' | 'online' | 'onlining' | 'reinforced' | 'unanchoring';
    /**
     * The solar system this starbase (POS) is in, unanchored POSes have this information
     */
    system_id: number;
    /**
     * Starbase (POS) type
     */
    type_id: number;
    /**
     * When the POS started unanchoring, for starbases (POSes) in unanchoring state
     */
    unanchor_at?: string;
}>;

export type GetCorporationsCorporationIdStarbasesError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdStarbasesStarbaseIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
        /**
         * An EVE starbase (POS) ID
         */
        starbase_id: number;
    };
    query: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * The solar system this starbase (POS) is located in,
         */
        system_id: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdStarbasesStarbaseIdResponse = {
    /**
     * allow_alliance_members boolean
     */
    allow_alliance_members: boolean;
    /**
     * allow_corporation_members boolean
     */
    allow_corporation_members: boolean;
    /**
     * Who can anchor starbase (POS) and its structures
     */
    anchor: 'alliance_member' | 'config_starbase_equipment_role' | 'corporation_member' | 'starbase_fuel_technician_role';
    /**
     * attack_if_at_war boolean
     */
    attack_if_at_war: boolean;
    /**
     * attack_if_other_security_status_dropping boolean
     */
    attack_if_other_security_status_dropping: boolean;
    /**
     * Starbase (POS) will attack if target's security standing is lower than this value
     */
    attack_security_status_threshold?: number;
    /**
     * Starbase (POS) will attack if target's standing is lower than this value
     */
    attack_standing_threshold?: number;
    /**
     * Who can take fuel blocks out of the starbase (POS)'s fuel bay
     */
    fuel_bay_take: 'alliance_member' | 'config_starbase_equipment_role' | 'corporation_member' | 'starbase_fuel_technician_role';
    /**
     * Who can view the starbase (POS)'s fule bay. Characters either need to have required role or belong to the starbase (POS) owner's corporation or alliance, as described by the enum, all other access settings follows the same scheme
     */
    fuel_bay_view: 'alliance_member' | 'config_starbase_equipment_role' | 'corporation_member' | 'starbase_fuel_technician_role';
    /**
     * Fuel blocks and other things that will be consumed when operating a starbase (POS)
     */
    fuels?: Array<{
        /**
         * quantity integer
         */
        quantity: number;
        /**
         * type_id integer
         */
        type_id: number;
    }>;
    /**
     * Who can offline starbase (POS) and its structures
     */
    offline: 'alliance_member' | 'config_starbase_equipment_role' | 'corporation_member' | 'starbase_fuel_technician_role';
    /**
     * Who can online starbase (POS) and its structures
     */
    online: 'alliance_member' | 'config_starbase_equipment_role' | 'corporation_member' | 'starbase_fuel_technician_role';
    /**
     * Who can unanchor starbase (POS) and its structures
     */
    unanchor: 'alliance_member' | 'config_starbase_equipment_role' | 'corporation_member' | 'starbase_fuel_technician_role';
    /**
     * True if the starbase (POS) is using alliance standings, otherwise using corporation's
     */
    use_alliance_standings: boolean;
};

export type GetCorporationsCorporationIdStarbasesStarbaseIdError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdStructuresData = {
    headers?: {
        /**
         * Language to use in the response
         */
        'Accept-Language'?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Language to use in the response, takes precedence over Accept-Language
         */
        language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdStructuresResponse = Array<{
    /**
     * ID of the corporation that owns the structure
     */
    corporation_id: number;
    /**
     * Date on which the structure will run out of fuel
     */
    fuel_expires?: string;
    /**
     * The structure name
     */
    name?: string;
    /**
     * The date and time when the structure's newly requested reinforcement times (e.g. next_reinforce_hour and next_reinforce_day) will take effect
     */
    next_reinforce_apply?: string;
    /**
     * The requested change to reinforce_hour that will take effect at the time shown by next_reinforce_apply
     */
    next_reinforce_hour?: number;
    /**
     * The id of the ACL profile for this citadel
     */
    profile_id: number;
    /**
     * The hour of day that determines the four hour window when the structure will randomly exit its reinforcement periods and become vulnerable to attack against its armor and/or hull. The structure will become vulnerable at a random time that is +/- 2 hours centered on the value of this property
     */
    reinforce_hour?: number;
    /**
     * Contains a list of service upgrades, and their state
     */
    services?: Array<{
        /**
         * name string
         */
        name: string;
        /**
         * state string
         */
        state: 'online' | 'offline' | 'cleanup';
    }>;
    /**
     * state string
     */
    state: 'anchor_vulnerable' | 'anchoring' | 'armor_reinforce' | 'armor_vulnerable' | 'deploy_vulnerable' | 'fitting_invulnerable' | 'hull_reinforce' | 'hull_vulnerable' | 'online_deprecated' | 'onlining_vulnerable' | 'shield_vulnerable' | 'unanchored' | 'unknown';
    /**
     * Date at which the structure will move to it's next state
     */
    state_timer_end?: string;
    /**
     * Date at which the structure entered it's current state
     */
    state_timer_start?: string;
    /**
     * The Item ID of the structure
     */
    structure_id: number;
    /**
     * The solar system the structure is in
     */
    system_id: number;
    /**
     * The type id of the structure
     */
    type_id: number;
    /**
     * Date at which the structure will unanchor
     */
    unanchors_at?: string;
}>;

export type GetCorporationsCorporationIdStructuresError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdTitlesData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdTitlesResponse = Array<{
    /**
     * grantable_roles array
     */
    grantable_roles?: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
    /**
     * grantable_roles_at_base array
     */
    grantable_roles_at_base?: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
    /**
     * grantable_roles_at_hq array
     */
    grantable_roles_at_hq?: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
    /**
     * grantable_roles_at_other array
     */
    grantable_roles_at_other?: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
    /**
     * name string
     */
    name?: string;
    /**
     * roles array
     */
    roles?: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
    /**
     * roles_at_base array
     */
    roles_at_base?: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
    /**
     * roles_at_hq array
     */
    roles_at_hq?: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
    /**
     * roles_at_other array
     */
    roles_at_other?: Array<('Account_Take_1' | 'Account_Take_2' | 'Account_Take_3' | 'Account_Take_4' | 'Account_Take_5' | 'Account_Take_6' | 'Account_Take_7' | 'Accountant' | 'Auditor' | 'Brand_Manager' | 'Communications_Officer' | 'Config_Equipment' | 'Config_Starbase_Equipment' | 'Container_Take_1' | 'Container_Take_2' | 'Container_Take_3' | 'Container_Take_4' | 'Container_Take_5' | 'Container_Take_6' | 'Container_Take_7' | 'Contract_Manager' | 'Deliveries_Container_Take' | 'Deliveries_Query' | 'Deliveries_Take' | 'Diplomat' | 'Director' | 'Factory_Manager' | 'Fitting_Manager' | 'Hangar_Query_1' | 'Hangar_Query_2' | 'Hangar_Query_3' | 'Hangar_Query_4' | 'Hangar_Query_5' | 'Hangar_Query_6' | 'Hangar_Query_7' | 'Hangar_Take_1' | 'Hangar_Take_2' | 'Hangar_Take_3' | 'Hangar_Take_4' | 'Hangar_Take_5' | 'Hangar_Take_6' | 'Hangar_Take_7' | 'Junior_Accountant' | 'Personnel_Manager' | 'Project_Manager' | 'Rent_Factory_Facility' | 'Rent_Office' | 'Rent_Research_Facility' | 'Security_Officer' | 'Skill_Plan_Manager' | 'Starbase_Defense_Operator' | 'Starbase_Fuel_Technician' | 'Station_Manager' | 'Trader')>;
    /**
     * title_id integer
     */
    title_id?: number;
}>;

export type GetCorporationsCorporationIdTitlesError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdWalletsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdWalletsResponse = Array<{
    /**
     * balance number
     */
    balance: number;
    /**
     * division integer
     */
    division: number;
}>;

export type GetCorporationsCorporationIdWalletsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdWalletsDivisionJournalData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
        /**
         * Wallet key of the division to fetch journals from
         */
        division: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdWalletsDivisionJournalResponse = Array<{
    /**
     * The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet and negative when ISK is withdrawn
     */
    amount?: number;
    /**
     * Wallet balance after transaction occurred
     */
    balance?: number;
    /**
     * An ID that gives extra context to the particular transaction. Because of legacy reasons the context is completely different per ref_type and means different things. It is also possible to not have a context_id
     */
    context_id?: number;
    /**
     * The type of the given context_id if present
     */
    context_id_type?: 'structure_id' | 'station_id' | 'market_transaction_id' | 'character_id' | 'corporation_id' | 'alliance_id' | 'eve_system' | 'industry_job_id' | 'contract_id' | 'planet_id' | 'system_id' | 'type_id';
    /**
     * Date and time of transaction
     */
    date: string;
    /**
     * The reason for the transaction, mirrors what is seen in the client
     */
    description: string;
    /**
     * The id of the first party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
     */
    first_party_id?: number;
    /**
     * Unique journal reference ID
     */
    id: number;
    /**
     * The user stated reason for the transaction. Only applies to some ref_types
     */
    reason?: string;
    /**
     * "The transaction type for the given. transaction. Different transaction types will populate different attributes. Note: If you have an existing XML API application that is using ref_types, you will need to know which string ESI ref_type maps to which integer. You can look at the following file to see string->int mappings: https://github.com/ccpgames/eve-glue/blob/master/eve_glue/wallet_journal_ref.py"
     */
    ref_type: 'acceleration_gate_fee' | 'advertisement_listing_fee' | 'agent_donation' | 'agent_location_services' | 'agent_miscellaneous' | 'agent_mission_collateral_paid' | 'agent_mission_collateral_refunded' | 'agent_mission_reward' | 'agent_mission_reward_corporation_tax' | 'agent_mission_time_bonus_reward' | 'agent_mission_time_bonus_reward_corporation_tax' | 'agent_security_services' | 'agent_services_rendered' | 'agents_preward' | 'alliance_maintainance_fee' | 'alliance_registration_fee' | 'allignment_based_gate_toll' | 'asset_safety_recovery_tax' | 'bounty' | 'bounty_prize' | 'bounty_prize_corporation_tax' | 'bounty_prizes' | 'bounty_reimbursement' | 'bounty_surcharge' | 'brokers_fee' | 'clone_activation' | 'clone_transfer' | 'contraband_fine' | 'contract_auction_bid' | 'contract_auction_bid_corp' | 'contract_auction_bid_refund' | 'contract_auction_sold' | 'contract_brokers_fee' | 'contract_brokers_fee_corp' | 'contract_collateral' | 'contract_collateral_deposited_corp' | 'contract_collateral_payout' | 'contract_collateral_refund' | 'contract_deposit' | 'contract_deposit_corp' | 'contract_deposit_refund' | 'contract_deposit_sales_tax' | 'contract_price' | 'contract_price_payment_corp' | 'contract_reversal' | 'contract_reward' | 'contract_reward_deposited' | 'contract_reward_deposited_corp' | 'contract_reward_refund' | 'contract_sales_tax' | 'copying' | 'corporate_reward_payout' | 'corporate_reward_tax' | 'corporation_account_withdrawal' | 'corporation_bulk_payment' | 'corporation_dividend_payment' | 'corporation_liquidation' | 'corporation_logo_change_cost' | 'corporation_payment' | 'corporation_registration_fee' | 'cosmetic_market_component_item_purchase' | 'cosmetic_market_skin_purchase' | 'cosmetic_market_skin_sale' | 'cosmetic_market_skin_sale_broker_fee' | 'cosmetic_market_skin_sale_tax' | 'cosmetic_market_skin_transaction' | 'courier_mission_escrow' | 'cspa' | 'cspaofflinerefund' | 'daily_challenge_reward' | 'daily_goal_payouts' | 'daily_goal_payouts_tax' | 'datacore_fee' | 'dna_modification_fee' | 'docking_fee' | 'duel_wager_escrow' | 'duel_wager_payment' | 'duel_wager_refund' | 'ess_escrow_transfer' | 'external_trade_delivery' | 'external_trade_freeze' | 'external_trade_thaw' | 'factory_slot_rental_fee' | 'flux_payout' | 'flux_tax' | 'flux_ticket_repayment' | 'flux_ticket_sale' | 'gm_cash_transfer' | 'industry_job_tax' | 'infrastructure_hub_maintenance' | 'inheritance' | 'insurance' | 'insurgency_corruption_contribution_reward' | 'insurgency_suppression_contribution_reward' | 'item_trader_payment' | 'jump_clone_activation_fee' | 'jump_clone_installation_fee' | 'kill_right_fee' | 'lp_store' | 'manufacturing' | 'market_escrow' | 'market_fine_paid' | 'market_provider_tax' | 'market_transaction' | 'medal_creation' | 'medal_issued' | 'milestone_reward_payment' | 'mission_completion' | 'mission_cost' | 'mission_expiration' | 'mission_reward' | 'office_rental_fee' | 'operation_bonus' | 'opportunity_reward' | 'planetary_construction' | 'planetary_export_tax' | 'planetary_import_tax' | 'player_donation' | 'player_trading' | 'project_discovery_reward' | 'project_discovery_tax' | 'project_payouts' | 'reaction' | 'redeemed_isk_token' | 'release_of_impounded_property' | 'repair_bill' | 'reprocessing_tax' | 'researching_material_productivity' | 'researching_technology' | 'researching_time_productivity' | 'resource_wars_reward' | 'reverse_engineering' | 'season_challenge_reward' | 'security_processing_fee' | 'shares' | 'skill_purchase' | 'sovereignity_bill' | 'store_purchase' | 'store_purchase_refund' | 'structure_gate_jump' | 'transaction_tax' | 'under_construction' | 'upkeep_adjustment_fee' | 'war_ally_contract' | 'war_fee' | 'war_fee_surrender';
    /**
     * The id of the second party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
     */
    second_party_id?: number;
    /**
     * Tax amount received. Only applies to tax related transactions
     */
    tax?: number;
    /**
     * The corporation ID receiving any tax paid. Only applies to tax related transactions
     */
    tax_receiver_id?: number;
}>;

export type GetCorporationsCorporationIdWalletsDivisionJournalError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetCorporationsCorporationIdWalletsDivisionTransactionsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
        /**
         * Wallet key of the division to fetch journals from
         */
        division: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Only show journal entries happened before the transaction referenced by this id
         */
        from_id?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetCorporationsCorporationIdWalletsDivisionTransactionsResponse = Array<{
    /**
     * client_id integer
     */
    client_id: number;
    /**
     * Date and time of transaction
     */
    date: string;
    /**
     * is_buy boolean
     */
    is_buy: boolean;
    /**
     * -1 if there is no corresponding wallet journal entry
     */
    journal_ref_id: number;
    /**
     * location_id integer
     */
    location_id: number;
    /**
     * quantity integer
     */
    quantity: number;
    /**
     * Unique transaction ID
     */
    transaction_id: number;
    /**
     * type_id integer
     */
    type_id: number;
    /**
     * Amount paid per unit
     */
    unit_price: number;
}>;

export type GetCorporationsCorporationIdWalletsDivisionTransactionsError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetDogmaAttributesData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetDogmaAttributesResponse = Array<(number)>;

export type GetDogmaAttributesError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetDogmaAttributesAttributeIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * A dogma attribute ID
         */
        attribute_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetDogmaAttributesAttributeIdResponse = {
    /**
     * attribute_id integer
     */
    attribute_id: number;
    /**
     * default_value number
     */
    default_value?: number;
    /**
     * description string
     */
    description?: string;
    /**
     * display_name string
     */
    display_name?: string;
    /**
     * high_is_good boolean
     */
    high_is_good?: boolean;
    /**
     * icon_id integer
     */
    icon_id?: number;
    /**
     * name string
     */
    name?: string;
    /**
     * published boolean
     */
    published?: boolean;
    /**
     * stackable boolean
     */
    stackable?: boolean;
    /**
     * unit_id integer
     */
    unit_id?: number;
};

export type GetDogmaAttributesAttributeIdError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetDogmaDynamicItemsTypeIdItemIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * item_id integer
         */
        item_id: number;
        /**
         * type_id integer
         */
        type_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetDogmaDynamicItemsTypeIdItemIdResponse = {
    /**
     * The ID of the character who created the item
     */
    created_by: number;
    /**
     * dogma_attributes array
     */
    dogma_attributes: Array<{
        /**
         * attribute_id integer
         */
        attribute_id: number;
        /**
         * value number
         */
        value: number;
    }>;
    /**
     * dogma_effects array
     */
    dogma_effects: Array<{
        /**
         * effect_id integer
         */
        effect_id: number;
        /**
         * is_default boolean
         */
        is_default: boolean;
    }>;
    /**
     * The type ID of the mutator used to generate the dynamic item.
     */
    mutator_type_id: number;
    /**
     * The type ID of the source item the mutator was applied to create the dynamic item.
     */
    source_type_id: number;
};

export type GetDogmaDynamicItemsTypeIdItemIdError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetDogmaEffectsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetDogmaEffectsResponse = Array<(number)>;

export type GetDogmaEffectsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetDogmaEffectsEffectIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * A dogma effect ID
         */
        effect_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetDogmaEffectsEffectIdResponse = {
    /**
     * description string
     */
    description?: string;
    /**
     * disallow_auto_repeat boolean
     */
    disallow_auto_repeat?: boolean;
    /**
     * discharge_attribute_id integer
     */
    discharge_attribute_id?: number;
    /**
     * display_name string
     */
    display_name?: string;
    /**
     * duration_attribute_id integer
     */
    duration_attribute_id?: number;
    /**
     * effect_category integer
     */
    effect_category?: number;
    /**
     * effect_id integer
     */
    effect_id: number;
    /**
     * electronic_chance boolean
     */
    electronic_chance?: boolean;
    /**
     * falloff_attribute_id integer
     */
    falloff_attribute_id?: number;
    /**
     * icon_id integer
     */
    icon_id?: number;
    /**
     * is_assistance boolean
     */
    is_assistance?: boolean;
    /**
     * is_offensive boolean
     */
    is_offensive?: boolean;
    /**
     * is_warp_safe boolean
     */
    is_warp_safe?: boolean;
    /**
     * modifiers array
     */
    modifiers?: Array<{
        /**
         * domain string
         */
        domain?: string;
        /**
         * effect_id integer
         */
        effect_id?: number;
        /**
         * func string
         */
        func: string;
        /**
         * modified_attribute_id integer
         */
        modified_attribute_id?: number;
        /**
         * modifying_attribute_id integer
         */
        modifying_attribute_id?: number;
        /**
         * operator integer
         */
        operator?: number;
    }>;
    /**
     * name string
     */
    name?: string;
    /**
     * post_expression integer
     */
    post_expression?: number;
    /**
     * pre_expression integer
     */
    pre_expression?: number;
    /**
     * published boolean
     */
    published?: boolean;
    /**
     * range_attribute_id integer
     */
    range_attribute_id?: number;
    /**
     * range_chance boolean
     */
    range_chance?: boolean;
    /**
     * tracking_speed_attribute_id integer
     */
    tracking_speed_attribute_id?: number;
};

export type GetDogmaEffectsEffectIdError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetFleetsFleetIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * ID for a fleet
         */
        fleet_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetFleetsFleetIdResponse = {
    /**
     * Is free-move enabled
     */
    is_free_move: boolean;
    /**
     * Does the fleet have an active fleet advertisement
     */
    is_registered: boolean;
    /**
     * Is EVE Voice enabled
     */
    is_voice_enabled: boolean;
    /**
     * Fleet MOTD in CCP flavoured HTML
     */
    motd: string;
};

export type GetFleetsFleetIdError = string | bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PutFleetsFleetIdData = {
    /**
     * What to update for this fleet
     */
    body: {
        /**
         * Should free-move be enabled in the fleet
         */
        is_free_move?: boolean;
        /**
         * New fleet MOTD in CCP flavoured HTML
         */
        motd?: string;
    };
    path: {
        /**
         * ID for a fleet
         */
        fleet_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PutFleetsFleetIdResponse = void;

export type PutFleetsFleetIdError = bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetFleetsFleetIdMembersData = {
    headers?: {
        /**
         * Language to use in the response
         */
        'Accept-Language'?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * ID for a fleet
         */
        fleet_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Language to use in the response, takes precedence over Accept-Language
         */
        language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetFleetsFleetIdMembersResponse = Array<{
    /**
     * character_id integer
     */
    character_id: number;
    /**
     * join_time string
     */
    join_time: string;
    /**
     * Member’s role in fleet
     */
    role: 'fleet_commander' | 'wing_commander' | 'squad_commander' | 'squad_member';
    /**
     * Localized role names
     */
    role_name: string;
    /**
     * ship_type_id integer
     */
    ship_type_id: number;
    /**
     * Solar system the member is located in
     */
    solar_system_id: number;
    /**
     * ID of the squad the member is in. If not applicable, will be set to -1
     */
    squad_id: number;
    /**
     * Station in which the member is docked in, if applicable
     */
    station_id?: number;
    /**
     * Whether the member take fleet warps
     */
    takes_fleet_warp: boolean;
    /**
     * ID of the wing the member is in. If not applicable, will be set to -1
     */
    wing_id: number;
}>;

export type GetFleetsFleetIdMembersError = string | bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PostFleetsFleetIdMembersData = {
    /**
     * Details of the invitation
     */
    body: {
        /**
         * The character you want to invite
         */
        character_id: number;
        /**
         * If a character is invited with the `fleet_commander` role, neither `wing_id` or `squad_id` should be specified. If a character is invited with the `wing_commander` role, only `wing_id` should be specified. If a character is invited with the `squad_commander` role, both `wing_id` and `squad_id` should be specified. If a character is invited with the `squad_member` role, `wing_id` and `squad_id` should either both be specified or not specified at all. If they aren’t specified, the invited character will join any squad with available positions.
         */
        role: 'fleet_commander' | 'wing_commander' | 'squad_commander' | 'squad_member';
        /**
         * squad_id integer
         */
        squad_id?: number;
        /**
         * wing_id integer
         */
        wing_id?: number;
    };
    path: {
        /**
         * ID for a fleet
         */
        fleet_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PostFleetsFleetIdMembersResponse = void;

export type PostFleetsFleetIdMembersError = bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | {
    /**
     * error message
     */
    error?: string;
} | internal_server_error | service_unavailable | gateway_timeout;

export type DeleteFleetsFleetIdMembersMemberIdData = {
    path: {
        /**
         * ID for a fleet
         */
        fleet_id: number;
        /**
         * The character ID of a member in this fleet
         */
        member_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type DeleteFleetsFleetIdMembersMemberIdResponse = void;

export type DeleteFleetsFleetIdMembersMemberIdError = bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PutFleetsFleetIdMembersMemberIdData = {
    /**
     * Details of the invitation
     */
    body: {
        /**
         * If a character is moved to the `fleet_commander` role, neither `wing_id` or `squad_id` should be specified. If a character is moved to the `wing_commander` role, only `wing_id` should be specified. If a character is moved to the `squad_commander` role, both `wing_id` and `squad_id` should be specified. If a character is moved to the `squad_member` role, both `wing_id` and `squad_id` should be specified.
         */
        role: 'fleet_commander' | 'wing_commander' | 'squad_commander' | 'squad_member';
        /**
         * squad_id integer
         */
        squad_id?: number;
        /**
         * wing_id integer
         */
        wing_id?: number;
    };
    path: {
        /**
         * ID for a fleet
         */
        fleet_id: number;
        /**
         * The character ID of a member in this fleet
         */
        member_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PutFleetsFleetIdMembersMemberIdResponse = void;

export type PutFleetsFleetIdMembersMemberIdError = bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | {
    /**
     * error message
     */
    error?: string;
} | internal_server_error | service_unavailable | gateway_timeout;

export type DeleteFleetsFleetIdSquadsSquadIdData = {
    path: {
        /**
         * ID for a fleet
         */
        fleet_id: number;
        /**
         * The squad to delete
         */
        squad_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type DeleteFleetsFleetIdSquadsSquadIdResponse = void;

export type DeleteFleetsFleetIdSquadsSquadIdError = bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PutFleetsFleetIdSquadsSquadIdData = {
    /**
     * New name of the squad
     */
    body: {
        /**
         * name string
         */
        name: string;
    };
    path: {
        /**
         * ID for a fleet
         */
        fleet_id: number;
        /**
         * The squad to rename
         */
        squad_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PutFleetsFleetIdSquadsSquadIdResponse = void;

export type PutFleetsFleetIdSquadsSquadIdError = bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetFleetsFleetIdWingsData = {
    headers?: {
        /**
         * Language to use in the response
         */
        'Accept-Language'?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * ID for a fleet
         */
        fleet_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Language to use in the response, takes precedence over Accept-Language
         */
        language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetFleetsFleetIdWingsResponse = Array<{
    /**
     * id integer
     */
    id: number;
    /**
     * name string
     */
    name: string;
    /**
     * squads array
     */
    squads: Array<{
        /**
         * id integer
         */
        id: number;
        /**
         * name string
         */
        name: string;
    }>;
}>;

export type GetFleetsFleetIdWingsError = string | bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PostFleetsFleetIdWingsData = {
    path: {
        /**
         * ID for a fleet
         */
        fleet_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PostFleetsFleetIdWingsResponse = {
    /**
     * The wing_id of the newly created wing
     */
    wing_id: number;
};

export type PostFleetsFleetIdWingsError = bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type DeleteFleetsFleetIdWingsWingIdData = {
    path: {
        /**
         * ID for a fleet
         */
        fleet_id: number;
        /**
         * The wing to delete
         */
        wing_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type DeleteFleetsFleetIdWingsWingIdResponse = void;

export type DeleteFleetsFleetIdWingsWingIdError = bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PutFleetsFleetIdWingsWingIdData = {
    /**
     * New name of the wing
     */
    body: {
        /**
         * name string
         */
        name: string;
    };
    path: {
        /**
         * ID for a fleet
         */
        fleet_id: number;
        /**
         * The wing to rename
         */
        wing_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PutFleetsFleetIdWingsWingIdResponse = void;

export type PutFleetsFleetIdWingsWingIdError = bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PostFleetsFleetIdWingsWingIdSquadsData = {
    path: {
        /**
         * ID for a fleet
         */
        fleet_id: number;
        /**
         * The wing_id to create squad in
         */
        wing_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PostFleetsFleetIdWingsWingIdSquadsResponse = {
    /**
     * The squad_id of the newly created squad
     */
    squad_id: number;
};

export type PostFleetsFleetIdWingsWingIdSquadsError = bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetFwLeaderboardsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetFwLeaderboardsResponse = {
    /**
     * Top 4 rankings of factions by number of kills from yesterday, last week and in total
     */
    kills: {
        /**
         * Top 4 ranking of factions active in faction warfare by total kills. A faction is considered "active" if they have participated in faction warfare in the past 14 days
         */
        active_total: Array<{
            /**
             * Amount of kills
             */
            amount?: number;
            /**
             * faction_id integer
             */
            faction_id?: number;
        }>;
        /**
         * Top 4 ranking of factions by kills in the past week
         */
        last_week: Array<{
            /**
             * Amount of kills
             */
            amount?: number;
            /**
             * faction_id integer
             */
            faction_id?: number;
        }>;
        /**
         * Top 4 ranking of factions by kills in the past day
         */
        yesterday: Array<{
            /**
             * Amount of kills
             */
            amount?: number;
            /**
             * faction_id integer
             */
            faction_id?: number;
        }>;
    };
    /**
     * Top 4 rankings of factions by victory points from yesterday, last week and in total
     */
    victory_points: {
        /**
         * Top 4 ranking of factions active in faction warfare by total victory points. A faction is considered "active" if they have participated in faction warfare in the past 14 days
         */
        active_total: Array<{
            /**
             * Amount of victory points
             */
            amount?: number;
            /**
             * faction_id integer
             */
            faction_id?: number;
        }>;
        /**
         * Top 4 ranking of factions by victory points in the past week
         */
        last_week: Array<{
            /**
             * Amount of victory points
             */
            amount?: number;
            /**
             * faction_id integer
             */
            faction_id?: number;
        }>;
        /**
         * Top 4 ranking of factions by victory points in the past day
         */
        yesterday: Array<{
            /**
             * Amount of victory points
             */
            amount?: number;
            /**
             * faction_id integer
             */
            faction_id?: number;
        }>;
    };
};

export type GetFwLeaderboardsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetFwLeaderboardsCharactersData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetFwLeaderboardsCharactersResponse = {
    /**
     * Top 100 rankings of pilots by number of kills from yesterday, last week and in total
     */
    kills: {
        /**
         * Top 100 ranking of pilots active in faction warfare by total kills. A pilot is considered "active" if they have participated in faction warfare in the past 14 days
         */
        active_total: Array<{
            /**
             * Amount of kills
             */
            amount?: number;
            /**
             * character_id integer
             */
            character_id?: number;
        }>;
        /**
         * Top 100 ranking of pilots by kills in the past week
         */
        last_week: Array<{
            /**
             * Amount of kills
             */
            amount?: number;
            /**
             * character_id integer
             */
            character_id?: number;
        }>;
        /**
         * Top 100 ranking of pilots by kills in the past day
         */
        yesterday: Array<{
            /**
             * Amount of kills
             */
            amount?: number;
            /**
             * character_id integer
             */
            character_id?: number;
        }>;
    };
    /**
     * Top 100 rankings of pilots by victory points from yesterday, last week and in total
     */
    victory_points: {
        /**
         * Top 100 ranking of pilots active in faction warfare by total victory points. A pilot is considered "active" if they have participated in faction warfare in the past 14 days
         */
        active_total: Array<{
            /**
             * Amount of victory points
             */
            amount?: number;
            /**
             * character_id integer
             */
            character_id?: number;
        }>;
        /**
         * Top 100 ranking of pilots by victory points in the past week
         */
        last_week: Array<{
            /**
             * Amount of victory points
             */
            amount?: number;
            /**
             * character_id integer
             */
            character_id?: number;
        }>;
        /**
         * Top 100 ranking of pilots by victory points in the past day
         */
        yesterday: Array<{
            /**
             * Amount of victory points
             */
            amount?: number;
            /**
             * character_id integer
             */
            character_id?: number;
        }>;
    };
};

export type GetFwLeaderboardsCharactersError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetFwLeaderboardsCorporationsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetFwLeaderboardsCorporationsResponse = {
    /**
     * Top 10 rankings of corporations by number of kills from yesterday, last week and in total
     */
    kills: {
        /**
         * Top 10 ranking of corporations active in faction warfare by total kills. A corporation is considered "active" if they have participated in faction warfare in the past 14 days
         */
        active_total: Array<{
            /**
             * Amount of kills
             */
            amount?: number;
            /**
             * corporation_id integer
             */
            corporation_id?: number;
        }>;
        /**
         * Top 10 ranking of corporations by kills in the past week
         */
        last_week: Array<{
            /**
             * Amount of kills
             */
            amount?: number;
            /**
             * corporation_id integer
             */
            corporation_id?: number;
        }>;
        /**
         * Top 10 ranking of corporations by kills in the past day
         */
        yesterday: Array<{
            /**
             * Amount of kills
             */
            amount?: number;
            /**
             * corporation_id integer
             */
            corporation_id?: number;
        }>;
    };
    /**
     * Top 10 rankings of corporations by victory points from yesterday, last week and in total
     */
    victory_points: {
        /**
         * Top 10 ranking of corporations active in faction warfare by total victory points. A corporation is considered "active" if they have participated in faction warfare in the past 14 days
         */
        active_total: Array<{
            /**
             * Amount of victory points
             */
            amount?: number;
            /**
             * corporation_id integer
             */
            corporation_id?: number;
        }>;
        /**
         * Top 10 ranking of corporations by victory points in the past week
         */
        last_week: Array<{
            /**
             * Amount of victory points
             */
            amount?: number;
            /**
             * corporation_id integer
             */
            corporation_id?: number;
        }>;
        /**
         * Top 10 ranking of corporations by victory points in the past day
         */
        yesterday: Array<{
            /**
             * Amount of victory points
             */
            amount?: number;
            /**
             * corporation_id integer
             */
            corporation_id?: number;
        }>;
    };
};

export type GetFwLeaderboardsCorporationsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetFwStatsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetFwStatsResponse = Array<{
    /**
     * faction_id integer
     */
    faction_id: number;
    /**
     * Summary of kills against an enemy faction for the given faction
     */
    kills: {
        /**
         * Last week's total number of kills against enemy factions
         */
        last_week: number;
        /**
         * Total number of kills against enemy factions since faction warfare began
         */
        total: number;
        /**
         * Yesterday's total number of kills against enemy factions
         */
        yesterday: number;
    };
    /**
     * How many pilots fight for the given faction
     */
    pilots: number;
    /**
     * The number of solar systems controlled by the given faction
     */
    systems_controlled: number;
    /**
     * Summary of victory points gained for the given faction
     */
    victory_points: {
        /**
         * Last week's victory points gained
         */
        last_week: number;
        /**
         * Total victory points gained since faction warfare began
         */
        total: number;
        /**
         * Yesterday's victory points gained
         */
        yesterday: number;
    };
}>;

export type GetFwStatsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetFwSystemsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetFwSystemsResponse = Array<{
    /**
     * contested string
     */
    contested: 'captured' | 'contested' | 'uncontested' | 'vulnerable';
    /**
     * occupier_faction_id integer
     */
    occupier_faction_id: number;
    /**
     * owner_faction_id integer
     */
    owner_faction_id: number;
    /**
     * solar_system_id integer
     */
    solar_system_id: number;
    /**
     * victory_points integer
     */
    victory_points: number;
    /**
     * victory_points_threshold integer
     */
    victory_points_threshold: number;
}>;

export type GetFwSystemsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetFwWarsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetFwWarsResponse = Array<{
    /**
     * The faction ID of the enemy faction.
     */
    against_id: number;
    /**
     * faction_id integer
     */
    faction_id: number;
}>;

export type GetFwWarsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetIncursionsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetIncursionsResponse = Array<{
    /**
     * The constellation id in which this incursion takes place
     */
    constellation_id: number;
    /**
     * The attacking faction's id
     */
    faction_id: number;
    /**
     * Whether the final encounter has boss or not
     */
    has_boss: boolean;
    /**
     * A list of infested solar system ids that are a part of this incursion
     */
    infested_solar_systems: Array<(number)>;
    /**
     * Influence of this incursion as a float from 0 to 1
     */
    influence: number;
    /**
     * Staging solar system for this incursion
     */
    staging_solar_system_id: number;
    /**
     * The state of this incursion
     */
    state: 'withdrawing' | 'mobilizing' | 'established';
    /**
     * The type of this incursion
     */
    type: string;
}>;

export type GetIncursionsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetIndustryFacilitiesData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetIndustryFacilitiesResponse = Array<{
    /**
     * ID of the facility
     */
    facility_id: number;
    /**
     * Owner of the facility
     */
    owner_id: number;
    /**
     * Region ID where the facility is
     */
    region_id: number;
    /**
     * Solar system ID where the facility is
     */
    solar_system_id: number;
    /**
     * Tax imposed by the facility
     */
    tax?: number;
    /**
     * Type ID of the facility
     */
    type_id: number;
}>;

export type GetIndustryFacilitiesError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetIndustrySystemsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetIndustrySystemsResponse = Array<{
    /**
     * cost_indices array
     */
    cost_indices: Array<{
        /**
         * activity string
         */
        activity: 'copying' | 'duplicating' | 'invention' | 'manufacturing' | 'none' | 'reaction' | 'researching_material_efficiency' | 'researching_technology' | 'researching_time_efficiency' | 'reverse_engineering';
        /**
         * cost_index number
         */
        cost_index: number;
    }>;
    /**
     * solar_system_id integer
     */
    solar_system_id: number;
}>;

export type GetIndustrySystemsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetInsurancePricesData = {
    headers?: {
        /**
         * Language to use in the response
         */
        'Accept-Language'?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Language to use in the response, takes precedence over Accept-Language
         */
        language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
    };
};

export type GetInsurancePricesResponse = Array<{
    /**
     * A list of a available insurance levels for this ship type
     */
    levels: Array<{
        /**
         * cost number
         */
        cost: number;
        /**
         * Localized insurance level
         */
        name: string;
        /**
         * payout number
         */
        payout: number;
    }>;
    /**
     * type_id integer
     */
    type_id: number;
}>;

export type GetInsurancePricesError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetKillmailsKillmailIdKillmailHashData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * The killmail hash for verification
         */
        killmail_hash: string;
        /**
         * The killmail ID to be queried
         */
        killmail_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetKillmailsKillmailIdKillmailHashResponse = {
    /**
     * attackers array
     */
    attackers: Array<{
        /**
         * alliance_id integer
         */
        alliance_id?: number;
        /**
         * character_id integer
         */
        character_id?: number;
        /**
         * corporation_id integer
         */
        corporation_id?: number;
        /**
         * damage_done integer
         */
        damage_done: number;
        /**
         * faction_id integer
         */
        faction_id?: number;
        /**
         * Was the attacker the one to achieve the final blow
         *
         */
        final_blow: boolean;
        /**
         * Security status for the attacker
         *
         */
        security_status: number;
        /**
         * What ship was the attacker flying
         *
         */
        ship_type_id?: number;
        /**
         * What weapon was used by the attacker for the kill
         *
         */
        weapon_type_id?: number;
    }>;
    /**
     * ID of the killmail
     */
    killmail_id: number;
    /**
     * Time that the victim was killed and the killmail generated
     *
     */
    killmail_time: string;
    /**
     * Moon if the kill took place at one
     */
    moon_id?: number;
    /**
     * Solar system that the kill took place in
     *
     */
    solar_system_id: number;
    /**
     * victim object
     */
    victim: {
        /**
         * alliance_id integer
         */
        alliance_id?: number;
        /**
         * character_id integer
         */
        character_id?: number;
        /**
         * corporation_id integer
         */
        corporation_id?: number;
        /**
         * How much total damage was taken by the victim
         *
         */
        damage_taken: number;
        /**
         * faction_id integer
         */
        faction_id?: number;
        /**
         * items array
         */
        items?: Array<{
            /**
             * Flag for the location of the item
             *
             */
            flag: number;
            /**
             * item_type_id integer
             */
            item_type_id: number;
            /**
             * items array
             */
            items?: Array<{
                /**
                 * flag integer
                 */
                flag: number;
                /**
                 * item_type_id integer
                 */
                item_type_id: number;
                /**
                 * quantity_destroyed integer
                 */
                quantity_destroyed?: number;
                /**
                 * quantity_dropped integer
                 */
                quantity_dropped?: number;
                /**
                 * singleton integer
                 */
                singleton: number;
            }>;
            /**
             * How many of the item were destroyed if any
             *
             */
            quantity_destroyed?: number;
            /**
             * How many of the item were dropped if any
             *
             */
            quantity_dropped?: number;
            /**
             * singleton integer
             */
            singleton: number;
        }>;
        /**
         * Coordinates of the victim in Cartesian space relative to the Sun
         *
         */
        position?: {
            /**
             * x number
             */
            x: number;
            /**
             * y number
             */
            y: number;
            /**
             * z number
             */
            z: number;
        };
        /**
         * The ship that the victim was piloting and was destroyed
         *
         */
        ship_type_id: number;
    };
    /**
     * War if the killmail is generated in relation to an official war
     *
     */
    war_id?: number;
};

export type GetKillmailsKillmailIdKillmailHashError = string | bad_request | error_limited | {
    /**
     * Unprocessable entity message
     */
    error?: string;
} | internal_server_error | service_unavailable | gateway_timeout;

export type GetLoyaltyStoresCorporationIdOffersData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An EVE corporation ID
         */
        corporation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetLoyaltyStoresCorporationIdOffersResponse = Array<{
    /**
     * Analysis kredit cost
     */
    ak_cost?: number;
    /**
     * isk_cost integer
     */
    isk_cost: number;
    /**
     * lp_cost integer
     */
    lp_cost: number;
    /**
     * offer_id integer
     */
    offer_id: number;
    /**
     * quantity integer
     */
    quantity: number;
    /**
     * required_items array
     */
    required_items: Array<{
        /**
         * quantity integer
         */
        quantity: number;
        /**
         * type_id integer
         */
        type_id: number;
    }>;
    /**
     * type_id integer
     */
    type_id: number;
}>;

export type GetLoyaltyStoresCorporationIdOffersError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetMarketsGroupsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetMarketsGroupsResponse = Array<(number)>;

export type GetMarketsGroupsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetMarketsGroupsMarketGroupIdData = {
    headers?: {
        /**
         * Language to use in the response
         */
        'Accept-Language'?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An Eve item group ID
         */
        market_group_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Language to use in the response, takes precedence over Accept-Language
         */
        language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
    };
};

export type GetMarketsGroupsMarketGroupIdResponse = {
    /**
     * description string
     */
    description: string;
    /**
     * market_group_id integer
     */
    market_group_id: number;
    /**
     * name string
     */
    name: string;
    /**
     * parent_group_id integer
     */
    parent_group_id?: number;
    /**
     * types array
     */
    types: Array<(number)>;
};

export type GetMarketsGroupsMarketGroupIdError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetMarketsPricesData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetMarketsPricesResponse = Array<{
    /**
     * adjusted_price number
     */
    adjusted_price?: number;
    /**
     * average_price number
     */
    average_price?: number;
    /**
     * type_id integer
     */
    type_id: number;
}>;

export type GetMarketsPricesError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetMarketsStructuresStructureIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * Return orders in this structure
         */
        structure_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetMarketsStructuresStructureIdResponse = Array<{
    /**
     * duration integer
     */
    duration: number;
    /**
     * is_buy_order boolean
     */
    is_buy_order: boolean;
    /**
     * issued string
     */
    issued: string;
    /**
     * location_id integer
     */
    location_id: number;
    /**
     * min_volume integer
     */
    min_volume: number;
    /**
     * order_id integer
     */
    order_id: number;
    /**
     * price number
     */
    price: number;
    /**
     * range string
     */
    range: 'station' | 'region' | 'solarsystem' | '1' | '2' | '3' | '4' | '5' | '10' | '20' | '30' | '40';
    /**
     * type_id integer
     */
    type_id: number;
    /**
     * volume_remain integer
     */
    volume_remain: number;
    /**
     * volume_total integer
     */
    volume_total: number;
}>;

export type GetMarketsStructuresStructureIdError = string | bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetMarketsRegionIdHistoryData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * Return statistics in this region
         */
        region_id: number;
    };
    query: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Return statistics for this type
         */
        type_id: number;
    };
};

export type GetMarketsRegionIdHistoryResponse = Array<{
    /**
     * average number
     */
    average: number;
    /**
     * The date of this historical statistic entry
     */
    date: string;
    /**
     * highest number
     */
    highest: number;
    /**
     * lowest number
     */
    lowest: number;
    /**
     * Total number of orders happened that day
     */
    order_count: number;
    /**
     * Total
     */
    volume: number;
}>;

export type GetMarketsRegionIdHistoryError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | {
    /**
     * Unprocessable entity message
     */
    error?: string;
} | internal_server_error | service_unavailable | gateway_timeout | {
    /**
     * Error 520 message
     */
    error?: string;
};

export type GetMarketsRegionIdOrdersData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * Return orders in this region
         */
        region_id: number;
    };
    query: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders
         */
        order_type: 'buy' | 'sell' | 'all';
        /**
         * Which page of results to return
         */
        page?: number;
        /**
         * Return orders only for this type
         */
        type_id?: number;
    };
};

export type GetMarketsRegionIdOrdersResponse = Array<{
    /**
     * duration integer
     */
    duration: number;
    /**
     * is_buy_order boolean
     */
    is_buy_order: boolean;
    /**
     * issued string
     */
    issued: string;
    /**
     * location_id integer
     */
    location_id: number;
    /**
     * min_volume integer
     */
    min_volume: number;
    /**
     * order_id integer
     */
    order_id: number;
    /**
     * price number
     */
    price: number;
    /**
     * range string
     */
    range: 'station' | 'region' | 'solarsystem' | '1' | '2' | '3' | '4' | '5' | '10' | '20' | '30' | '40';
    /**
     * The solar system this order was placed
     */
    system_id: number;
    /**
     * type_id integer
     */
    type_id: number;
    /**
     * volume_remain integer
     */
    volume_remain: number;
    /**
     * volume_total integer
     */
    volume_total: number;
}>;

export type GetMarketsRegionIdOrdersError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | {
    /**
     * Unprocessable entity message
     */
    error?: string;
} | internal_server_error | service_unavailable | gateway_timeout;

export type GetMarketsRegionIdTypesData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * Return statistics in this region
         */
        region_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
    };
};

export type GetMarketsRegionIdTypesResponse = Array<(number)>;

export type GetMarketsRegionIdTypesError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetOpportunitiesGroupsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetOpportunitiesGroupsResponse = Array<(number)>;

export type GetOpportunitiesGroupsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetOpportunitiesGroupsGroupIdData = {
    headers?: {
        /**
         * Language to use in the response
         */
        'Accept-Language'?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * ID of an opportunities group
         */
        group_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Language to use in the response, takes precedence over Accept-Language
         */
        language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
    };
};

export type GetOpportunitiesGroupsGroupIdResponse = {
    /**
     * The groups that are connected to this group on the opportunities map
     */
    connected_groups: Array<(number)>;
    /**
     * description string
     */
    description: string;
    /**
     * group_id integer
     */
    group_id: number;
    /**
     * name string
     */
    name: string;
    /**
     * notification string
     */
    notification: string;
    /**
     * Tasks need to complete for this group
     */
    required_tasks: Array<(number)>;
};

export type GetOpportunitiesGroupsGroupIdError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetOpportunitiesTasksData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetOpportunitiesTasksResponse = Array<(number)>;

export type GetOpportunitiesTasksError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetOpportunitiesTasksTaskIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * ID of an opportunities task
         */
        task_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetOpportunitiesTasksTaskIdResponse = {
    /**
     * description string
     */
    description: string;
    /**
     * name string
     */
    name: string;
    /**
     * notification string
     */
    notification: string;
    /**
     * task_id integer
     */
    task_id: number;
};

export type GetOpportunitiesTasksTaskIdError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetRouteOriginDestinationData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * destination solar system ID
         */
        destination: number;
        /**
         * origin solar system ID
         */
        origin: number;
    };
    query?: {
        /**
         * avoid solar system ID(s)
         */
        avoid?: Array<number>;
        /**
         * connected solar system pairs
         */
        connections?: Array<unknown[]>;
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * route security preference
         */
        flag?: 'shortest' | 'secure' | 'insecure';
    };
};

export type GetRouteOriginDestinationResponse = Array<(number)>;

export type GetRouteOriginDestinationError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetSovereigntyCampaignsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetSovereigntyCampaignsResponse = Array<{
    /**
     * Score for all attacking parties, only present in Defense Events.
     *
     */
    attackers_score?: number;
    /**
     * Unique ID for this campaign.
     */
    campaign_id: number;
    /**
     * The constellation in which the campaign will take place.
     *
     */
    constellation_id: number;
    /**
     * Defending alliance, only present in Defense Events
     *
     */
    defender_id?: number;
    /**
     * Score for the defending alliance, only present in Defense Events.
     *
     */
    defender_score?: number;
    /**
     * Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as "Defense Events", station_freeport as "Freeport Events".
     *
     */
    event_type: 'tcu_defense' | 'ihub_defense' | 'station_defense' | 'station_freeport';
    /**
     * Alliance participating and their respective scores, only present in Freeport Events.
     *
     */
    participants?: Array<{
        /**
         * alliance_id integer
         */
        alliance_id: number;
        /**
         * score number
         */
        score: number;
    }>;
    /**
     * The solar system the structure is located in.
     *
     */
    solar_system_id: number;
    /**
     * Time the event is scheduled to start.
     *
     */
    start_time: string;
    /**
     * The structure item ID that is related to this campaign.
     *
     */
    structure_id: number;
}>;

export type GetSovereigntyCampaignsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetSovereigntyMapData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetSovereigntyMapResponse = Array<{
    /**
     * alliance_id integer
     */
    alliance_id?: number;
    /**
     * corporation_id integer
     */
    corporation_id?: number;
    /**
     * faction_id integer
     */
    faction_id?: number;
    /**
     * system_id integer
     */
    system_id: number;
}>;

export type GetSovereigntyMapError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetSovereigntyStructuresData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetSovereigntyStructuresResponse = Array<{
    /**
     * The alliance that owns the structure.
     *
     */
    alliance_id: number;
    /**
     * Solar system in which the structure is located.
     *
     */
    solar_system_id: number;
    /**
     * Unique item ID for this structure.
     */
    structure_id: number;
    /**
     * A reference to the type of structure this is.
     *
     */
    structure_type_id: number;
    /**
     * The occupancy level for the next or current vulnerability window. This takes into account all development indexes and capital system bonuses. Also known as Activity Defense Multiplier from in the client. It increases the time that attackers must spend using their entosis links on the structure.
     *
     */
    vulnerability_occupancy_level?: number;
    /**
     * The time at which the next or current vulnerability window ends. At the end of a vulnerability window the next window is recalculated and locked in along with the vulnerabilityOccupancyLevel. If the structure is not in 100% entosis control of the defender, it will go in to 'overtime' and stay vulnerable for as long as that situation persists. Only once the defenders have 100% entosis control and has the vulnerableEndTime passed does the vulnerability interval expire and a new one is calculated.
     *
     */
    vulnerable_end_time?: string;
    /**
     * The next time at which the structure will become vulnerable. Or the start time of the current window if current time is between this and vulnerableEndTime.
     *
     */
    vulnerable_start_time?: string;
}>;

export type GetSovereigntyStructuresError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetStatusData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetStatusResponse = {
    /**
     * Current online player count
     */
    players: number;
    /**
     * Running version as string
     */
    server_version: string;
    /**
     * Server start timestamp
     */
    start_time: string;
    /**
     * If the server is in VIP mode
     */
    vip?: boolean;
};

export type GetStatusError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PostUiAutopilotWaypointData = {
    query: {
        /**
         * Whether this solar system should be added to the beginning of all waypoints
         */
        add_to_beginning: boolean;
        /**
         * Whether clean other waypoints beforing adding this one
         */
        clear_other_waypoints: boolean;
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * The destination to travel to, can be solar system, station or structure's id
         */
        destination_id: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PostUiAutopilotWaypointResponse = void;

export type PostUiAutopilotWaypointError = bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PostUiOpenwindowContractData = {
    query: {
        /**
         * The contract to open
         */
        contract_id: number;
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PostUiOpenwindowContractResponse = void;

export type PostUiOpenwindowContractError = bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PostUiOpenwindowInformationData = {
    query: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * The target to open
         */
        target_id: number;
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PostUiOpenwindowInformationResponse = void;

export type PostUiOpenwindowInformationError = bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PostUiOpenwindowMarketdetailsData = {
    query: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
        /**
         * The item type to open in market window
         */
        type_id: number;
    };
};

export type PostUiOpenwindowMarketdetailsResponse = void;

export type PostUiOpenwindowMarketdetailsError = bad_request | unauthorized | forbidden | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PostUiOpenwindowNewmailData = {
    /**
     * The details of mail to create
     */
    body: {
        /**
         * body string
         */
        body: string;
        /**
         * recipients array
         */
        recipients: Array<(number)>;
        /**
         * subject string
         */
        subject: string;
        /**
         * to_corp_or_alliance_id integer
         */
        to_corp_or_alliance_id?: number;
        /**
         * Corporations, alliances and mailing lists are all types of mailing groups. You may only send to one mailing group, at a time, so you may fill out either this field or the to_corp_or_alliance_ids field
         */
        to_mailing_list_id?: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type PostUiOpenwindowNewmailResponse = void;

export type PostUiOpenwindowNewmailError = bad_request | unauthorized | forbidden | error_limited | {
    /**
     * Unprocessable entity message
     */
    error?: string;
} | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseAncestriesData = {
    headers?: {
        /**
         * Language to use in the response
         */
        'Accept-Language'?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Language to use in the response, takes precedence over Accept-Language
         */
        language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
    };
};

export type GetUniverseAncestriesResponse = Array<{
    /**
     * The bloodline associated with this ancestry
     */
    bloodline_id: number;
    /**
     * description string
     */
    description: string;
    /**
     * icon_id integer
     */
    icon_id?: number;
    /**
     * id integer
     */
    id: number;
    /**
     * name string
     */
    name: string;
    /**
     * short_description string
     */
    short_description?: string;
}>;

export type GetUniverseAncestriesError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseAsteroidBeltsAsteroidBeltIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * asteroid_belt_id integer
         */
        asteroid_belt_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetUniverseAsteroidBeltsAsteroidBeltIdResponse = {
    /**
     * name string
     */
    name: string;
    /**
     * position object
     */
    position: {
        /**
         * x number
         */
        x: number;
        /**
         * y number
         */
        y: number;
        /**
         * z number
         */
        z: number;
    };
    /**
     * The solar system this asteroid belt is in
     */
    system_id: number;
};

export type GetUniverseAsteroidBeltsAsteroidBeltIdError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseBloodlinesData = {
    headers?: {
        /**
         * Language to use in the response
         */
        'Accept-Language'?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Language to use in the response, takes precedence over Accept-Language
         */
        language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
    };
};

export type GetUniverseBloodlinesResponse = Array<{
    /**
     * bloodline_id integer
     */
    bloodline_id: number;
    /**
     * charisma integer
     */
    charisma: number;
    /**
     * corporation_id integer
     */
    corporation_id: number;
    /**
     * description string
     */
    description: string;
    /**
     * intelligence integer
     */
    intelligence: number;
    /**
     * memory integer
     */
    memory: number;
    /**
     * name string
     */
    name: string;
    /**
     * perception integer
     */
    perception: number;
    /**
     * race_id integer
     */
    race_id: number;
    /**
     * ship_type_id integer
     */
    ship_type_id: number | null;
    /**
     * willpower integer
     */
    willpower: number;
}>;

export type GetUniverseBloodlinesError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseCategoriesData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetUniverseCategoriesResponse = Array<(number)>;

export type GetUniverseCategoriesError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseCategoriesCategoryIdData = {
    headers?: {
        /**
         * Language to use in the response
         */
        'Accept-Language'?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An Eve item category ID
         */
        category_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Language to use in the response, takes precedence over Accept-Language
         */
        language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
    };
};

export type GetUniverseCategoriesCategoryIdResponse = {
    /**
     * category_id integer
     */
    category_id: number;
    /**
     * groups array
     */
    groups: Array<(number)>;
    /**
     * name string
     */
    name: string;
    /**
     * published boolean
     */
    published: boolean;
};

export type GetUniverseCategoriesCategoryIdError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseConstellationsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetUniverseConstellationsResponse = Array<(number)>;

export type GetUniverseConstellationsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseConstellationsConstellationIdData = {
    headers?: {
        /**
         * Language to use in the response
         */
        'Accept-Language'?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * constellation_id integer
         */
        constellation_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Language to use in the response, takes precedence over Accept-Language
         */
        language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
    };
};

export type GetUniverseConstellationsConstellationIdResponse = {
    /**
     * constellation_id integer
     */
    constellation_id: number;
    /**
     * name string
     */
    name: string;
    /**
     * position object
     */
    position: {
        /**
         * x number
         */
        x: number;
        /**
         * y number
         */
        y: number;
        /**
         * z number
         */
        z: number;
    };
    /**
     * The region this constellation is in
     */
    region_id: number;
    /**
     * systems array
     */
    systems: Array<(number)>;
};

export type GetUniverseConstellationsConstellationIdError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseFactionsData = {
    headers?: {
        /**
         * Language to use in the response
         */
        'Accept-Language'?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Language to use in the response, takes precedence over Accept-Language
         */
        language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
    };
};

export type GetUniverseFactionsResponse = Array<{
    /**
     * corporation_id integer
     */
    corporation_id?: number;
    /**
     * description string
     */
    description: string;
    /**
     * faction_id integer
     */
    faction_id: number;
    /**
     * is_unique boolean
     */
    is_unique: boolean;
    /**
     * militia_corporation_id integer
     */
    militia_corporation_id?: number;
    /**
     * name string
     */
    name: string;
    /**
     * size_factor number
     */
    size_factor: number;
    /**
     * solar_system_id integer
     */
    solar_system_id?: number;
    /**
     * station_count integer
     */
    station_count: number;
    /**
     * station_system_count integer
     */
    station_system_count: number;
}>;

export type GetUniverseFactionsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseGraphicsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetUniverseGraphicsResponse = Array<(number)>;

export type GetUniverseGraphicsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseGraphicsGraphicIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * graphic_id integer
         */
        graphic_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetUniverseGraphicsGraphicIdResponse = {
    /**
     * collision_file string
     */
    collision_file?: string;
    /**
     * graphic_file string
     */
    graphic_file?: string;
    /**
     * graphic_id integer
     */
    graphic_id: number;
    /**
     * icon_folder string
     */
    icon_folder?: string;
    /**
     * sof_dna string
     */
    sof_dna?: string;
    /**
     * sof_fation_name string
     */
    sof_fation_name?: string;
    /**
     * sof_hull_name string
     */
    sof_hull_name?: string;
    /**
     * sof_race_name string
     */
    sof_race_name?: string;
};

export type GetUniverseGraphicsGraphicIdError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseGroupsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
    };
};

export type GetUniverseGroupsResponse = Array<(number)>;

export type GetUniverseGroupsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseGroupsGroupIdData = {
    headers?: {
        /**
         * Language to use in the response
         */
        'Accept-Language'?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An Eve item group ID
         */
        group_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Language to use in the response, takes precedence over Accept-Language
         */
        language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
    };
};

export type GetUniverseGroupsGroupIdResponse = {
    /**
     * category_id integer
     */
    category_id: number;
    /**
     * group_id integer
     */
    group_id: number;
    /**
     * name string
     */
    name: string;
    /**
     * published boolean
     */
    published: boolean;
    /**
     * types array
     */
    types: Array<(number)>;
};

export type GetUniverseGroupsGroupIdError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PostUniverseIdsData = {
    headers?: {
        /**
         * Language to use in the response
         */
        'Accept-Language'?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Language to use in the response, takes precedence over Accept-Language
         */
        language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
    };
};

export type PostUniverseIdsResponse = {
    /**
     * agents array
     */
    agents?: Array<{
        /**
         * id integer
         */
        id?: number;
        /**
         * name string
         */
        name?: string;
    }>;
    /**
     * alliances array
     */
    alliances?: Array<{
        /**
         * id integer
         */
        id?: number;
        /**
         * name string
         */
        name?: string;
    }>;
    /**
     * characters array
     */
    characters?: Array<{
        /**
         * id integer
         */
        id?: number;
        /**
         * name string
         */
        name?: string;
    }>;
    /**
     * constellations array
     */
    constellations?: Array<{
        /**
         * id integer
         */
        id?: number;
        /**
         * name string
         */
        name?: string;
    }>;
    /**
     * corporations array
     */
    corporations?: Array<{
        /**
         * id integer
         */
        id?: number;
        /**
         * name string
         */
        name?: string;
    }>;
    /**
     * factions array
     */
    factions?: Array<{
        /**
         * id integer
         */
        id?: number;
        /**
         * name string
         */
        name?: string;
    }>;
    /**
     * inventory_types array
     */
    inventory_types?: Array<{
        /**
         * id integer
         */
        id?: number;
        /**
         * name string
         */
        name?: string;
    }>;
    /**
     * regions array
     */
    regions?: Array<{
        /**
         * id integer
         */
        id?: number;
        /**
         * name string
         */
        name?: string;
    }>;
    /**
     * stations array
     */
    stations?: Array<{
        /**
         * id integer
         */
        id?: number;
        /**
         * name string
         */
        name?: string;
    }>;
    /**
     * systems array
     */
    systems?: Array<{
        /**
         * id integer
         */
        id?: number;
        /**
         * name string
         */
        name?: string;
    }>;
};

export type PostUniverseIdsError = bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseMoonsMoonIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * moon_id integer
         */
        moon_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetUniverseMoonsMoonIdResponse = {
    /**
     * moon_id integer
     */
    moon_id: number;
    /**
     * name string
     */
    name: string;
    /**
     * position object
     */
    position: {
        /**
         * x number
         */
        x: number;
        /**
         * y number
         */
        y: number;
        /**
         * z number
         */
        z: number;
    };
    /**
     * The solar system this moon is in
     */
    system_id: number;
};

export type GetUniverseMoonsMoonIdError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type PostUniverseNamesData = {
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type PostUniverseNamesResponse = Array<{
    /**
     * category string
     */
    category: 'alliance' | 'character' | 'constellation' | 'corporation' | 'inventory_type' | 'region' | 'solar_system' | 'station' | 'faction';
    /**
     * id integer
     */
    id: number;
    /**
     * name string
     */
    name: string;
}>;

export type PostUniverseNamesError = bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniversePlanetsPlanetIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * planet_id integer
         */
        planet_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetUniversePlanetsPlanetIdResponse = {
    /**
     * name string
     */
    name: string;
    /**
     * planet_id integer
     */
    planet_id: number;
    /**
     * position object
     */
    position: {
        /**
         * x number
         */
        x: number;
        /**
         * y number
         */
        y: number;
        /**
         * z number
         */
        z: number;
    };
    /**
     * The solar system this planet is in
     */
    system_id: number;
    /**
     * type_id integer
     */
    type_id: number;
};

export type GetUniversePlanetsPlanetIdError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseRacesData = {
    headers?: {
        /**
         * Language to use in the response
         */
        'Accept-Language'?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Language to use in the response, takes precedence over Accept-Language
         */
        language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
    };
};

export type GetUniverseRacesResponse = Array<{
    /**
     * The alliance generally associated with this race
     */
    alliance_id: number;
    /**
     * description string
     */
    description: string;
    /**
     * name string
     */
    name: string;
    /**
     * race_id integer
     */
    race_id: number;
}>;

export type GetUniverseRacesError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseRegionsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetUniverseRegionsResponse = Array<(number)>;

export type GetUniverseRegionsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseRegionsRegionIdData = {
    headers?: {
        /**
         * Language to use in the response
         */
        'Accept-Language'?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * region_id integer
         */
        region_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Language to use in the response, takes precedence over Accept-Language
         */
        language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
    };
};

export type GetUniverseRegionsRegionIdResponse = {
    /**
     * constellations array
     */
    constellations: Array<(number)>;
    /**
     * description string
     */
    description?: string;
    /**
     * name string
     */
    name: string;
    /**
     * region_id integer
     */
    region_id: number;
};

export type GetUniverseRegionsRegionIdError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseSchematicsSchematicIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * A PI schematic ID
         */
        schematic_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetUniverseSchematicsSchematicIdResponse = {
    /**
     * Time in seconds to process a run
     */
    cycle_time: number;
    /**
     * schematic_name string
     */
    schematic_name: string;
};

export type GetUniverseSchematicsSchematicIdError = string | bad_request | {
    /**
     * error message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseStargatesStargateIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * stargate_id integer
         */
        stargate_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetUniverseStargatesStargateIdResponse = {
    /**
     * destination object
     */
    destination: {
        /**
         * The stargate this stargate connects to
         */
        stargate_id: number;
        /**
         * The solar system this stargate connects to
         */
        system_id: number;
    };
    /**
     * name string
     */
    name: string;
    /**
     * position object
     */
    position: {
        /**
         * x number
         */
        x: number;
        /**
         * y number
         */
        y: number;
        /**
         * z number
         */
        z: number;
    };
    /**
     * stargate_id integer
     */
    stargate_id: number;
    /**
     * The solar system this stargate is in
     */
    system_id: number;
    /**
     * type_id integer
     */
    type_id: number;
};

export type GetUniverseStargatesStargateIdError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseStarsStarIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * star_id integer
         */
        star_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetUniverseStarsStarIdResponse = {
    /**
     * Age of star in years
     */
    age: number;
    /**
     * luminosity number
     */
    luminosity: number;
    /**
     * name string
     */
    name: string;
    /**
     * radius integer
     */
    radius: number;
    /**
     * solar_system_id integer
     */
    solar_system_id: number;
    /**
     * spectral_class string
     */
    spectral_class: 'K2 V' | 'K4 V' | 'G2 V' | 'G8 V' | 'M7 V' | 'K7 V' | 'M2 V' | 'K5 V' | 'M3 V' | 'G0 V' | 'G7 V' | 'G3 V' | 'F9 V' | 'G5 V' | 'F6 V' | 'K8 V' | 'K9 V' | 'K6 V' | 'G9 V' | 'G6 V' | 'G4 VI' | 'G4 V' | 'F8 V' | 'F2 V' | 'F1 V' | 'K3 V' | 'F0 VI' | 'G1 VI' | 'G0 VI' | 'K1 V' | 'M4 V' | 'M1 V' | 'M6 V' | 'M0 V' | 'K2 IV' | 'G2 VI' | 'K0 V' | 'K5 IV' | 'F5 VI' | 'G6 VI' | 'F6 VI' | 'F2 IV' | 'G3 VI' | 'M8 V' | 'F1 VI' | 'K1 IV' | 'F7 V' | 'G5 VI' | 'M5 V' | 'G7 VI' | 'F5 V' | 'F4 VI' | 'F8 VI' | 'K3 IV' | 'F4 IV' | 'F0 V' | 'G7 IV' | 'G8 VI' | 'F2 VI' | 'F4 V' | 'F7 VI' | 'F3 V' | 'G1 V' | 'G9 VI' | 'F3 IV' | 'F9 VI' | 'M9 V' | 'K0 IV' | 'F1 IV' | 'G4 IV' | 'F3 VI' | 'K4 IV' | 'G5 IV' | 'G3 IV' | 'G1 IV' | 'K7 IV' | 'G0 IV' | 'K6 IV' | 'K9 IV' | 'G2 IV' | 'F9 IV' | 'F0 IV' | 'K8 IV' | 'G8 IV' | 'F6 IV' | 'F5 IV' | 'A0' | 'A0IV' | 'A0IV2';
    /**
     * temperature integer
     */
    temperature: number;
    /**
     * type_id integer
     */
    type_id: number;
};

export type GetUniverseStarsStarIdError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseStationsStationIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * station_id integer
         */
        station_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetUniverseStationsStationIdResponse = {
    /**
     * max_dockable_ship_volume number
     */
    max_dockable_ship_volume: number;
    /**
     * name string
     */
    name: string;
    /**
     * office_rental_cost number
     */
    office_rental_cost: number;
    /**
     * ID of the corporation that controls this station
     */
    owner?: number;
    /**
     * position object
     */
    position: {
        /**
         * x number
         */
        x: number;
        /**
         * y number
         */
        y: number;
        /**
         * z number
         */
        z: number;
    };
    /**
     * race_id integer
     */
    race_id?: number;
    /**
     * reprocessing_efficiency number
     */
    reprocessing_efficiency: number;
    /**
     * reprocessing_stations_take number
     */
    reprocessing_stations_take: number;
    /**
     * services array
     */
    services: Array<('bounty-missions' | 'assasination-missions' | 'courier-missions' | 'interbus' | 'reprocessing-plant' | 'refinery' | 'market' | 'black-market' | 'stock-exchange' | 'cloning' | 'surgery' | 'dna-therapy' | 'repair-facilities' | 'factory' | 'labratory' | 'gambling' | 'fitting' | 'paintshop' | 'news' | 'storage' | 'insurance' | 'docking' | 'office-rental' | 'jump-clone-facility' | 'loyalty-point-store' | 'navy-offices' | 'security-offices')>;
    /**
     * station_id integer
     */
    station_id: number;
    /**
     * The solar system this station is in
     */
    system_id: number;
    /**
     * type_id integer
     */
    type_id: number;
};

export type GetUniverseStationsStationIdError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseStructuresData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Only list public structures that have this service online
         */
        filter?: 'market' | 'manufacturing_basic';
    };
};

export type GetUniverseStructuresResponse = Array<(number)>;

export type GetUniverseStructuresError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseStructuresStructureIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An Eve structure ID
         */
        structure_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Access token to use if unable to set a header
         */
        token?: string;
    };
};

export type GetUniverseStructuresStructureIdResponse = {
    /**
     * The full name of the structure
     */
    name: string;
    /**
     * The ID of the corporation who owns this particular structure
     */
    owner_id: number;
    /**
     * Coordinates of the structure in Cartesian space relative to the Sun, in metres.
     *
     */
    position?: {
        /**
         * x number
         */
        x: number;
        /**
         * y number
         */
        y: number;
        /**
         * z number
         */
        z: number;
    };
    /**
     * solar_system_id integer
     */
    solar_system_id: number;
    /**
     * type_id integer
     */
    type_id?: number;
};

export type GetUniverseStructuresStructureIdError = string | bad_request | unauthorized | forbidden | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseSystemJumpsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetUniverseSystemJumpsResponse = Array<{
    /**
     * ship_jumps integer
     */
    ship_jumps: number;
    /**
     * system_id integer
     */
    system_id: number;
}>;

export type GetUniverseSystemJumpsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseSystemKillsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetUniverseSystemKillsResponse = Array<{
    /**
     * Number of NPC ships killed in this system
     */
    npc_kills: number;
    /**
     * Number of pods killed in this system
     */
    pod_kills: number;
    /**
     * Number of player ships killed in this system
     */
    ship_kills: number;
    /**
     * system_id integer
     */
    system_id: number;
}>;

export type GetUniverseSystemKillsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseSystemsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetUniverseSystemsResponse = Array<(number)>;

export type GetUniverseSystemsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseSystemsSystemIdData = {
    headers?: {
        /**
         * Language to use in the response
         */
        'Accept-Language'?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * system_id integer
         */
        system_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Language to use in the response, takes precedence over Accept-Language
         */
        language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
    };
};

export type GetUniverseSystemsSystemIdResponse = {
    /**
     * The constellation this solar system is in
     */
    constellation_id: number;
    /**
     * name string
     */
    name: string;
    /**
     * planets array
     */
    planets?: Array<{
        /**
         * asteroid_belts array
         */
        asteroid_belts?: Array<(number)>;
        /**
         * moons array
         */
        moons?: Array<(number)>;
        /**
         * planet_id integer
         */
        planet_id: number;
    }>;
    /**
     * position object
     */
    position: {
        /**
         * x number
         */
        x: number;
        /**
         * y number
         */
        y: number;
        /**
         * z number
         */
        z: number;
    };
    /**
     * security_class string
     */
    security_class?: string;
    /**
     * security_status number
     */
    security_status: number;
    /**
     * star_id integer
     */
    star_id?: number;
    /**
     * stargates array
     */
    stargates?: Array<(number)>;
    /**
     * stations array
     */
    stations?: Array<(number)>;
    /**
     * system_id integer
     */
    system_id: number;
};

export type GetUniverseSystemsSystemIdError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseTypesData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
    };
};

export type GetUniverseTypesResponse = Array<(number)>;

export type GetUniverseTypesError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetUniverseTypesTypeIdData = {
    headers?: {
        /**
         * Language to use in the response
         */
        'Accept-Language'?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * An Eve item type ID
         */
        type_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Language to use in the response, takes precedence over Accept-Language
         */
        language?: 'en' | 'en-us' | 'de' | 'fr' | 'ja' | 'ru' | 'zh' | 'ko' | 'es';
    };
};

export type GetUniverseTypesTypeIdResponse = {
    /**
     * capacity number
     */
    capacity?: number;
    /**
     * description string
     */
    description: string;
    /**
     * dogma_attributes array
     */
    dogma_attributes?: Array<{
        /**
         * attribute_id integer
         */
        attribute_id: number;
        /**
         * value number
         */
        value: number;
    }>;
    /**
     * dogma_effects array
     */
    dogma_effects?: Array<{
        /**
         * effect_id integer
         */
        effect_id: number;
        /**
         * is_default boolean
         */
        is_default: boolean;
    }>;
    /**
     * graphic_id integer
     */
    graphic_id?: number;
    /**
     * group_id integer
     */
    group_id: number;
    /**
     * icon_id integer
     */
    icon_id?: number;
    /**
     * This only exists for types that can be put on the market
     */
    market_group_id?: number;
    /**
     * mass number
     */
    mass?: number;
    /**
     * name string
     */
    name: string;
    /**
     * packaged_volume number
     */
    packaged_volume?: number;
    /**
     * portion_size integer
     */
    portion_size?: number;
    /**
     * published boolean
     */
    published: boolean;
    /**
     * radius number
     */
    radius?: number;
    /**
     * type_id integer
     */
    type_id: number;
    /**
     * volume number
     */
    volume?: number;
};

export type GetUniverseTypesTypeIdError = string | bad_request | {
    /**
     * Not found message
     */
    error?: string;
} | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetWarsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Only return wars with ID smaller than this
         */
        max_war_id?: number;
    };
};

export type GetWarsResponse = Array<(number)>;

export type GetWarsError = string | bad_request | error_limited | internal_server_error | service_unavailable | gateway_timeout;

export type GetWarsWarIdData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * ID for a war
         */
        war_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
    };
};

export type GetWarsWarIdResponse = {
    /**
     * The aggressor corporation or alliance that declared this war, only contains either corporation_id or alliance_id
     */
    aggressor: {
        /**
         * Alliance ID if and only if the aggressor is an alliance
         */
        alliance_id?: number;
        /**
         * Corporation ID if and only if the aggressor is a corporation
         */
        corporation_id?: number;
        /**
         * ISK value of ships the aggressor has destroyed
         */
        isk_destroyed: number;
        /**
         * The number of ships the aggressor has killed
         */
        ships_killed: number;
    };
    /**
     * allied corporations or alliances, each object contains either corporation_id or alliance_id
     */
    allies?: Array<{
        /**
         * Alliance ID if and only if this ally is an alliance
         */
        alliance_id?: number;
        /**
         * Corporation ID if and only if this ally is a corporation
         */
        corporation_id?: number;
    }>;
    /**
     * Time that the war was declared
     */
    declared: string;
    /**
     * The defending corporation or alliance that declared this war, only contains either corporation_id or alliance_id
     */
    defender: {
        /**
         * Alliance ID if and only if the defender is an alliance
         */
        alliance_id?: number;
        /**
         * Corporation ID if and only if the defender is a corporation
         */
        corporation_id?: number;
        /**
         * ISK value of ships the defender has killed
         */
        isk_destroyed: number;
        /**
         * The number of ships the defender has killed
         */
        ships_killed: number;
    };
    /**
     * Time the war ended and shooting was no longer allowed
     */
    finished?: string;
    /**
     * ID of the specified war
     */
    id: number;
    /**
     * Was the war declared mutual by both parties
     */
    mutual: boolean;
    /**
     * Is the war currently open for allies or not
     */
    open_for_allies: boolean;
    /**
     * Time the war was retracted but both sides could still shoot each other
     */
    retracted?: string;
    /**
     * Time when the war started and both sides could shoot each other
     */
    started?: string;
};

export type GetWarsWarIdError = string | bad_request | error_limited | {
    /**
     * Unprocessable entity message
     */
    error?: string;
} | internal_server_error | service_unavailable | gateway_timeout;

export type GetWarsWarIdKillmailsData = {
    headers?: {
        /**
         * ETag from a previous request. A 304 will be returned if this matches the current ETag
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * A valid war ID
         */
        war_id: number;
    };
    query?: {
        /**
         * The server name you would like data from
         */
        datasource?: 'tranquility';
        /**
         * Which page of results to return
         */
        page?: number;
    };
};

export type GetWarsWarIdKillmailsResponse = Array<{
    /**
     * A hash of this killmail
     */
    killmail_hash: string;
    /**
     * ID of this killmail
     */
    killmail_id: number;
}>;

export type GetWarsWarIdKillmailsError = string | bad_request | error_limited | {
    /**
     * Unprocessable entity message
     */
    error?: string;
} | internal_server_error | service_unavailable | gateway_timeout;